
bin\Debug\ProjectAGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00001430  000014e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001430  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080022a  0080022a  0000150e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00001568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000024a7  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001413  00000000  00000000  00003b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00002114  00000000  00000000  00004f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000528  00000000  00000000  00007050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000add  00000000  00000000  00007578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001fc  00000000  00000000  00008055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000005fa  00000000  00000000  00008251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000048  00000000  00000000  0000884b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e0 e3       	ldi	r30, 0x30	; 48

000000fc <.Loc.4>:
      fc:	f4 e1       	ldi	r31, 0x14	; 20

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	aa 32       	cpi	r26, 0x2A	; 42

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	aa e2       	ldi	r26, 0x2A	; 42

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	aa 35       	cpi	r26, 0x5A	; 90

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
     122:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LedTreeIndictorLeftToggle>:
    DDRB |= (1 << PB2) | (1 << PB3);
    init_delay_led();
}

void LedTreeIndictorLeftToggle(){
        PORTB ^= (1 << TreeIndicatedLEDLeft);
     12a:	85 b1       	in	r24, 0x05	; 5

0000012c <.Loc.2>:
     12c:	94 e0       	ldi	r25, 0x04	; 4
     12e:	89 27       	eor	r24, r25
     130:	85 b9       	out	0x05, r24	; 5

00000132 <.Loc.3>:
}
     132:	08 95       	ret

00000134 <LedTreeIndictorRightToggle>:
void LedTreeIndictorRightToggle(){
        PORTB ^= (1 << TreeIndicatedLEDRight);
     134:	85 b1       	in	r24, 0x05	; 5

00000136 <.Loc.6>:
     136:	98 e0       	ldi	r25, 0x08	; 8
     138:	89 27       	eor	r24, r25
     13a:	85 b9       	out	0x05, r24	; 5

0000013c <.Loc.7>:
}
     13c:	08 95       	ret

0000013e <LedTurnSignalLeftToggle>:

void LedTurnSignalLeftToggle(){
    PORTL ^= (1 << TurnSignalLEDLeft);
     13e:	eb e0       	ldi	r30, 0x0B	; 11
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	80 81       	ld	r24, Z

00000144 <.Loc.10>:
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	89 27       	eor	r24, r25
     148:	80 83       	st	Z, r24

0000014a <.Loc.11>:
}
     14a:	08 95       	ret

0000014c <LedTurnSignalRightToggle>:
void LedTurnSignalRightToggle(){
        PORTL ^= (1 << TurnSignalLEDRight);
     14c:	eb e0       	ldi	r30, 0x0B	; 11
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	80 81       	ld	r24, Z

00000152 <.Loc.14>:
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	89 27       	eor	r24, r25
     156:	80 83       	st	Z, r24

00000158 <.Loc.15>:
}
     158:	08 95       	ret

0000015a <LedBreakLightLeft>:

void LedBreakLightLeft(int x){
    if(x){
     15a:	89 2b       	or	r24, r25
     15c:	31 f0       	breq	.+12     	; 0x16a <.L6>

0000015e <.Loc.19>:
        PORTL |= (1 << BreaklightsLeft);
     15e:	eb e0       	ldi	r30, 0x0B	; 11
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	80 81       	ld	r24, Z

00000164 <.Loc.20>:
     164:	84 60       	ori	r24, 0x04	; 4
     166:	80 83       	st	Z, r24
     168:	08 95       	ret

0000016a <.L6>:
    }
    else{
        PORTL &= ~(1 << BreaklightsLeft);
     16a:	eb e0       	ldi	r30, 0x0B	; 11
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	80 81       	ld	r24, Z

00000170 <.Loc.23>:
     170:	8b 7f       	andi	r24, 0xFB	; 251
     172:	80 83       	st	Z, r24

00000174 <.Loc.24>:
    }
}
     174:	08 95       	ret

00000176 <LedBreakLightRight>:
void LedBreakLightRight(int x){
    if(x){
     176:	89 2b       	or	r24, r25
     178:	31 f0       	breq	.+12     	; 0x186 <.L9>

0000017a <.Loc.28>:
        PORTL |= (1 << BreaklightRight);
     17a:	eb e0       	ldi	r30, 0x0B	; 11
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	80 81       	ld	r24, Z

00000180 <.Loc.29>:
     180:	88 60       	ori	r24, 0x08	; 8
     182:	80 83       	st	Z, r24
     184:	08 95       	ret

00000186 <.L9>:
    }
    else{
        PORTL &= ~(1 << BreaklightRight);
     186:	eb e0       	ldi	r30, 0x0B	; 11
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	80 81       	ld	r24, Z

0000018c <.Loc.32>:
     18c:	87 7f       	andi	r24, 0xF7	; 247
     18e:	80 83       	st	Z, r24

00000190 <.Loc.33>:
    }
}
     190:	08 95       	ret

00000192 <setBreaklights>:

void setBreaklights(int x){
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	d8 2f       	mov	r29, r24
     198:	c9 2f       	mov	r28, r25

0000019a <.Loc.36>:
    LedBreakLightLeft(x);
     19a:	0e 94 ad 00 	call	0x15a	; 0x15a <LedBreakLightLeft>

0000019e <.LVL9>:
    LedBreakLightRight(x);
     19e:	8d 2f       	mov	r24, r29
     1a0:	9c 2f       	mov	r25, r28
     1a2:	0e 94 bb 00 	call	0x176	; 0x176 <LedBreakLightRight>

000001a6 <.LVL10>:
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <LedHeadlightLeft>:

void LedHeadlightLeft(int x){
    if(x){
     1ac:	89 2b       	or	r24, r25
     1ae:	31 f0       	breq	.+12     	; 0x1bc <.L13>

000001b0 <.Loc.42>:
        PORTL |= (1 << HeadlightsLeft);
     1b0:	eb e0       	ldi	r30, 0x0B	; 11
     1b2:	f1 e0       	ldi	r31, 0x01	; 1
     1b4:	80 81       	ld	r24, Z

000001b6 <.Loc.43>:
     1b6:	80 61       	ori	r24, 0x10	; 16
     1b8:	80 83       	st	Z, r24
     1ba:	08 95       	ret

000001bc <.L13>:
    }
    else{
        PORTL &= ~(1 << HeadlightsLeft);
     1bc:	eb e0       	ldi	r30, 0x0B	; 11
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	80 81       	ld	r24, Z

000001c2 <.Loc.46>:
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	80 83       	st	Z, r24

000001c6 <.Loc.47>:
    }
}
     1c6:	08 95       	ret

000001c8 <LedHeadlightRight>:
void LedHeadlightRight(int x){
    if(x){
     1c8:	89 2b       	or	r24, r25
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <.L16>

000001cc <.Loc.51>:
        PORTL |= (1 << HeadlightsRight);
     1cc:	eb e0       	ldi	r30, 0x0B	; 11
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z

000001d2 <.Loc.52>:
     1d2:	80 62       	ori	r24, 0x20	; 32
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <.L16>:
    }
    else{
        PORTL &= ~(1 << HeadlightsRight);
     1d8:	eb e0       	ldi	r30, 0x0B	; 11
     1da:	f1 e0       	ldi	r31, 0x01	; 1
     1dc:	80 81       	ld	r24, Z

000001de <.Loc.55>:
     1de:	8f 7d       	andi	r24, 0xDF	; 223
     1e0:	80 83       	st	Z, r24

000001e2 <.Loc.56>:
    }
}
     1e2:	08 95       	ret

000001e4 <setHeadlights>:

void setHeadlights(int x){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	d8 2f       	mov	r29, r24
     1ea:	c9 2f       	mov	r28, r25

000001ec <.Loc.59>:
    LedHeadlightLeft(x);
     1ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LedHeadlightLeft>

000001f0 <.LVL20>:
    LedHeadlightRight(x);
     1f0:	8d 2f       	mov	r24, r29
     1f2:	9c 2f       	mov	r25, r28
     1f4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LedHeadlightRight>

000001f8 <.LVL21>:
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <LedNoodstopFront>:

void LedNoodstopFront(int x){
    if(x){
     1fe:	89 2b       	or	r24, r25
     200:	31 f0       	breq	.+12     	; 0x20e <.L20>

00000202 <.Loc.65>:
        PORTL |= (1 << NoodstopLEDFront);
     202:	eb e0       	ldi	r30, 0x0B	; 11
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	80 81       	ld	r24, Z

00000208 <.Loc.66>:
     208:	80 64       	ori	r24, 0x40	; 64
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <.L20>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDFront);
     20e:	eb e0       	ldi	r30, 0x0B	; 11
     210:	f1 e0       	ldi	r31, 0x01	; 1
     212:	80 81       	ld	r24, Z

00000214 <.Loc.69>:
     214:	8f 7b       	andi	r24, 0xBF	; 191
     216:	80 83       	st	Z, r24

00000218 <.Loc.70>:
    }
}
     218:	08 95       	ret

0000021a <LedNoodstopBack>:
void LedNoodstopBack(int x){
    if(x){
     21a:	89 2b       	or	r24, r25
     21c:	31 f0       	breq	.+12     	; 0x22a <.L23>

0000021e <.Loc.74>:
        PORTL |= (1 << NoodstopLEDBack);
     21e:	eb e0       	ldi	r30, 0x0B	; 11
     220:	f1 e0       	ldi	r31, 0x01	; 1
     222:	80 81       	ld	r24, Z

00000224 <.Loc.75>:
     224:	80 68       	ori	r24, 0x80	; 128
     226:	80 83       	st	Z, r24
     228:	08 95       	ret

0000022a <.L23>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDBack);
     22a:	eb e0       	ldi	r30, 0x0B	; 11
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	80 81       	ld	r24, Z

00000230 <.Loc.78>:
     230:	8f 77       	andi	r24, 0x7F	; 127
     232:	80 83       	st	Z, r24

00000234 <.Loc.79>:
    }
}
     234:	08 95       	ret

00000236 <__vector_15>:
volatile int TreeSignalLeft = 0;
volatile int TreeSignalRight = 0;

#define blinkspeed 300
volatile int counter = 0;
ISR(TIMER2_OVF_vect){
     236:	1f 92       	push	r1
     238:	0f 92       	push	r0
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	0f 92       	push	r0
     23e:	11 24       	eor	r1, r1
     240:	0b b6       	in	r0, 0x3b	; 59
     242:	0f 92       	push	r0
     244:	2f 93       	push	r18
     246:	3f 93       	push	r19
     248:	4f 93       	push	r20
     24a:	5f 93       	push	r21
     24c:	6f 93       	push	r22
     24e:	7f 93       	push	r23
     250:	8f 93       	push	r24
     252:	9f 93       	push	r25
     254:	af 93       	push	r26
     256:	bf 93       	push	r27
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31

0000025c <.Loc.81>:
    counter++;
     25c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <counter>
     260:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <counter+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <counter+0x1>
     26a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <counter>

0000026e <.Loc.83>:
    if(counter == blinkspeed){
     26e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <counter>
     272:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <counter+0x1>

00000276 <.Loc.85>:
     276:	8c 32       	cpi	r24, 0x2C	; 44
     278:	91 40       	sbci	r25, 0x01	; 1
     27a:	99 f0       	breq	.+38     	; 0x2a2 <.L35>

0000027c <.L25>:
        if(TreeSignalRight) {
                LedTreeIndictorRightToggle();
        } else PORTB &= ~(1 << TreeIndicatedLEDRight);
        counter = 0;
    }
}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0b be       	out	0x3b, r0	; 59
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <.L35>:
        if(TurnSignalLeft) {
     2a2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <TurnSignalLeft>
     2a6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <TurnSignalLeft+0x1>

000002aa <.Loc.89>:
     2aa:	89 2b       	or	r24, r25
     2ac:	19 f5       	brne	.+70     	; 0x2f4 <.L36>

000002ae <.Loc.90>:
        } else PORTL &= ~(1<<TurnSignalLEDLeft);
     2ae:	eb e0       	ldi	r30, 0x0B	; 11
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	80 83       	st	Z, r24

000002b8 <.L28>:
        if(TurnSignalRight){
     2b8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <TurnSignalRight>
     2bc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <TurnSignalRight+0x1>

000002c0 <.Loc.94>:
     2c0:	89 2b       	or	r24, r25
     2c2:	d9 f4       	brne	.+54     	; 0x2fa <.L37>

000002c4 <.Loc.95>:
        } else PORTL &= ~(1 << TurnSignalLEDRight);
     2c4:	eb e0       	ldi	r30, 0x0B	; 11
     2c6:	f1 e0       	ldi	r31, 0x01	; 1
     2c8:	80 81       	ld	r24, Z
     2ca:	8d 7f       	andi	r24, 0xFD	; 253
     2cc:	80 83       	st	Z, r24

000002ce <.L30>:
        if(TreeSignalLeft) {
     2ce:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <TreeSignalLeft>
     2d2:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <TreeSignalLeft+0x1>

000002d6 <.Loc.99>:
     2d6:	89 2b       	or	r24, r25
     2d8:	99 f4       	brne	.+38     	; 0x300 <.L38>

000002da <.Loc.100>:
        } else PORTB &= ~(1 << TreeIndicatedLEDLeft);
     2da:	2a 98       	cbi	0x05, 2	; 5

000002dc <.L32>:
        if(TreeSignalRight) {
     2dc:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <TreeSignalRight>
     2e0:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <TreeSignalRight+0x1>

000002e4 <.Loc.104>:
     2e4:	89 2b       	or	r24, r25
     2e6:	79 f4       	brne	.+30     	; 0x306 <.L39>

000002e8 <.Loc.105>:
        } else PORTB &= ~(1 << TreeIndicatedLEDRight);
     2e8:	2b 98       	cbi	0x05, 3	; 5

000002ea <.L34>:
        counter = 0;
     2ea:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <counter+0x1>
     2ee:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <counter>

000002f2 <.Loc.109>:
}
     2f2:	c4 cf       	rjmp	.-120    	; 0x27c <.L25>

000002f4 <.L36>:
                LedTurnSignalLeftToggle();
     2f4:	0e 94 9f 00 	call	0x13e	; 0x13e <LedTurnSignalLeftToggle>

000002f8 <.LVL30>:
     2f8:	df cf       	rjmp	.-66     	; 0x2b8 <.L28>

000002fa <.L37>:
                LedTurnSignalRightToggle();
     2fa:	0e 94 a6 00 	call	0x14c	; 0x14c <LedTurnSignalRightToggle>

000002fe <.LVL31>:
     2fe:	e7 cf       	rjmp	.-50     	; 0x2ce <.L30>

00000300 <.L38>:
                LedTreeIndictorLeftToggle();
     300:	0e 94 95 00 	call	0x12a	; 0x12a <LedTreeIndictorLeftToggle>

00000304 <.LVL32>:
     304:	eb cf       	rjmp	.-42     	; 0x2dc <.L32>

00000306 <.L39>:
                LedTreeIndictorRightToggle();
     306:	0e 94 9a 00 	call	0x134	; 0x134 <LedTreeIndictorRightToggle>

0000030a <.LVL33>:
     30a:	ef cf       	rjmp	.-34     	; 0x2ea <.L34>

0000030c <init_delay_led>:


void init_delay_led(){
    // Use mode 0, clkdiv = 64
    TCCR2A = 0;
     30c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

00000310 <.Loc.117>:
    TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

00000316 <.Loc.119>:

    // Disable PWM output
    OCR2A = 0;
     316:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

0000031a <.Loc.121>:
    OCR2B = 0;
     31a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

0000031e <.Loc.123>:

    //Overflow interrupt
    TIMSK2 = (1<<TOIE2);
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

00000324 <.Loc.125>:
    TCNT2 = 6;
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>

0000032a <.Loc.127>:
}
     32a:	08 95       	ret

0000032c <init_Leds>:
    DDRL = 0xff;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>

00000332 <.Loc.131>:
    DDRB |= (1 << PB2) | (1 << PB3);
     332:	84 b1       	in	r24, 0x04	; 4

00000334 <.Loc.132>:
     334:	8c 60       	ori	r24, 0x0C	; 12
     336:	84 b9       	out	0x04, r24	; 4

00000338 <.Loc.133>:
    init_delay_led();
     338:	0e 94 86 01 	call	0x30c	; 0x30c <init_delay_led>

0000033c <.LVL34>:
}
     33c:	08 95       	ret

0000033e <startTimer>:
    startTimer(); //Start de bocht
}

//Set timer aan
void startTimer(){
    AVGBochtenCounter = 0;
     33e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <AVGBochtenCounter+0x1>
     342:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <AVGBochtenCounter>

00000346 <.Loc.3>:
    TCNT4 = 0;
     346:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     34a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

0000034e <.Loc.5>:
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000354 <.Loc.7>:
}
     354:	08 95       	ret

00000356 <stopTimer>:

//Stop timer
void stopTimer(){
     TCCR4B = (0<<CS42) | (0<<CS41) | (0<<CS40);
     356:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000035a <.Loc.11>:
     turnsTaken++;
     35a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     35e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <turnsTaken+0x1>
     368:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <turnsTaken>

0000036c <.Loc.13>:
}
     36c:	08 95       	ret

0000036e <checkIfFinished>:

//Check of de bocht af is
void checkIfFinished(){
    if(turnsTaken >= 3){
     36e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     372:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     376:	03 97       	sbiw	r24, 0x03	; 3
     378:	44 f0       	brlt	.+16     	; 0x38a <.L3>

0000037a <.Loc.17>:
        turnsTaken = 0;
     37a:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <turnsTaken+0x1>
     37e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <turnsTaken>

00000382 <.Loc.19>:
        turnStarted = 0;
     382:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <turnStarted+0x1>
     386:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <turnStarted>

0000038a <.L3>:
        return 1;
    } else return 0;
}
     38a:	08 95       	ret

0000038c <startTurn>:
int startTurn(int direction){
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	d8 2f       	mov	r29, r24
     392:	c9 2f       	mov	r28, r25

00000394 <.Loc.25>:
    if(turnStarted == 1) { //Check of we niet al een bocht aan het maken zijn
     394:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <turnStarted>
     398:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <turnStarted+0x1>

0000039c <.Loc.27>:
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	99 f0       	breq	.+38     	; 0x3c6 <.L7>

000003a0 <.Loc.28>:
    setBothStepperMode(ForwardStep);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000003a8 <.LVL2>:
    turnStarted = 1;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <turnStarted+0x1>
     3b0:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <turnStarted>

000003b4 <.Loc.31>:
    turnDirection = direction;
     3b4:	d0 93 34 02 	sts	0x0234, r29	; 0x800234 <turnDirection>
     3b8:	c0 93 35 02 	sts	0x0235, r28	; 0x800235 <turnDirection+0x1>

000003bc <.Loc.33>:
    startTimer(); //Start de bocht
     3bc:	0e 94 9f 01 	call	0x33e	; 0x33e <startTimer>

000003c0 <.L5>:
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <.L7>:
        return checkIfFinished();
     3c6:	0e 94 b7 01 	call	0x36e	; 0x36e <checkIfFinished>

000003ca <.LVL4>:
     3ca:	fa cf       	rjmp	.-12     	; 0x3c0 <.L5>

000003cc <init_AGVBochten_timer>:

void init_AGVBochten_timer(){
    // Use timer 4 (16bit), clkdiv = 0, 16.000.000 / (2^16) / 8 = 30(.5175
    TCCR4A = 0;
     3cc:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

000003d0 <.Loc.40>:
    //TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);

    // Disable PWM output
    OCR4A = 0;
     3d0:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     3d4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

000003d8 <.Loc.42>:
    OCR4B = 0;
     3d8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     3dc:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>

000003e0 <.Loc.44>:

    //Compares

    //Overflow interrupt
    TIMSK4 = (1<<TOIE4);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

000003e6 <.Loc.46>:
    //TCNT4 = 6;
}
     3e6:	08 95       	ret

000003e8 <initAGVBochten>:
    init_AGVBochten_timer();
     3e8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <init_AGVBochten_timer>

000003ec <.LVL5>:
}
     3ec:	08 95       	ret

000003ee <turn>:
        turnsTaken++; //increase aantal bochten
    }
}

//Zet de wielen goed voor de bocht
void turn(int direction){
     3ee:	28 2f       	mov	r18, r24
     3f0:	39 2f       	mov	r19, r25

000003f2 <.Loc.52>:
    switch(direction) {
     3f2:	21 15       	cp	r18, r1
     3f4:	31 05       	cpc	r19, r1
     3f6:	21 f0       	breq	.+8      	; 0x400 <.L11>
     3f8:	21 30       	cpi	r18, 0x01	; 1
     3fa:	31 05       	cpc	r19, r1
     3fc:	71 f0       	breq	.+28     	; 0x41a <.L12>
     3fe:	08 95       	ret

00000400 <.L11>:
    case Left:
        setStepperMode(leftMotor, Off);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8a e0       	ldi	r24, 0x0A	; 10
     406:	90 e0       	ldi	r25, 0x00	; 0

00000408 <.Loc.54>:
     408:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

0000040c <.LVL8>:
        setStepperMode(rightMotor, ForwardStep);
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	8b e0       	ldi	r24, 0x0B	; 11
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000418 <.LVL9>:
        break;
     418:	08 95       	ret

0000041a <.L12>:
    case Right:
        setStepperMode(leftMotor, ForwardStep);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	8a e0       	ldi	r24, 0x0A	; 10
     420:	90 e0       	ldi	r25, 0x00	; 0

00000422 <.Loc.58>:
     422:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000426 <.LVL12>:
        setStepperMode(rightMotor, Off);
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	8b e0       	ldi	r24, 0x0B	; 11
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000432 <.LVL13>:
        break;
    }
}
     432:	08 95       	ret

00000434 <__vector_45>:
ISR(TIMER4_OVF_vect){
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	0b b6       	in	r0, 0x3b	; 59
     440:	0f 92       	push	r0
     442:	2f 93       	push	r18
     444:	3f 93       	push	r19
     446:	4f 93       	push	r20
     448:	5f 93       	push	r21
     44a:	6f 93       	push	r22
     44c:	7f 93       	push	r23
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
     456:	ef 93       	push	r30
     458:	ff 93       	push	r31

0000045a <.Loc.63>:
    AVGBochtenCounter++;
     45a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     45e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <AVGBochtenCounter+0x1>
     468:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <AVGBochtenCounter>

0000046c <.Loc.65>:
    if(AVGBochtenCounter == Comp_StartTurn){
     46c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     470:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>

00000474 <.Loc.67>:
     474:	81 3e       	cpi	r24, 0xE1	; 225
     476:	91 05       	cpc	r25, r1
     478:	d1 f0       	breq	.+52     	; 0x4ae <.L19>

0000047a <.L15>:
    if(AVGBochtenCounter == Comp_EndTurn){
     47a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     47e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>

00000482 <.Loc.70>:
     482:	86 35       	cpi	r24, 0x56	; 86
     484:	91 40       	sbci	r25, 0x01	; 1
     486:	19 f1       	breq	.+70     	; 0x4ce <.L20>

00000488 <.L14>:
}
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	7f 91       	pop	r23
     496:	6f 91       	pop	r22
     498:	5f 91       	pop	r21
     49a:	4f 91       	pop	r20
     49c:	3f 91       	pop	r19
     49e:	2f 91       	pop	r18
     4a0:	0f 90       	pop	r0
     4a2:	0b be       	out	0x3b, r0	; 59
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <.L19>:
        if(turnsTaken == 2) { //Als we al 2 bochten hebben gemaakt stop de timer
     4ae:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     4b2:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     4b6:	02 97       	sbiw	r24, 0x02	; 2
     4b8:	39 f0       	breq	.+14     	; 0x4c8 <.L21>

000004ba <.LBB3>:
        } else turn(turnDirection); //Zoniet, maak de bocht
     4ba:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <turnDirection>
     4be:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <turnDirection+0x1>
     4c2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <turn>

000004c6 <.LVL14>:
     4c6:	d9 cf       	rjmp	.-78     	; 0x47a <.L15>

000004c8 <.L21>:
            stopTimer();
     4c8:	0e 94 ab 01 	call	0x356	; 0x356 <stopTimer>

000004cc <.LVL15>:
     4cc:	d6 cf       	rjmp	.-84     	; 0x47a <.L15>

000004ce <.L20>:
        setBothStepperMode(ForwardStep);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000004d6 <.LVL16>:
        if(turnsTaken == 0) AVGBochtenCounter = DrivingHeadstart; //Als dit het einde is van de eerste bocht, reset de timer om het te herhalen
     4d6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     4da:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>

000004de <.Loc.79>:
     4de:	00 97       	sbiw	r24, 0x00	; 0
     4e0:	31 f4       	brne	.+12     	; 0x4ee <.L18>

000004e2 <.Loc.80>:
     4e2:	2c ee       	ldi	r18, 0xEC	; 236
     4e4:	3f ef       	ldi	r19, 0xFF	; 255
     4e6:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <AVGBochtenCounter+0x1>
     4ea:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <AVGBochtenCounter>

000004ee <.L18>:
        turnsTaken++; //increase aantal bochten
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <turnsTaken+0x1>
     4f4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <turnsTaken>

000004f8 <.Loc.84>:
}
     4f8:	c7 cf       	rjmp	.-114    	; 0x488 <.L14>

000004fa <nietInEenPad>:

    return 0;
}

int nietInEenPad(){
    return ((!bit_is_clear(IRPIN, IRSensorLeft)) && !bit_is_clear(IRPIN, IRSensorRight));
     4fa:	02 9b       	sbis	0x00, 2	; 0
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <.L3>

000004fe <.Loc.3>:
     4fe:	80 b1       	in	r24, 0x00	; 0

00000500 <.Loc.4>:
     500:	83 fb       	bst	r24, 3
     502:	88 27       	eor	r24, r24
     504:	80 f9       	bld	r24, 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	08 95       	ret

0000050a <.L3>:
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0

0000050e <.Loc.6>:
}
     50e:	08 95       	ret

00000510 <needCorrection>:

#define testDelay 0
int needCorrection(){

    //Linker bit is niet geactiveerd, we hebben een afwijking naar Rechts //Bijsturen naar links
    if(!bit_is_clear(IRPIN, IRSensorLeft)){
     510:	02 99       	sbic	0x00, 2	; 0
     512:	05 c0       	rjmp	.+10     	; 0x51e <.L8>

00000514 <.Loc.10>:
        _delay_ms(testDelay);
        return 1;
    }
    //Rechter bit is niet geactiveerd, we hebben een afwijking naar Links //bijsturen naar rechts
    if(!bit_is_clear(IRPIN, IRSensorRight)){
     514:	03 99       	sbic	0x00, 3	; 0
     516:	06 c0       	rjmp	.+12     	; 0x524 <.L9>

00000518 <.Loc.12>:
        _delay_ms(testDelay);
        return 2;
    }

    return 0;
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0

0000051c <.Loc.13>:
}
     51c:	08 95       	ret

0000051e <.L8>:
        return 1;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	08 95       	ret

00000524 <.L9>:
        return 2;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	08 95       	ret

0000052a <checkNoodstop>:

//Check of noodstop is ingedrukt
int checkNoodstop(){
    if(bit_is_clear(PINC, NoodstopPin)){
     52a:	86 b1       	in	r24, 0x06	; 6

0000052c <.Loc.39>:
     52c:	86 95       	lsr	r24
     52e:	86 95       	lsr	r24
     530:	86 95       	lsr	r24
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	89 27       	eor	r24, r25

00000536 <.Loc.40>:
        return 1;
    }
    return 0;
}
     536:	81 70       	andi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	08 95       	ret

0000053c <isStartButtonPressed>:

//Check of start knop is ingedrukt
int isStartButtonPressed(){
    return bit_is_clear(PINC, StartButtonPin);
     53c:	86 b1       	in	r24, 0x06	; 6
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	89 27       	eor	r24, r25

00000542 <.Loc.44>:
}
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	08 95       	ret

00000548 <checkModeSwitchState>:
    0- Switch staat in het midden
    1- Volgen
    2- Rijden
*/
int checkModeSwitchState(){
    if(bit_is_clear(PINC, FollowModeSwitch)){
     548:	32 9b       	sbis	0x06, 2	; 6
     54a:	0a c0       	rjmp	.+20     	; 0x560 <.L14>

0000054c <.Loc.48>:
        return 1; //Switch is in follow mode.
    }
    if(bit_is_clear(PINC, DriveModeSwitch)){
     54c:	26 b1       	in	r18, 0x06	; 6

0000054e <.Loc.50>:
     54e:	26 95       	lsr	r18
     550:	31 e0       	ldi	r19, 0x01	; 1
     552:	23 27       	eor	r18, r19
     554:	82 2f       	mov	r24, r18
     556:	81 70       	andi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	08 95       	ret

00000560 <.L14>:
        return 1; //Switch is in follow mode.
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0

00000564 <.Loc.52>:
        return 2; //Switch is in drive mode.
    }

    return 0; //Switch staat in het midden, geen van beide geactiveerd.

}
     564:	08 95       	ret

00000566 <initButtons>:

//Init buttons
void initButtons(){
    //Loop voor alle buttons
    for(int i = 0; i < 5; i++){
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0

0000056a <.Loc.58>:
        DDRC &= ~(1<<i);
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	70 e0       	ldi	r23, 0x00	; 0

0000056e <.L16>:
     56e:	37 b1       	in	r19, 0x07	; 7

00000570 <.Loc.60>:
     570:	ab 01       	movw	r20, r22
     572:	08 2e       	mov	r0, r24
     574:	02 c0       	rjmp	.+4      	; 0x57a <.L2^B1>

00000576 <.L1^B1>:
     576:	44 0f       	add	r20, r20
     578:	55 1f       	adc	r21, r21

0000057a <.L2^B1>:
     57a:	0a 94       	dec	r0
     57c:	e2 f7       	brpl	.-8      	; 0x576 <.L1^B1>

0000057e <.Loc.61>:
     57e:	24 2f       	mov	r18, r20
     580:	20 95       	com	r18
     582:	23 23       	and	r18, r19
     584:	27 b9       	out	0x07, r18	; 7

00000586 <.Loc.62>:
        PORTC |= (1<<i);
     586:	28 b1       	in	r18, 0x08	; 8

00000588 <.Loc.63>:
     588:	24 2b       	or	r18, r20
     58a:	28 b9       	out	0x08, r18	; 8

0000058c <.Loc.64>:
    for(int i = 0; i < 5; i++){
     58c:	01 96       	adiw	r24, 0x01	; 1

0000058e <.Loc.65>:
     58e:	85 30       	cpi	r24, 0x05	; 5
     590:	91 05       	cpc	r25, r1
     592:	69 f7       	brne	.-38     	; 0x56e <.L16>

00000594 <.LBE30>:
    }
}
     594:	08 95       	ret

00000596 <initIRSensors>:

//Init IR sensors
void initIRSensors(){
    //Loop voor alle IR sensors
    for(int i = 0; i < 4; i++){
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0

0000059a <.Loc.72>:
        DDRA &= ~(1<<i);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	70 e0       	ldi	r23, 0x00	; 0

0000059e <.L19>:
     59e:	31 b1       	in	r19, 0x01	; 1

000005a0 <.Loc.74>:
     5a0:	ab 01       	movw	r20, r22
     5a2:	08 2e       	mov	r0, r24
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <.L2^B2>

000005a6 <.L1^B2>:
     5a6:	44 0f       	add	r20, r20
     5a8:	55 1f       	adc	r21, r21

000005aa <.L2^B2>:
     5aa:	0a 94       	dec	r0
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <.L1^B2>

000005ae <.Loc.75>:
     5ae:	24 2f       	mov	r18, r20
     5b0:	20 95       	com	r18
     5b2:	23 23       	and	r18, r19
     5b4:	21 b9       	out	0x01, r18	; 1

000005b6 <.Loc.76>:
        PORTA |= (1<<i);
     5b6:	22 b1       	in	r18, 0x02	; 2

000005b8 <.Loc.77>:
     5b8:	24 2b       	or	r18, r20
     5ba:	22 b9       	out	0x02, r18	; 2

000005bc <.Loc.78>:
    for(int i = 0; i < 4; i++){
     5bc:	01 96       	adiw	r24, 0x01	; 1

000005be <.Loc.79>:
     5be:	84 30       	cpi	r24, 0x04	; 4
     5c0:	91 05       	cpc	r25, r1
     5c2:	69 f7       	brne	.-38     	; 0x59e <.L19>

000005c4 <.LBE31>:
    }
}
     5c4:	08 95       	ret

000005c6 <initAGV>:
    init_Leds();
     5c6:	0e 94 96 01 	call	0x32c	; 0x32c <init_Leds>

000005ca <.LVL8>:
    agv_ultrasoon_init();
     5ca:	0e 94 d2 06 	call	0xda4	; 0xda4 <agv_ultrasoon_init>

000005ce <.LVL9>:
    initSteppermotorAVRDriver();
     5ce:	0e 94 40 06 	call	0xc80	; 0xc80 <initSteppermotorAVRDriver>

000005d2 <.LVL10>:
    initIRSensors();
     5d2:	0e 94 cb 02 	call	0x596	; 0x596 <initIRSensors>

000005d6 <.LVL11>:
    initButtons();
     5d6:	0e 94 b3 02 	call	0x566	; 0x566 <initButtons>

000005da <.LVL12>:
    initAGVBochten();
     5da:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <initAGVBochten>

000005de <.LVL13>:
}
     5de:	08 95       	ret

000005e0 <checkFrontIRState>:
*/
int checkFrontIRState(){
    //return 3; //for testing without IR sensors

    //Allebij detecteren iets, return 0
    if(bit_is_clear(PINA, FrontIRSensorLeftPin) && bit_is_clear(PINA, FrontIRSensorRightPin)){
     5e0:	00 99       	sbic	0x00, 0	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <.L23>

000005e4 <.Loc.92>:
     5e4:	01 9b       	sbis	0x00, 1	; 0
     5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <.L25>

000005e8 <.L23>:
        return 0;
    }

    //Linker sensor detecteerd iets, return 1
    if(bit_is_clear(PINA, FrontIRSensorLeftPin)){
     5e8:	00 9b       	sbis	0x00, 0	; 0
     5ea:	08 c0       	rjmp	.+16     	; 0x5fc <.L26>

000005ec <.Loc.95>:
        return 1;
    }

    //Rechter sensor detecteert iets, return 2
    if(bit_is_clear(PINA, FrontIRSensorRightPin)){
     5ec:	01 9b       	sbis	0x00, 1	; 0
     5ee:	09 c0       	rjmp	.+18     	; 0x602 <.L27>

000005f0 <.Loc.97>:
        return 2;
    }

    //Return 3
    return 3; //Geen IR sensor's geactiveerd
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <.L25>:
        return 0;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	08 95       	ret

000005fc <.L26>:
        return 1;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 95       	ret

00000602 <.L27>:
        return 2;
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	90 e0       	ldi	r25, 0x00	; 0

00000606 <.Loc.101>:
}
     606:	08 95       	ret

00000608 <filterDistance>:
    Als er iets te ver weg van de sonic sensor is de waarde tussen de 500 & 660,
    dus verander dit naar een groot waarde, in dit geval 100.

    Anders return de originele waarde.
*/
int filterDistance(int distance){
     608:	28 2f       	mov	r18, r24
     60a:	39 2f       	mov	r19, r25

0000060c <.Loc.104>:
    //Alle waardes boven 200 zijn bs anyways
    if(distance == 561){
     60c:	21 33       	cpi	r18, 0x31	; 49
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	38 07       	cpc	r19, r24

00000612 <.Loc.106>:
     612:	31 f0       	breq	.+12     	; 0x620 <.L30>

00000614 <.Loc.107>:
        distance = 1;
    } else if(distance > 500){
     614:	25 3f       	cpi	r18, 0xF5	; 245
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	38 07       	cpc	r19, r24
     61a:	2c f4       	brge	.+10     	; 0x626 <.L31>
     61c:	82 2f       	mov	r24, r18
     61e:	08 95       	ret

00000620 <.L30>:
        distance = 1;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	08 95       	ret

00000626 <.L31>:
        distance = 100;
     626:	84 e6       	ldi	r24, 0x64	; 100
     628:	90 e0       	ldi	r25, 0x00	; 0

0000062a <.Loc.111>:
    }
    return distance;
}
     62a:	08 95       	ret

0000062c <checkSensors>:
    if(CheckinFrontOfAVRWhileDriving > filterDistance(agv_ultrasoon_voor_midden)){
     62c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <agv_ultrasoon_voor_midden>
     630:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <agv_ultrasoon_voor_midden+0x1>
     634:	0e 94 04 03 	call	0x608	; 0x608 <filterDistance>

00000638 <.LVL17>:
     638:	44 97       	sbiw	r24, 0x14	; 20
     63a:	0c f4       	brge	.+2      	; 0x63e <.Loc.121>

0000063c <L0^A>:
     63c:	99 c0       	rjmp	.+306    	; 0x770 <.L41>

0000063e <.Loc.121>:
    if((TreeDistance > filterDistance(agv_ultrasoon_boom_links)) && !leftPreviousState){
     63e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <agv_ultrasoon_boom_links>
     642:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <agv_ultrasoon_boom_links+0x1>
     646:	0e 94 04 03 	call	0x608	; 0x608 <filterDistance>

0000064a <.LVL18>:
     64a:	03 97       	sbiw	r24, 0x03	; 3
     64c:	54 f5       	brge	.+84     	; 0x6a2 <.L34>

0000064e <.Loc.124>:
     64e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <leftPreviousState.3>
     652:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <leftPreviousState.3+0x1>
     656:	89 2b       	or	r24, r25
     658:	09 f0       	breq	.+2      	; 0x65c <.Loc.125>

0000065a <L0^A>:
     65a:	50 c0       	rjmp	.+160    	; 0x6fc <.L35>

0000065c <.Loc.125>:
        if(!doubleCheckLeft){
     65c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <doubleCheckLeft.2>
     660:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <doubleCheckLeft.2+0x1>
     664:	89 2b       	or	r24, r25
     666:	59 f0       	breq	.+22     	; 0x67e <.L44>

00000668 <.Loc.127>:
            doubleCheckLeft = 0;
     668:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <doubleCheckLeft.2+0x1>
     66c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <doubleCheckLeft.2>

00000670 <.Loc.129>:
            leftPreviousState = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <leftPreviousState.3+0x1>
     678:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <leftPreviousState.3>

0000067c <.Loc.131>:
            return 1;
     67c:	08 95       	ret

0000067e <.L44>:
            doubleCheckLeft = 1;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <doubleCheckLeft.2+0x1>
     686:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <doubleCheckLeft.2>

0000068a <.LBB32>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	93 e1       	ldi	r25, 0x13	; 19

00000690 <.L1^B3>:
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <.L1^B3>
     698:	00 c0       	rjmp	.+0      	; 0x69a <L0^A>

0000069a <L0^A>:
	...

0000069c <.LBE32>:
            return 3;
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	08 95       	ret

000006a2 <.L34>:
    } else if(leftPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_links)) ){
     6a2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <leftPreviousState.3>
     6a6:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <leftPreviousState.3+0x1>
     6aa:	89 2b       	or	r24, r25
     6ac:	39 f5       	brne	.+78     	; 0x6fc <.L35>

000006ae <.L37>:
    if((TreeDistance > filterDistance(agv_ultrasoon_boom_rechts)) && !rightPreviousState ){
     6ae:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <agv_ultrasoon_boom_rechts>
     6b2:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <agv_ultrasoon_boom_rechts+0x1>
     6b6:	0e 94 04 03 	call	0x608	; 0x608 <filterDistance>

000006ba <.LVL21>:
     6ba:	03 97       	sbiw	r24, 0x03	; 3
     6bc:	ec f5       	brge	.+122    	; 0x738 <.L38>

000006be <.Loc.151>:
     6be:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rightPreviousState.1>
     6c2:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rightPreviousState.1+0x1>
     6c6:	89 2b       	or	r24, r25
     6c8:	09 f0       	breq	.+2      	; 0x6cc <.Loc.152>

000006ca <L0^A>:
     6ca:	3f c0       	rjmp	.+126    	; 0x74a <.L39>

000006cc <.Loc.152>:
        if(!doubleCheckRight){
     6cc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <doubleCheckRight.0>
     6d0:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <doubleCheckRight.0+0x1>
     6d4:	89 2b       	or	r24, r25
     6d6:	19 f5       	brne	.+70     	; 0x71e <.L40>

000006d8 <.Loc.154>:
            doubleCheckRight = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <doubleCheckRight.0+0x1>
     6e0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <doubleCheckRight.0>

000006e4 <.LBB34>:
     6e4:	2f ef       	ldi	r18, 0xFF	; 255
     6e6:	87 e8       	ldi	r24, 0x87	; 135
     6e8:	93 e1       	ldi	r25, 0x13	; 19

000006ea <.L1^B4>:
     6ea:	21 50       	subi	r18, 0x01	; 1
     6ec:	80 40       	sbci	r24, 0x00	; 0
     6ee:	90 40       	sbci	r25, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.L1^B4>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <L0^A>

000006f4 <L0^A>:
	...

000006f6 <.LBE34>:
            return 3;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	08 95       	ret

000006fc <.L35>:
    } else if(leftPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_links)) ){
     6fc:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <agv_ultrasoon_boom_links>
     700:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <agv_ultrasoon_boom_links+0x1>
     704:	0e 94 04 03 	call	0x608	; 0x608 <filterDistance>

00000708 <.LVL24>:
     708:	04 97       	sbiw	r24, 0x04	; 4
     70a:	8c f2       	brlt	.-94     	; 0x6ae <.L37>

0000070c <.Loc.169>:
        leftPreviousState = 0;
     70c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <leftPreviousState.3+0x1>
     710:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <leftPreviousState.3>

00000714 <.Loc.171>:
        doubleCheckLeft = 0;
     714:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <doubleCheckLeft.2+0x1>
     718:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <doubleCheckLeft.2>
     71c:	c8 cf       	rjmp	.-112    	; 0x6ae <.L37>

0000071e <.L40>:
            doubleCheckRight = 0;
     71e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <doubleCheckRight.0+0x1>
     722:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <doubleCheckRight.0>

00000726 <.Loc.175>:
            rightPreviousState = 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <rightPreviousState.1+0x1>
     72e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <rightPreviousState.1>

00000732 <.Loc.177>:
            return 2;
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	08 95       	ret

00000738 <.L38>:
    } else if(rightPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_rechts)) ){
     738:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rightPreviousState.1>
     73c:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rightPreviousState.1+0x1>
     740:	89 2b       	or	r24, r25
     742:	19 f4       	brne	.+6      	; 0x74a <.L39>

00000744 <.Loc.181>:
    return 3;
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	08 95       	ret

0000074a <.L39>:
    } else if(rightPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_rechts)) ){
     74a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <agv_ultrasoon_boom_rechts>
     74e:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <agv_ultrasoon_boom_rechts+0x1>
     752:	0e 94 04 03 	call	0x608	; 0x608 <filterDistance>

00000756 <.LVL25>:
     756:	04 97       	sbiw	r24, 0x04	; 4
     758:	74 f0       	brlt	.+28     	; 0x776 <.L43>

0000075a <.Loc.184>:
        rightPreviousState = 0;
     75a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <rightPreviousState.1+0x1>
     75e:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <rightPreviousState.1>

00000762 <.Loc.186>:
        doubleCheckRight = 0;
     762:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <doubleCheckRight.0+0x1>
     766:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <doubleCheckRight.0>

0000076a <.Loc.188>:
    return 3;
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	08 95       	ret

00000770 <.L41>:
        return 0;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	08 95       	ret

00000776 <.L43>:
    return 3;
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	90 e0       	ldi	r25, 0x00	; 0

0000077a <.Loc.191>:
}
     77a:	08 95       	ret

0000077c <followHand>:

//Code voor het volgen van de hand op de juiste afstand
void followHand(int distance){
     77c:	28 2f       	mov	r18, r24
     77e:	39 2f       	mov	r19, r25

00000780 <.Loc.194>:

    //Check voor als er iets TE ver weg staat en te negeren.
    if(distance > distanceToCheck){
     780:	29 32       	cpi	r18, 0x29	; 41
     782:	31 05       	cpc	r19, r1
     784:	5c f4       	brge	.+22     	; 0x79c <.L50>

00000786 <.Loc.196>:
        setBreaklights(0);
        return;
    }

    //Check voor juiste afstand met speelruimte
    if((distance < maxDistance) && (distance > minDistance)){
     786:	c9 01       	movw	r24, r18

00000788 <.Loc.198>:
     788:	08 97       	sbiw	r24, 0x08	; 8

0000078a <.Loc.199>:
     78a:	05 97       	sbiw	r24, 0x05	; 5
     78c:	80 f0       	brcs	.+32     	; 0x7ae <.L51>

0000078e <.Loc.200>:
            setBreaklights(0);
            return;
    }

    //Check voor dichtbij
    if(distance < minDistance){
     78e:	27 30       	cpi	r18, 0x07	; 7
     790:	31 05       	cpc	r19, r1
     792:	b4 f0       	brlt	.+44     	; 0x7c0 <.L52>

00000794 <.Loc.202>:
        setBreaklights(1);
        return;
    }

    //check voor verweg
    if(distance > maxDistance){
     794:	2e 30       	cpi	r18, 0x0E	; 14
     796:	31 05       	cpc	r19, r1
     798:	e4 f4       	brge	.+56     	; 0x7d2 <.L53>

0000079a <.L45>:
        setBothStepperMode(ForwardStep);
        setBreaklights(0);
    }

}
     79a:	08 95       	ret

0000079c <.L50>:
        setBothStepperMode(Off);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0

000007a0 <.Loc.206>:
     7a0:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000007a4 <.LVL30>:
        setBreaklights(0);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

000007ac <.LVL31>:
        return;
     7ac:	08 95       	ret

000007ae <.L51>:
            setBothStepperMode(Off);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000007b6 <.LVL32>:
            setBreaklights(0);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

000007be <.LVL33>:
            return;
     7be:	08 95       	ret

000007c0 <.L52>:
        setBothStepperMode(BackwardStep);
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000007c8 <.LVL34>:
        setBreaklights(1);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

000007d0 <.LVL35>:
        return;
     7d0:	08 95       	ret

000007d2 <.L53>:
        setBothStepperMode(ForwardStep);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000007da <.LVL36>:
        setBreaklights(0);
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

000007e2 <.LVL37>:
     7e2:	db cf       	rjmp	.-74     	; 0x79a <.L45>

000007e4 <main>:
    initAGV(); //Init
     7e4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <initAGV>

000007e8 <.LVL39>:
    setHeadlights(1);
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setHeadlights>

000007f0 <.LVL40>:
    int mode = ModeOff; //Active mode van de AGV
     7f0:	c0 e0       	ldi	r28, 0x00	; 0
     7f2:	d0 e0       	ldi	r29, 0x00	; 0

000007f4 <.Loc.223>:
                if(!checkNoodstop()) {
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	10 e0       	ldi	r17, 0x00	; 0

000007f8 <.Loc.224>:
                        mode = BoomgaardRijden;
     7f8:	68 94       	set
     7fa:	cc 24       	eor	r12, r12
     7fc:	c1 f8       	bld	r12, 1
     7fe:	d1 2c       	mov	r13, r1
     800:	32 c0       	rjmp	.+100    	; 0x866 <.L55>

00000802 <.L58>:
        switch(mode){
     802:	c3 30       	cpi	r28, 0x03	; 3
     804:	d1 05       	cpc	r29, r1
     806:	09 f4       	brne	.+2      	; 0x80a <.Loc.227>

00000808 <L0^A>:
     808:	c6 c1       	rjmp	.+908    	; 0xb96 <.L62>

0000080a <.Loc.227>:
     80a:	c4 30       	cpi	r28, 0x04	; 4
     80c:	d1 05       	cpc	r29, r1
     80e:	59 f5       	brne	.+86     	; 0x866 <.L55>

00000810 <.L56>:
                setBothStepperMode(Off);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000818 <.LVL43>:
                LedNoodstopBack(1);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 0d 01 	call	0x21a	; 0x21a <LedNoodstopBack>

00000820 <.LVL44>:
                LedNoodstopFront(1);
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LedNoodstopFront>

00000828 <.LVL45>:
                TurnSignalLeft = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <TurnSignalLeft+0x1>
     830:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <TurnSignalLeft>

00000834 <.Loc.233>:
                TurnSignalRight = 1;
     834:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <TurnSignalRight+0x1>
     838:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TurnSignalRight>

0000083c <.Loc.235>:
                TreeSignalLeft = 1;
     83c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TreeSignalLeft+0x1>
     840:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <TreeSignalLeft>

00000844 <.Loc.237>:
                TreeSignalRight = 1;
     844:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <TreeSignalRight+0x1>
     848:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <TreeSignalRight>

0000084c <.Loc.239>:
                setBreaklights(1);
     84c:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

00000850 <.LVL46>:
                if(!checkNoodstop()) {
     850:	0e 94 95 02 	call	0x52a	; 0x52a <checkNoodstop>

00000854 <.LVL47>:
     854:	c1 e0       	ldi	r28, 0x01	; 1
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	89 2b       	or	r24, r25
     85a:	09 f4       	brne	.+2      	; 0x85e <.L65>
     85c:	e8 01       	movw	r28, r16

0000085e <.L65>:
     85e:	cc 0f       	add	r28, r28
     860:	dd 1f       	adc	r29, r29
     862:	cc 0f       	add	r28, r28
     864:	dd 1f       	adc	r29, r29

00000866 <.L55>:
        if(checkNoodstop()){
     866:	0e 94 95 02 	call	0x52a	; 0x52a <checkNoodstop>

0000086a <.LVL49>:
     86a:	89 2b       	or	r24, r25
     86c:	89 f6       	brne	.-94     	; 0x810 <.L56>

0000086e <.Loc.248>:
        switch(mode){
     86e:	c2 30       	cpi	r28, 0x02	; 2
     870:	d1 05       	cpc	r29, r1
     872:	09 f4       	brne	.+2      	; 0x876 <L0^A+0x2>

00000874 <L0^A>:
     874:	af c0       	rjmp	.+350    	; 0x9d4 <.L57>
     876:	2c f6       	brge	.-118    	; 0x802 <.L58>
     878:	20 97       	sbiw	r28, 0x00	; 0
     87a:	91 f1       	breq	.+100    	; 0x8e0 <.L59>
     87c:	c1 30       	cpi	r28, 0x01	; 1
     87e:	d1 05       	cpc	r29, r1
     880:	91 f7       	brne	.-28     	; 0x866 <.L55>

00000882 <.Loc.249>:
                FrontDistance = agv_ultrasoon_voor_midden;
     882:	a0 90 54 02 	lds	r10, 0x0254	; 0x800254 <agv_ultrasoon_voor_midden>
     886:	b0 90 55 02 	lds	r11, 0x0255	; 0x800255 <agv_ultrasoon_voor_midden+0x1>

0000088a <.Loc.251>:
                int IRState = checkFrontIRState();
     88a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <checkFrontIRState>

0000088e <.LVL51>:
     88e:	e8 2e       	mov	r14, r24
     890:	f9 2e       	mov	r15, r25

00000892 <.Loc.253>:
                switch(IRState){
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	e9 16       	cp	r14, r25
     896:	f1 04       	cpc	r15, r1
     898:	09 f4       	brne	.+2      	; 0x89c <L0^A+0x2>

0000089a <L0^A>:
     89a:	85 c0       	rjmp	.+266    	; 0x9a6 <.L66>
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <L0^A+0x2>

0000089e <L0^A>:
     89e:	61 c0       	rjmp	.+194    	; 0x962 <.L67>
     8a0:	e1 14       	cp	r14, r1
     8a2:	f1 04       	cpc	r15, r1
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <L0^A+0x2>

000008a6 <L0^A>:
     8a6:	70 c0       	rjmp	.+224    	; 0x988 <.L68>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	e8 16       	cp	r14, r24
     8ac:	f1 04       	cpc	r15, r1
     8ae:	d9 f6       	brne	.-74     	; 0x866 <.L55>

000008b0 <.Loc.254>:
                        TurnSignalLeft = 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <TurnSignalLeft+0x1>
     8b8:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <TurnSignalLeft>

000008bc <.Loc.256>:
                        TurnSignalRight = 0;
     8bc:	10 93 31 02 	sts	0x0231, r17	; 0x800231 <TurnSignalRight+0x1>
     8c0:	00 93 30 02 	sts	0x0230, r16	; 0x800230 <TurnSignalRight>

000008c4 <.Loc.258>:
                        setStepperMode(rightMotor, BackwardStep);
     8c4:	6c 2d       	mov	r22, r12
     8c6:	7d 2d       	mov	r23, r13
     8c8:	8b e0       	ldi	r24, 0x0B	; 11
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

000008d0 <.LVL53>:
                        setStepperMode(leftMotor, Off);
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	8a e0       	ldi	r24, 0x0A	; 10
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

000008dc <.LVL54>:
                        break;
     8dc:	e7 01       	movw	r28, r14

000008de <.Loc.261>:
     8de:	c3 cf       	rjmp	.-122    	; 0x866 <.L55>

000008e0 <.L59>:
                setBothStepperMode(Off);
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

000008e8 <.LVL57>:
                LedNoodstopBack(0);
     8e8:	c8 01       	movw	r24, r16
     8ea:	0e 94 0d 01 	call	0x21a	; 0x21a <LedNoodstopBack>

000008ee <.LVL58>:
                LedNoodstopFront(0);
     8ee:	c8 01       	movw	r24, r16
     8f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LedNoodstopFront>

000008f4 <.LVL59>:
                TurnSignalLeft = 0;
     8f4:	10 93 33 02 	sts	0x0233, r17	; 0x800233 <TurnSignalLeft+0x1>
     8f8:	00 93 32 02 	sts	0x0232, r16	; 0x800232 <TurnSignalLeft>

000008fc <.Loc.267>:
                TurnSignalRight = 0;
     8fc:	10 93 31 02 	sts	0x0231, r17	; 0x800231 <TurnSignalRight+0x1>
     900:	00 93 30 02 	sts	0x0230, r16	; 0x800230 <TurnSignalRight>

00000904 <.Loc.269>:
                TreeSignalLeft = 0;
     904:	10 93 2f 02 	sts	0x022F, r17	; 0x80022f <TreeSignalLeft+0x1>
     908:	00 93 2e 02 	sts	0x022E, r16	; 0x80022e <TreeSignalLeft>

0000090c <.Loc.271>:
                TreeSignalRight = 0;
     90c:	10 93 2d 02 	sts	0x022D, r17	; 0x80022d <TreeSignalRight+0x1>
     910:	00 93 2c 02 	sts	0x022C, r16	; 0x80022c <TreeSignalRight>

00000914 <.Loc.273>:
                setBreaklights(0);
     914:	c8 01       	movw	r24, r16
     916:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

0000091a <.LVL60>:
                if(isStartButtonPressed()){
     91a:	0e 94 9e 02 	call	0x53c	; 0x53c <isStartButtonPressed>

0000091e <.LVL61>:
     91e:	28 2f       	mov	r18, r24
     920:	39 2f       	mov	r19, r25

00000922 <.Loc.276>:
     922:	21 15       	cp	r18, r1
     924:	31 05       	cpc	r19, r1
     926:	11 f4       	brne	.+4      	; 0x92c <.L89>

00000928 <.LBB41>:
     928:	e9 01       	movw	r28, r18
     92a:	9d cf       	rjmp	.-198    	; 0x866 <.L55>

0000092c <.L89>:
                    int switchState = checkModeSwitchState();
     92c:	0e 94 a4 02 	call	0x548	; 0x548 <checkModeSwitchState>

00000930 <.LVL62>:
     930:	28 2f       	mov	r18, r24
     932:	39 2f       	mov	r19, r25

00000934 <.Loc.279>:
                    switch(switchState){
     934:	21 30       	cpi	r18, 0x01	; 1
     936:	31 05       	cpc	r19, r1
     938:	61 f0       	breq	.+24     	; 0x952 <.L63>
     93a:	22 30       	cpi	r18, 0x02	; 2
     93c:	31 05       	cpc	r19, r1
     93e:	09 f0       	breq	.+2      	; 0x942 <.LBI42>

00000940 <L0^A>:
     940:	92 cf       	rjmp	.-220    	; 0x866 <.L55>

00000942 <.LBI42>:
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	9c e9       	ldi	r25, 0x9C	; 156

00000946 <.L1^B5>:
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <.L1^B5>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <L0^A>

0000094c <L0^A>:
	...

0000094e <.Loc.289>:
                        mode = BoomgaardRijden;
     94e:	e9 01       	movw	r28, r18

00000950 <.Loc.290>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     950:	8a cf       	rjmp	.-236    	; 0x866 <.L55>

00000952 <.L63>:
	__builtin_avr_delay_cycles(__ticks_dc);
     952:	8f e3       	ldi	r24, 0x3F	; 63
     954:	9c e9       	ldi	r25, 0x9C	; 156

00000956 <.L1^B6>:
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <.L1^B6>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <L0^A>

0000095c <L0^A>:
	...

0000095e <.Loc.301>:
                        mode = Following;
     95e:	e9 01       	movw	r28, r18

00000960 <.Loc.302>:
}
     960:	82 cf       	rjmp	.-252    	; 0x866 <.L55>

00000962 <.L67>:
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	e9 16       	cp	r14, r25
     966:	f1 04       	cpc	r15, r1
     968:	09 f0       	breq	.+2      	; 0x96c <.Loc.304>

0000096a <L0^A>:
     96a:	7d cf       	rjmp	.-262    	; 0x866 <.L55>

0000096c <.Loc.304>:
                        followHand(filterDistance(FrontDistance));
     96c:	c5 01       	movw	r24, r10
     96e:	0e 94 04 03 	call	0x608	; 0x608 <filterDistance>

00000972 <.LVL67>:
     972:	0e 94 be 03 	call	0x77c	; 0x77c <followHand>

00000976 <.LVL68>:
                        TurnSignalLeft = 0;
     976:	10 93 33 02 	sts	0x0233, r17	; 0x800233 <TurnSignalLeft+0x1>
     97a:	00 93 32 02 	sts	0x0232, r16	; 0x800232 <TurnSignalLeft>

0000097e <.Loc.307>:
                        TurnSignalRight = 0;
     97e:	10 93 31 02 	sts	0x0231, r17	; 0x800231 <TurnSignalRight+0x1>
     982:	00 93 30 02 	sts	0x0230, r16	; 0x800230 <TurnSignalRight>

00000986 <.Loc.309>:
                        break;
     986:	6f cf       	rjmp	.-290    	; 0x866 <.L55>

00000988 <.L68>:
                        setBothStepperMode(Off);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000990 <.LVL69>:
                        TurnSignalLeft = 1;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <TurnSignalLeft+0x1>
     998:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <TurnSignalLeft>

0000099c <.Loc.313>:
                        TurnSignalRight = 1;
     99c:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <TurnSignalRight+0x1>
     9a0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TurnSignalRight>

000009a4 <.Loc.315>:
                        break;
     9a4:	60 cf       	rjmp	.-320    	; 0x866 <.L55>

000009a6 <.L66>:
                        TurnSignalRight = 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <TurnSignalRight+0x1>
     9ae:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TurnSignalRight>

000009b2 <.Loc.318>:
                        TurnSignalLeft = 0;
     9b2:	10 93 33 02 	sts	0x0233, r17	; 0x800233 <TurnSignalLeft+0x1>
     9b6:	00 93 32 02 	sts	0x0232, r16	; 0x800232 <TurnSignalLeft>

000009ba <.Loc.320>:
                        setStepperMode(leftMotor, BackwardStep);
     9ba:	6c 2d       	mov	r22, r12
     9bc:	7d 2d       	mov	r23, r13
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

000009c6 <.LVL70>:
                        setStepperMode(rightMotor, Off);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

000009d2 <.LVL71>:
                        break;
     9d2:	49 cf       	rjmp	.-366    	; 0x866 <.L55>

000009d4 <.L57>:
                int WorldState = checkSensors();
     9d4:	0e 94 16 03 	call	0x62c	; 0x62c <checkSensors>

000009d8 <.LVL73>:
     9d8:	e8 2e       	mov	r14, r24
     9da:	f9 2e       	mov	r15, r25

000009dc <.Loc.325>:
                if(nietInEenPad() && !alBochtGemaakt){
     9dc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nietInEenPad>

000009e0 <.LVL75>:
     9e0:	89 2b       	or	r24, r25
     9e2:	31 f0       	breq	.+12     	; 0x9f0 <.L71>

000009e4 <.Loc.329>:
     9e4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <alBochtGemaakt.6>
     9e8:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <alBochtGemaakt.6+0x1>
     9ec:	89 2b       	or	r24, r25
     9ee:	71 f1       	breq	.+92     	; 0xa4c <.L90>

000009f0 <.L71>:
                } else if(nietInEenPad()){
     9f0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nietInEenPad>

000009f4 <.LVL76>:
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f0       	breq	.+2      	; 0x9fa <.L72>

000009f8 <L0^A>:
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <.L91>

000009fa <.L72>:
                switch(WorldState){
     9fa:	22 e0       	ldi	r18, 0x02	; 2
     9fc:	e2 16       	cp	r14, r18
     9fe:	f1 04       	cpc	r15, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <L0^A+0x2>

00000a02 <L0^A>:
     a02:	83 c0       	rjmp	.+262    	; 0xb0a <.L74>
     a04:	0c f0       	brlt	.+2      	; 0xa08 <L0^A+0x2>

00000a06 <L0^A>:
     a06:	51 c0       	rjmp	.+162    	; 0xaaa <.L75>
     a08:	e1 14       	cp	r14, r1
     a0a:	f1 04       	cpc	r15, r1
     a0c:	09 f4       	brne	.+2      	; 0xa10 <L0^A+0x2>

00000a0e <L0^A>:
     a0e:	74 c0       	rjmp	.+232    	; 0xaf8 <.L76>
     a10:	ea 94       	dec	r14
     a12:	ef 28       	or	r14, r15
     a14:	09 f0       	breq	.+2      	; 0xa18 <.Loc.335>

00000a16 <L0^A>:
     a16:	27 cf       	rjmp	.-434    	; 0x866 <.L55>

00000a18 <.Loc.335>:
                        setBothStepperMode(Off);
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000a20 <.LVL78>:
                        TreeSignalLeft = 1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TreeSignalLeft+0x1>
     a28:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <TreeSignalLeft>

00000a2c <.Loc.338>:
                        setBreaklights(1);
     a2c:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

00000a30 <.LBB56>:
	__builtin_avr_delay_cycles(__ticks_dc);
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	97 e9       	ldi	r25, 0x97	; 151
     a34:	2a e3       	ldi	r18, 0x3A	; 58

00000a36 <.L1^B7>:
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	20 40       	sbci	r18, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <.L1^B7>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <L0^A>

00000a40 <L0^A>:
	...

00000a42 <.LBE56>:
                        TreeSignalLeft = 0;
     a42:	10 93 2f 02 	sts	0x022F, r17	; 0x80022f <TreeSignalLeft+0x1>
     a46:	00 93 2e 02 	sts	0x022E, r16	; 0x80022e <TreeSignalLeft>

00000a4a <.Loc.350>:
                        break;
     a4a:	0d cf       	rjmp	.-486    	; 0x866 <.L55>

00000a4c <.L90>:
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	80 e7       	ldi	r24, 0x70	; 112
     a50:	92 e0       	ldi	r25, 0x02	; 2

00000a52 <.L1^B8>:
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	80 40       	sbci	r24, 0x00	; 0
     a56:	90 40       	sbci	r25, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <.L1^B8>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <L0^A>

00000a5c <L0^A>:
	...

00000a5e <.LBE51>:
                    if(nietInEenPad() && !alBochtGemaakt){
     a5e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nietInEenPad>

00000a62 <.LVL83>:
     a62:	89 2b       	or	r24, r25
     a64:	51 f2       	breq	.-108    	; 0x9fa <.L72>

00000a66 <.Loc.364>:
     a66:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <alBochtGemaakt.6>
     a6a:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <alBochtGemaakt.6+0x1>
     a6e:	89 2b       	or	r24, r25
     a70:	21 f6       	brne	.-120    	; 0x9fa <.L72>

00000a72 <.Loc.365>:
                        alBochtGemaakt = 1;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <alBochtGemaakt.6+0x1>
     a7a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <alBochtGemaakt.6>

00000a7e <.Loc.367>:
                        mode = BoomgaardBocht;
     a7e:	c3 e0       	ldi	r28, 0x03	; 3
     a80:	d0 e0       	ldi	r29, 0x00	; 0
     a82:	bb cf       	rjmp	.-138    	; 0x9fa <.L72>

00000a84 <.L91>:
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	80 e7       	ldi	r24, 0x70	; 112
     a88:	92 e0       	ldi	r25, 0x02	; 2

00000a8a <.L1^B9>:
     a8a:	21 50       	subi	r18, 0x01	; 1
     a8c:	80 40       	sbci	r24, 0x00	; 0
     a8e:	90 40       	sbci	r25, 0x00	; 0
     a90:	e1 f7       	brne	.-8      	; 0xa8a <.L1^B9>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <L0^A>

00000a94 <L0^A>:
	...

00000a96 <.LBE53>:
                    if(nietInEenPad()){
     a96:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nietInEenPad>

00000a9a <.LVL87>:
     a9a:	c1 e0       	ldi	r28, 0x01	; 1
     a9c:	d0 e0       	ldi	r29, 0x00	; 0

00000a9e <.Loc.381>:
     a9e:	89 2b       	or	r24, r25
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <.L73>
     aa2:	e8 01       	movw	r28, r16

00000aa4 <.L73>:
     aa4:	cc 0f       	add	r28, r28
     aa6:	dd 1f       	adc	r29, r29
     aa8:	a8 cf       	rjmp	.-176    	; 0x9fa <.L72>

00000aaa <.L75>:
     aaa:	23 e0       	ldi	r18, 0x03	; 3
     aac:	e2 16       	cp	r14, r18
     aae:	f1 04       	cpc	r15, r1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <.Loc.383>

00000ab2 <L0^A>:
     ab2:	d9 ce       	rjmp	.-590    	; 0x866 <.L55>

00000ab4 <.Loc.383>:
                        int correction = needCorrection();
     ab4:	0e 94 88 02 	call	0x510	; 0x510 <needCorrection>

00000ab8 <.LVL90>:
     ab8:	e8 2e       	mov	r14, r24

00000aba <.Loc.385>:
     aba:	f9 2e       	mov	r15, r25

00000abc <.Loc.386>:
                        setBreaklights(0);
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

00000ac2 <.LVL93>:
                        switch(correction){
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	09 f4       	brne	.+2      	; 0xacc <L0^A+0x2>

00000aca <L0^A>:
     aca:	58 c0       	rjmp	.+176    	; 0xb7c <.L79>
     acc:	c4 f5       	brge	.+112    	; 0xb3e <.L80>
     ace:	e1 14       	cp	r14, r1
     ad0:	f1 04       	cpc	r15, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <L0^A+0x2>

00000ad4 <L0^A>:
     ad4:	4e c0       	rjmp	.+156    	; 0xb72 <.L81>
     ad6:	ea 94       	dec	r14
     ad8:	ef 28       	or	r14, r15
     ada:	09 f0       	breq	.+2      	; 0xade <.Loc.388>

00000adc <L0^A>:
     adc:	c4 ce       	rjmp	.-632    	; 0x866 <.L55>

00000ade <.Loc.388>:
                                setStepperMode(rightMotor, Off);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	8b e0       	ldi	r24, 0x0B	; 11
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000aea <.LVL94>:
                                setStepperMode(leftMotor, ForwardStep);
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	8a e0       	ldi	r24, 0x0A	; 10
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000af6 <.LVL95>:
                                break;
     af6:	b7 ce       	rjmp	.-658    	; 0x866 <.L55>

00000af8 <.L76>:
                        setBothStepperMode(Off);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000b00 <.LVL97>:
                        setBreaklights(1);
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

00000b08 <.LVL98>:
                        break;
     b08:	ae ce       	rjmp	.-676    	; 0x866 <.L55>

00000b0a <.L74>:
                        setBothStepperMode(Off);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000b12 <.LVL99>:
                        TreeSignalRight = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <TreeSignalRight+0x1>
     b1a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <TreeSignalRight>

00000b1e <.Loc.397>:
                        setBreaklights(1);
     b1e:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

00000b22 <.LBB58>:
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	97 e9       	ldi	r25, 0x97	; 151
     b26:	2a e3       	ldi	r18, 0x3A	; 58

00000b28 <.L1^B10>:
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	90 40       	sbci	r25, 0x00	; 0
     b2c:	20 40       	sbci	r18, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <.L1^B10>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <L0^A>

00000b32 <L0^A>:
	...

00000b34 <.LBE58>:
                        TreeSignalRight = 0;
     b34:	10 93 2d 02 	sts	0x022D, r17	; 0x80022d <TreeSignalRight+0x1>
     b38:	00 93 2c 02 	sts	0x022C, r16	; 0x80022c <TreeSignalRight>

00000b3c <.Loc.409>:
                        break;
     b3c:	94 ce       	rjmp	.-728    	; 0x866 <.L55>

00000b3e <.L80>:
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	e8 16       	cp	r14, r24
     b42:	f1 04       	cpc	r15, r1
     b44:	09 f0       	breq	.+2      	; 0xb48 <.Loc.411>

00000b46 <L0^A>:
     b46:	8f ce       	rjmp	.-738    	; 0x866 <.L55>

00000b48 <.Loc.411>:
                                TreeSignalLeft = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TreeSignalLeft+0x1>
     b50:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <TreeSignalLeft>

00000b54 <.Loc.413>:
                                TreeSignalRight = 1;
     b54:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <TreeSignalRight+0x1>
     b58:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <TreeSignalRight>

00000b5c <.Loc.415>:
                                TurnSignalLeft = 1;
     b5c:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <TurnSignalLeft+0x1>
     b60:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <TurnSignalLeft>

00000b64 <.Loc.417>:
                                TurnSignalRight = 1;
     b64:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <TurnSignalRight+0x1>
     b68:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TurnSignalRight>

00000b6c <.Loc.419>:
                                setBothStepperMode(Off);
     b6c:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000b70 <.LVL103>:
                                break;
     b70:	7a ce       	rjmp	.-780    	; 0x866 <.L55>

00000b72 <.L81>:
                                setBothStepperMode(ForwardStep);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000b7a <.LVL104>:
                                break;
     b7a:	75 ce       	rjmp	.-790    	; 0x866 <.L55>

00000b7c <.L79>:
                                setStepperMode(leftMotor, Off);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	8a e0       	ldi	r24, 0x0A	; 10
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000b88 <.LVL105>:
                                setStepperMode(rightMotor, ForwardStep);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	8b e0       	ldi	r24, 0x0B	; 11
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000b94 <.LVL106>:
                                break;
     b94:	68 ce       	rjmp	.-816    	; 0x866 <.L55>

00000b96 <.L62>:
                if(startTurn(direction) && (bochtGemaakt == 0)){
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 c6 01 	call	0x38c	; 0x38c <startTurn>

00000b9c <.LVL108>:
     b9c:	89 2b       	or	r24, r25
     b9e:	b9 f0       	breq	.+46     	; 0xbce <.L84>

00000ba0 <.Loc.432>:
     ba0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <bochtGemaakt.4>
     ba4:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <bochtGemaakt.4+0x1>
     ba8:	89 2b       	or	r24, r25
     baa:	31 f4       	brne	.+12     	; 0xbb8 <.L87>

00000bac <.Loc.433>:
                    bochtGemaakt = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <bochtGemaakt.4+0x1>
     bb4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <bochtGemaakt.4>

00000bb8 <.L87>:
                    if(bit_is_clear(IRPIN, IRSensorLeft) || bit_is_clear(IRPIN, IRSensorRight)){
     bb8:	02 9b       	sbis	0x00, 2	; 0
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <.L86>

00000bbc <.Loc.437>:
     bbc:	03 99       	sbic	0x00, 3	; 0
     bbe:	53 ce       	rjmp	.-858    	; 0x866 <.L55>

00000bc0 <.L86>:
                        bochtGemaakt = 0;
     bc0:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <bochtGemaakt.4+0x1>
     bc4:	00 93 48 02 	sts	0x0248, r16	; 0x800248 <bochtGemaakt.4>

00000bc8 <.Loc.440>:
                        mode = BoomgaardRijden;
     bc8:	cc 2d       	mov	r28, r12
     bca:	dd 2d       	mov	r29, r13
     bcc:	4c ce       	rjmp	.-872    	; 0x866 <.L55>

00000bce <.L84>:
                if(bochtGemaakt){
     bce:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <bochtGemaakt.4>
     bd2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <bochtGemaakt.4+0x1>
     bd6:	89 2b       	or	r24, r25
     bd8:	09 f4       	brne	.+2      	; 0xbdc <L0^A+0x2>

00000bda <L0^A>:
     bda:	45 ce       	rjmp	.-886    	; 0x866 <.L55>
     bdc:	ed cf       	rjmp	.-38     	; 0xbb8 <.L87>

00000bde <setStepperMode>:
void setBothStepperMode(int mode){
    setStepperMode(leftMotor, mode);
    setStepperMode(rightMotor, mode);
}

void setStepperMode(int motor, int mode){
     bde:	28 2f       	mov	r18, r24
     be0:	39 2f       	mov	r19, r25
     be2:	86 2f       	mov	r24, r22

00000be4 <.Loc.2>:
     be4:	97 2f       	mov	r25, r23

00000be6 <.Loc.3>:

    int state;
    if(mode == Off){
     be6:	51 e0       	ldi	r21, 0x01	; 1
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	69 f0       	breq	.+26     	; 0xc0a <.L8>

00000bf0 <.L2>:
        state = 1;
    }


    int** motorLoop;
    switch(motor){
     bf0:	2a 30       	cpi	r18, 0x0A	; 10
     bf2:	31 05       	cpc	r19, r1
     bf4:	61 f0       	breq	.+24     	; 0xc0e <.L3>
     bf6:	2b 30       	cpi	r18, 0x0B	; 11
     bf8:	31 05       	cpc	r19, r1
     bfa:	81 f0       	breq	.+32     	; 0xc1c <.L4>

00000bfc <.L5>:
            motorLoop = &rightMotorLoop;
            rightMotorEnabled = state;
            break;
    }

    switch(mode){
     bfc:	02 97       	sbiw	r24, 0x02	; 2
     bfe:	a9 f0       	breq	.+42     	; 0xc2a <.L9>
     c00:	88 e1       	ldi	r24, 0x18	; 24
     c02:	92 e0       	ldi	r25, 0x02	; 2

00000c04 <.L6>:
        default:
        case ForwardStep:
            *motorLoop = &LoopForward;
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24

00000c08 <.Loc.10>:
            break;
        case BackwardStep:
            *motorLoop = &LoopBackwards;
            break;
    }
}
     c08:	08 95       	ret

00000c0a <.L8>:
    if(mode == Off){
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	f1 cf       	rjmp	.-30     	; 0xbf0 <.L2>

00000c0e <.L3>:
            leftMotorEnabled = state;
     c0e:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <leftMotorEnabled>
     c12:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <leftMotorEnabled+0x1>

00000c16 <.Loc.15>:
            motorLoop = &leftMotorLoop;
     c16:	e6 e0       	ldi	r30, 0x06	; 6
     c18:	f2 e0       	ldi	r31, 0x02	; 2

00000c1a <.Loc.17>:
            break;
     c1a:	f0 cf       	rjmp	.-32     	; 0xbfc <.L5>

00000c1c <.L4>:
            rightMotorEnabled = state;
     c1c:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <rightMotorEnabled>
     c20:	40 93 01 02 	sts	0x0201, r20	; 0x800201 <rightMotorEnabled+0x1>

00000c24 <.Loc.21>:
            motorLoop = &rightMotorLoop;
     c24:	e4 e0       	ldi	r30, 0x04	; 4
     c26:	f2 e0       	ldi	r31, 0x02	; 2

00000c28 <.Loc.23>:
            break;
     c28:	e9 cf       	rjmp	.-46     	; 0xbfc <.L5>

00000c2a <.L9>:
    switch(mode){
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	ea cf       	rjmp	.-44     	; 0xc04 <.L6>

00000c30 <setBothStepperMode>:
void setBothStepperMode(int mode){
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	d8 2f       	mov	r29, r24
     c36:	c9 2f       	mov	r28, r25

00000c38 <.Loc.27>:
    setStepperMode(leftMotor, mode);
     c38:	68 2f       	mov	r22, r24
     c3a:	79 2f       	mov	r23, r25
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	90 e0       	ldi	r25, 0x00	; 0

00000c40 <.Loc.28>:
     c40:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000c44 <.LVL10>:
    setStepperMode(rightMotor, mode);
     c44:	6d 2f       	mov	r22, r29
     c46:	7c 2f       	mov	r23, r28
     c48:	8b e0       	ldi	r24, 0x0B	; 11
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 ef 05 	call	0xbde	; 0xbde <setStepperMode>

00000c50 <.LVL11>:
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <init_timer>:

//Clockspeed = 16.000.000 / 250 / 64 = 1.000
#define Clockspeed 1000
void init_timer(){
    // Use mode 0, clkdiv = 64
    TCCR0A = 0;
     c56:	14 bc       	out	0x24, r1	; 36

00000c58 <.Loc.34>:
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	85 bd       	out	0x25, r24	; 37

00000c5c <.Loc.36>:

    // Disable PWM output
    OCR0A = 0;
     c5c:	17 bc       	out	0x27, r1	; 39

00000c5e <.Loc.38>:
    OCR0B = 0;
     c5e:	18 bc       	out	0x28, r1	; 40

00000c60 <.Loc.40>:

    //Overflow interrupt
    TIMSK0 = (1<<TOIE0);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

00000c66 <.Loc.42>:
    TCNT0 = 6;
     c66:	86 e0       	ldi	r24, 0x06	; 6
     c68:	86 bd       	out	0x26, r24	; 38

00000c6a <.Loc.44>:

    sei();
     c6a:	78 94       	sei

00000c6c <.Loc.45>:
}
     c6c:	08 95       	ret

00000c6e <initMotorpins>:
}


void initMotorpins(){
    for(int i = MotorLeftStartpin; i < MotorLeftStartpin+4; i++){
        MotorLeftDDR |= (1<<i);
     c6e:	80 9a       	sbi	0x10, 0	; 16

00000c70 <.Loc.52>:
     c70:	81 9a       	sbi	0x10, 1	; 16

00000c72 <.Loc.56>:
     c72:	82 9a       	sbi	0x10, 2	; 16

00000c74 <.Loc.60>:
     c74:	83 9a       	sbi	0x10, 3	; 16

00000c76 <.LBB3>:
    }

    for(int i = MotorRightStartpin; i < MotorRightStartpin+4; i++){
        MotorRightDDR |= (1<<i);
     c76:	84 9a       	sbi	0x10, 4	; 16

00000c78 <.Loc.69>:
     c78:	85 9a       	sbi	0x10, 5	; 16

00000c7a <.Loc.73>:
     c7a:	86 9a       	sbi	0x10, 6	; 16

00000c7c <.Loc.77>:
     c7c:	87 9a       	sbi	0x10, 7	; 16

00000c7e <.LBE3>:
    }
}
     c7e:	08 95       	ret

00000c80 <initSteppermotorAVRDriver>:
    initMotorpins();
     c80:	0e 94 37 06 	call	0xc6e	; 0xc6e <initMotorpins>

00000c84 <.LVL21>:
    init_timer();
     c84:	0e 94 2b 06 	call	0xc56	; 0xc56 <init_timer>

00000c88 <.LVL22>:
    setBothStepperMode(Off);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 18 06 	call	0xc30	; 0xc30 <setBothStepperMode>

00000c90 <.LVL23>:
}
     c90:	08 95       	ret

00000c92 <LeftStepperNextStep>:

void LeftStepperNextStep(){
    static int position = 0;
    MotorLeftPort &= ~(0b1111<< MotorLeftStartpin);
     c92:	81 b3       	in	r24, 0x11	; 17
     c94:	80 7f       	andi	r24, 0xF0	; 240
     c96:	81 bb       	out	0x11, r24	; 17

00000c98 <.Loc.93>:
    MotorLeftPort |= ((*leftMotorLoop)[position] << MotorLeftStartpin);
     c98:	81 b3       	in	r24, 0x11	; 17

00000c9a <.Loc.94>:
     c9a:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <leftMotorLoop>
     c9e:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <leftMotorLoop+0x1>
     ca2:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <position.1>
     ca6:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <position.1+0x1>
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	e2 0f       	add	r30, r18
     cb0:	f3 1f       	adc	r31, r19

00000cb2 <.Loc.95>:
     cb2:	90 81       	ld	r25, Z
     cb4:	89 2b       	or	r24, r25
     cb6:	81 bb       	out	0x11, r24	; 17

00000cb8 <.Loc.96>:
    position++;
     cb8:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <position.1>
     cbc:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <position.1+0x1>
     cc0:	9c 01       	movw	r18, r24
     cc2:	2f 5f       	subi	r18, 0xFF	; 255
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255

00000cc6 <.Loc.98>:
    if(position == LoopLength) position = 0;
     cc6:	07 97       	sbiw	r24, 0x07	; 7
     cc8:	29 f0       	breq	.+10     	; 0xcd4 <.L17>

00000cca <.L15>:
    position++;
     cca:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <position.1+0x1>
     cce:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <position.1>

00000cd2 <.Loc.101>:
}
     cd2:	08 95       	ret

00000cd4 <.L17>:
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	f8 cf       	rjmp	.-16     	; 0xcca <.L15>

00000cda <RightStepperNextStep>:

void RightStepperNextStep(){
    static int position = 0;
    MotorRightPort &= ~(0b1111<<MotorRightStartpin);
     cda:	81 b3       	in	r24, 0x11	; 17
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	81 bb       	out	0x11, r24	; 17

00000ce0 <.Loc.106>:
    MotorRightPort |= ((*rightMotorLoop)[position] << MotorRightStartpin);
     ce0:	81 b3       	in	r24, 0x11	; 17

00000ce2 <.Loc.107>:
     ce2:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <rightMotorLoop>
     ce6:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <rightMotorLoop+0x1>
     cea:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <position.0>
     cee:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <position.0+0x1>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	e2 0f       	add	r30, r18
     cf8:	f3 1f       	adc	r31, r19

00000cfa <.Loc.108>:
     cfa:	20 81       	ld	r18, Z
     cfc:	31 81       	ldd	r19, Z+1	; 0x01
     cfe:	22 95       	swap	r18
     d00:	32 95       	swap	r19
     d02:	30 7f       	andi	r19, 0xF0	; 240
     d04:	32 27       	eor	r19, r18
     d06:	20 7f       	andi	r18, 0xF0	; 240
     d08:	32 27       	eor	r19, r18

00000d0a <.Loc.109>:
     d0a:	82 2b       	or	r24, r18
     d0c:	81 bb       	out	0x11, r24	; 17

00000d0e <.Loc.110>:
    position++;
     d0e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <position.0>
     d12:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <position.0+0x1>
     d16:	9c 01       	movw	r18, r24
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255

00000d1c <.Loc.112>:
    if(position == LoopLength) position = 0;
     d1c:	07 97       	sbiw	r24, 0x07	; 7
     d1e:	29 f0       	breq	.+10     	; 0xd2a <.L21>

00000d20 <.L19>:
    position++;
     d20:	30 93 51 02 	sts	0x0251, r19	; 0x800251 <position.0+0x1>
     d24:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <position.0>

00000d28 <.Loc.115>:
}
     d28:	08 95       	ret

00000d2a <.L21>:
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	f8 cf       	rjmp	.-16     	; 0xd20 <.L19>

00000d30 <__vector_23>:


ISR(TIMER0_OVF_vect){
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	0b b6       	in	r0, 0x3b	; 59
     d3c:	0f 92       	push	r0
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31

00000d56 <.Loc.117>:
    if(leftMotorEnabled) LeftStepperNextStep();
     d56:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <leftMotorEnabled>
     d5a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <leftMotorEnabled+0x1>
     d5e:	89 2b       	or	r24, r25
     d60:	d9 f4       	brne	.+54     	; 0xd98 <.L25>

00000d62 <.L23>:
    if(rightMotorEnabled) RightStepperNextStep();
     d62:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <rightMotorEnabled>
     d66:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <rightMotorEnabled+0x1>
     d6a:	89 2b       	or	r24, r25
     d6c:	c1 f4       	brne	.+48     	; 0xd9e <.L26>

00000d6e <.L24>:

    TCNT0 = 6;
     d6e:	86 e0       	ldi	r24, 0x06	; 6
     d70:	86 bd       	out	0x26, r24	; 38

00000d72 <.Loc.123>:
}
     d72:	ff 91       	pop	r31
     d74:	ef 91       	pop	r30
     d76:	bf 91       	pop	r27
     d78:	af 91       	pop	r26
     d7a:	9f 91       	pop	r25
     d7c:	8f 91       	pop	r24
     d7e:	7f 91       	pop	r23
     d80:	6f 91       	pop	r22
     d82:	5f 91       	pop	r21
     d84:	4f 91       	pop	r20
     d86:	3f 91       	pop	r19
     d88:	2f 91       	pop	r18
     d8a:	0f 90       	pop	r0
     d8c:	0b be       	out	0x3b, r0	; 59
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <.L25>:
    if(leftMotorEnabled) LeftStepperNextStep();
     d98:	0e 94 49 06 	call	0xc92	; 0xc92 <LeftStepperNextStep>

00000d9c <.LVL24>:
     d9c:	e2 cf       	rjmp	.-60     	; 0xd62 <.L23>

00000d9e <.L26>:
    if(rightMotorEnabled) RightStepperNextStep();
     d9e:	0e 94 6d 06 	call	0xcda	; 0xcda <RightStepperNextStep>

00000da2 <.LVL25>:
     da2:	e5 cf       	rjmp	.-54     	; 0xd6e <.L24>

00000da4 <agv_ultrasoon_init>:
volatile uint16_t agv_ultrasoon_voor_midden = 0; //pin A12
volatile uint8_t agv_ultrasoon_current_sensor = 2;

void agv_ultrasoon_init()
{
    cli();
     da4:	f8 94       	cli

00000da6 <.Loc.2>:
    TCCR3A |= (1<<COM3A1) | (1<<WGM31);
     da6:	e0 e9       	ldi	r30, 0x90	; 144
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z

00000dac <.Loc.3>:
     dac:	82 68       	ori	r24, 0x82	; 130
     dae:	80 83       	st	Z, r24

00000db0 <.Loc.4>:
    TCCR3B |= (1<<WGM33) | (1<<CS31) | (1<<WGM32);//wgm33 wgm32 wgm31
     db0:	e1 e9       	ldi	r30, 0x91	; 145
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z

00000db6 <.Loc.5>:
     db6:	8a 61       	ori	r24, 0x1A	; 26
     db8:	80 83       	st	Z, r24

00000dba <.Loc.6>:
    ICR3 = 32768;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e8       	ldi	r25, 0x80	; 128
     dbe:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     dc2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000dc6 <.Loc.8>:
    OCR3A = 20;//10microsec
     dc6:	84 e1       	ldi	r24, 0x14	; 20
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     dce:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000dd2 <.Loc.10>:
    OCR3B = 5500;// (10microsec + 480microsec+ marge) *2
     dd2:	8c e7       	ldi	r24, 0x7C	; 124
     dd4:	95 e1       	ldi	r25, 0x15	; 21
     dd6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     dda:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>

00000dde <.Loc.12>:
    DDRE |= (1<<PE3);
     dde:	6b 9a       	sbi	0x0d, 3	; 13

00000de0 <.Loc.14>:
    TIMSK3 |= (1<<ICIE3) | (1<<OCIE3B);
     de0:	e1 e7       	ldi	r30, 0x71	; 113
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z

00000de6 <.Loc.15>:
     de6:	84 62       	ori	r24, 0x24	; 36
     de8:	80 83       	st	Z, r24

00000dea <.Loc.16>:
    //pin change interrupt:
    PCICR |= (1<<PCIE2);//enables pci 16 tot 23
     dea:	e8 e6       	ldi	r30, 0x68	; 104
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z

00000df0 <.Loc.17>:
     df0:	84 60       	ori	r24, 0x04	; 4
     df2:	80 83       	st	Z, r24

00000df4 <.Loc.18>:
    sei();
     df4:	78 94       	sei

00000df6 <.Loc.19>:
}
     df6:	08 95       	ret

00000df8 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     df8:	8f 93       	push	r24
     dfa:	8f b7       	in	r24, 0x3f	; 63
     dfc:	8f 93       	push	r24
     dfe:	8b b7       	in	r24, 0x3b	; 59
     e00:	8f 93       	push	r24
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31

00000e06 <.Loc.21>:
    agv_ultrasoon_current_sensor = (agv_ultrasoon_current_sensor<<1);
     e06:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>
     e0a:	88 0f       	add	r24, r24

00000e0c <.Loc.23>:
     e0c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>

00000e10 <.Loc.24>:
    if (agv_ultrasoon_current_sensor == (1<<5))//0b00100000
     e10:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000e14 <.Loc.26>:
     e14:	80 32       	cpi	r24, 0x20	; 32
     e16:	a9 f0       	breq	.+42     	; 0xe42 <.L5>

00000e18 <.L3>:
    {
        agv_ultrasoon_current_sensor = 2;

    }
    if(agv_ultrasoon_current_sensor == (1<<3)) agv_ultrasoon_current_sensor = (1<<4);
     e18:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000e1c <.Loc.29>:
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	a9 f0       	breq	.+42     	; 0xe4a <.L6>

00000e20 <.L4>:
    PCMSK2 = agv_ultrasoon_current_sensor;
     e20:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>
     e24:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000e28 <.Loc.32>:
    //PORTA = agv_ultrasoon_current_sensor;
    TIMSK3 |= (1<<OCIE3B);
     e28:	e1 e7       	ldi	r30, 0x71	; 113
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z

00000e2e <.Loc.33>:
     e2e:	84 60       	ori	r24, 0x04	; 4
     e30:	80 83       	st	Z, r24

00000e32 <.Loc.34>:
}
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	8f 91       	pop	r24
     e38:	8b bf       	out	0x3b, r24	; 59
     e3a:	8f 91       	pop	r24
     e3c:	8f bf       	out	0x3f, r24	; 63
     e3e:	8f 91       	pop	r24
     e40:	18 95       	reti

00000e42 <.L5>:
        agv_ultrasoon_current_sensor = 2;
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>
     e48:	e7 cf       	rjmp	.-50     	; 0xe18 <.L3>

00000e4a <.L6>:
    if(agv_ultrasoon_current_sensor == (1<<3)) agv_ultrasoon_current_sensor = (1<<4);
     e4a:	80 e1       	ldi	r24, 0x10	; 16
     e4c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>
     e50:	e7 cf       	rjmp	.-50     	; 0xe20 <.L4>

00000e52 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <L0^A>

00000e7e <L0^A>:
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62

00000e84 <.Loc.40>:
    //zet max naar sensorwaarde
    if(agv_ultrasoon_current_sensor == 0b00000010)
     e84:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000e88 <.Loc.42>:
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	f1 f1       	breq	.+124    	; 0xf08 <.L11>

00000e8c <.Loc.43>:
    {
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
     e8c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000e90 <.Loc.45>:
     e90:	84 30       	cpi	r24, 0x04	; 4
     e92:	09 f4       	brne	.+2      	; 0xe96 <.Loc.46>

00000e94 <L0^A>:
     e94:	87 c0       	rjmp	.+270    	; 0xfa4 <.L12>

00000e96 <.Loc.46>:
    {
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
     e96:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000e9a <.Loc.48>:
     e9a:	80 31       	cpi	r24, 0x10	; 16
     e9c:	09 f0       	breq	.+2      	; 0xea0 <.Loc.49>

00000e9e <L0^A>:
     e9e:	67 c0       	rjmp	.+206    	; 0xf6e <.L9>

00000ea0 <.Loc.49>:
    {
        agv_ultrasoon_voor_midden = (ICR3 - 4454)/4*0.0343;
     ea0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     ea4:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000ea8 <.Loc.51>:
     ea8:	86 56       	subi	r24, 0x66	; 102
     eaa:	91 41       	sbci	r25, 0x11	; 17

00000eac <.Loc.52>:
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	96 95       	lsr	r25
     eb2:	87 95       	ror	r24

00000eb4 <.Loc.53>:
     eb4:	9c 01       	movw	r18, r24
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	29 83       	std	Y+1, r18	; 0x01
     ebc:	3a 83       	std	Y+2, r19	; 0x02
     ebe:	4b 83       	std	Y+3, r20	; 0x03
     ec0:	5c 83       	std	Y+4, r21	; 0x04
     ec2:	ca 01       	movw	r24, r20
     ec4:	b9 01       	movw	r22, r18
     ec6:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>

00000eca <.LVL0>:
     eca:	28 e2       	ldi	r18, 0x28	; 40
     ecc:	3e e7       	ldi	r19, 0x7E	; 126
     ece:	4c e0       	ldi	r20, 0x0C	; 12
     ed0:	5d e3       	ldi	r21, 0x3D	; 61
     ed2:	69 83       	std	Y+1, r22	; 0x01
     ed4:	7a 83       	std	Y+2, r23	; 0x02
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	69 81       	ldd	r22, Y+1	; 0x01
     edc:	7a 81       	ldd	r23, Y+2	; 0x02
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	0e 94 81 09 	call	0x1302	; 0x1302 <__mulsf3>

00000ee6 <.LVL1>:
     ee6:	69 83       	std	Y+1, r22	; 0x01
     ee8:	7a 83       	std	Y+2, r23	; 0x02
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	7a 81       	ldd	r23, Y+2	; 0x02
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>

00000efa <.LVL2>:
     efa:	46 2f       	mov	r20, r22
     efc:	57 2f       	mov	r21, r23
     efe:	50 93 55 02 	sts	0x0255, r21	; 0x800255 <agv_ultrasoon_voor_midden+0x1>
     f02:	40 93 54 02 	sts	0x0254, r20	; 0x800254 <agv_ultrasoon_voor_midden>
     f06:	33 c0       	rjmp	.+102    	; 0xf6e <.L9>

00000f08 <.L11>:
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
     f08:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     f0c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000f10 <.Loc.57>:
     f10:	86 56       	subi	r24, 0x66	; 102
     f12:	91 41       	sbci	r25, 0x11	; 17

00000f14 <.Loc.58>:
     f14:	96 95       	lsr	r25
     f16:	87 95       	ror	r24
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24

00000f1c <.Loc.59>:
     f1c:	9c 01       	movw	r18, r24
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	29 83       	std	Y+1, r18	; 0x01
     f24:	3a 83       	std	Y+2, r19	; 0x02
     f26:	4b 83       	std	Y+3, r20	; 0x03
     f28:	5c 83       	std	Y+4, r21	; 0x04
     f2a:	ca 01       	movw	r24, r20
     f2c:	b9 01       	movw	r22, r18
     f2e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>

00000f32 <.LVL3>:
     f32:	28 e2       	ldi	r18, 0x28	; 40
     f34:	3e e7       	ldi	r19, 0x7E	; 126
     f36:	4c e0       	ldi	r20, 0x0C	; 12
     f38:	5d e3       	ldi	r21, 0x3D	; 61
     f3a:	69 83       	std	Y+1, r22	; 0x01
     f3c:	7a 83       	std	Y+2, r23	; 0x02
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	69 81       	ldd	r22, Y+1	; 0x01
     f44:	7a 81       	ldd	r23, Y+2	; 0x02
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	0e 94 81 09 	call	0x1302	; 0x1302 <__mulsf3>

00000f4e <.LVL4>:
     f4e:	69 83       	std	Y+1, r22	; 0x01
     f50:	7a 83       	std	Y+2, r23	; 0x02
     f52:	8b 83       	std	Y+3, r24	; 0x03
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	69 81       	ldd	r22, Y+1	; 0x01
     f58:	7a 81       	ldd	r23, Y+2	; 0x02
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>

00000f62 <.LVL5>:
     f62:	46 2f       	mov	r20, r22
     f64:	57 2f       	mov	r21, r23
     f66:	50 93 57 02 	sts	0x0257, r21	; 0x800257 <agv_ultrasoon_boom_rechts+0x1>
     f6a:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <agv_ultrasoon_boom_rechts>

00000f6e <.L9>:
    }
    PCMSK2 = 0;
     f6e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000f72 <.Loc.63>:

}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0b be       	out	0x3b, r0	; 59
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <.L12>:
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
     fa4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     fa8:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000fac <.Loc.66>:
     fac:	86 56       	subi	r24, 0x66	; 102
     fae:	91 41       	sbci	r25, 0x11	; 17

00000fb0 <.Loc.67>:
     fb0:	96 95       	lsr	r25
     fb2:	87 95       	ror	r24
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24

00000fb8 <.Loc.68>:
     fb8:	9c 01       	movw	r18, r24
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	29 83       	std	Y+1, r18	; 0x01
     fc0:	3a 83       	std	Y+2, r19	; 0x02
     fc2:	4b 83       	std	Y+3, r20	; 0x03
     fc4:	5c 83       	std	Y+4, r21	; 0x04
     fc6:	ca 01       	movw	r24, r20
     fc8:	b9 01       	movw	r22, r18
     fca:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>

00000fce <.LVL6>:
     fce:	28 e2       	ldi	r18, 0x28	; 40
     fd0:	3e e7       	ldi	r19, 0x7E	; 126
     fd2:	4c e0       	ldi	r20, 0x0C	; 12
     fd4:	5d e3       	ldi	r21, 0x3D	; 61
     fd6:	69 83       	std	Y+1, r22	; 0x01
     fd8:	7a 83       	std	Y+2, r23	; 0x02
     fda:	8b 83       	std	Y+3, r24	; 0x03
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	7a 81       	ldd	r23, Y+2	; 0x02
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	0e 94 81 09 	call	0x1302	; 0x1302 <__mulsf3>

00000fea <.LVL7>:
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	69 81       	ldd	r22, Y+1	; 0x01
     ff4:	7a 81       	ldd	r23, Y+2	; 0x02
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>

00000ffe <.LVL8>:
     ffe:	46 2f       	mov	r20, r22
    1000:	57 2f       	mov	r21, r23
    1002:	50 93 59 02 	sts	0x0259, r21	; 0x800259 <agv_ultrasoon_boom_links+0x1>
    1006:	40 93 58 02 	sts	0x0258, r20	; 0x800258 <agv_ultrasoon_boom_links>
    100a:	b1 cf       	rjmp	.-158    	; 0xf6e <.L9>

0000100c <__vector_11>:

ISR(PCINT2_vect)
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	0b b6       	in	r0, 0x3b	; 59
    1018:	0f 92       	push	r0
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <L0^A>

00001038 <L0^A>:
    1038:	0f 92       	push	r0
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62

0000103e <.Loc.71>:
    if(agv_ultrasoon_current_sensor == 0b00000010)
    103e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00001042 <.Loc.73>:
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	09 f4       	brne	.+2      	; 0x1048 <.Loc.74>

00001046 <L0^A>:
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <.L17>

00001048 <.Loc.74>:
    {
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
        PORTA &= ~(0b00000001);
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
    1048:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

0000104c <.Loc.76>:
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	09 f4       	brne	.+2      	; 0x1052 <.Loc.77>

00001050 <L0^A>:
    1050:	8e c0       	rjmp	.+284    	; 0x116e <.L18>

00001052 <.Loc.77>:
    {
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
        PORTA &= ~(0b00000010);
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
    1052:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00001056 <.Loc.79>:
    1056:	80 31       	cpi	r24, 0x10	; 16
    1058:	09 f0       	breq	.+2      	; 0x105c <.Loc.80>

0000105a <L0^A>:
    105a:	69 c0       	rjmp	.+210    	; 0x112e <.L15>

0000105c <.Loc.80>:
    {
        agv_ultrasoon_voor_midden = (TCNT3 - 4454)/4*0.0343;
    105c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1060:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001064 <.Loc.82>:
    1064:	86 56       	subi	r24, 0x66	; 102
    1066:	91 41       	sbci	r25, 0x11	; 17

00001068 <.Loc.83>:
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24

00001070 <.Loc.84>:
    1070:	9c 01       	movw	r18, r24
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	29 83       	std	Y+1, r18	; 0x01
    1078:	3a 83       	std	Y+2, r19	; 0x02
    107a:	4b 83       	std	Y+3, r20	; 0x03
    107c:	5c 83       	std	Y+4, r21	; 0x04
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>

00001086 <.LVL9>:
    1086:	28 e2       	ldi	r18, 0x28	; 40
    1088:	3e e7       	ldi	r19, 0x7E	; 126
    108a:	4c e0       	ldi	r20, 0x0C	; 12
    108c:	5d e3       	ldi	r21, 0x3D	; 61
    108e:	69 83       	std	Y+1, r22	; 0x01
    1090:	7a 83       	std	Y+2, r23	; 0x02
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	69 81       	ldd	r22, Y+1	; 0x01
    1098:	7a 81       	ldd	r23, Y+2	; 0x02
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	0e 94 81 09 	call	0x1302	; 0x1302 <__mulsf3>

000010a2 <.LVL10>:
    10a2:	69 83       	std	Y+1, r22	; 0x01
    10a4:	7a 83       	std	Y+2, r23	; 0x02
    10a6:	8b 83       	std	Y+3, r24	; 0x03
    10a8:	9c 83       	std	Y+4, r25	; 0x04
    10aa:	69 81       	ldd	r22, Y+1	; 0x01
    10ac:	7a 81       	ldd	r23, Y+2	; 0x02
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>

000010b6 <.LVL11>:
    10b6:	46 2f       	mov	r20, r22
    10b8:	57 2f       	mov	r21, r23
    10ba:	50 93 55 02 	sts	0x0255, r21	; 0x800255 <agv_ultrasoon_voor_midden+0x1>
    10be:	40 93 54 02 	sts	0x0254, r20	; 0x800254 <agv_ultrasoon_voor_midden>

000010c2 <.Loc.86>:
        PORTA &= ~(0b00001000);
    10c2:	13 98       	cbi	0x02, 3	; 2
    10c4:	34 c0       	rjmp	.+104    	; 0x112e <.L15>

000010c6 <.L17>:
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
    10c6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    10ca:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

000010ce <.Loc.90>:
    10ce:	86 56       	subi	r24, 0x66	; 102
    10d0:	91 41       	sbci	r25, 0x11	; 17

000010d2 <.Loc.91>:
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24

000010da <.Loc.92>:
    10da:	9c 01       	movw	r18, r24
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	29 83       	std	Y+1, r18	; 0x01
    10e2:	3a 83       	std	Y+2, r19	; 0x02
    10e4:	4b 83       	std	Y+3, r20	; 0x03
    10e6:	5c 83       	std	Y+4, r21	; 0x04
    10e8:	ca 01       	movw	r24, r20
    10ea:	b9 01       	movw	r22, r18
    10ec:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>

000010f0 <.LVL12>:
    10f0:	28 e2       	ldi	r18, 0x28	; 40
    10f2:	3e e7       	ldi	r19, 0x7E	; 126
    10f4:	4c e0       	ldi	r20, 0x0C	; 12
    10f6:	5d e3       	ldi	r21, 0x3D	; 61
    10f8:	69 83       	std	Y+1, r22	; 0x01
    10fa:	7a 83       	std	Y+2, r23	; 0x02
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	69 81       	ldd	r22, Y+1	; 0x01
    1102:	7a 81       	ldd	r23, Y+2	; 0x02
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	0e 94 81 09 	call	0x1302	; 0x1302 <__mulsf3>

0000110c <.LVL13>:
    110c:	69 83       	std	Y+1, r22	; 0x01
    110e:	7a 83       	std	Y+2, r23	; 0x02
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	69 81       	ldd	r22, Y+1	; 0x01
    1116:	7a 81       	ldd	r23, Y+2	; 0x02
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>

00001120 <.LVL14>:
    1120:	46 2f       	mov	r20, r22
    1122:	57 2f       	mov	r21, r23
    1124:	50 93 57 02 	sts	0x0257, r21	; 0x800257 <agv_ultrasoon_boom_rechts+0x1>
    1128:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <agv_ultrasoon_boom_rechts>

0000112c <.Loc.94>:
        PORTA &= ~(0b00000001);
    112c:	10 98       	cbi	0x02, 0	; 2

0000112e <.L15>:
    }
    //check welke sensor en schrijf timer3 waarde naar sensorwaarde
    TIMSK3 &= ~(1<<ICIE3);
    112e:	e1 e7       	ldi	r30, 0x71	; 113
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8f 7d       	andi	r24, 0xDF	; 223
    1136:	80 83       	st	Z, r24

00001138 <.Loc.98>:
    //zet timer3 overflow flag uit
    PCMSK2 = 0;
    1138:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

0000113c <.Loc.100>:
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0b be       	out	0x3b, r0	; 59
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <.L18>:
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
    116e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1172:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001176 <.Loc.103>:
    1176:	86 56       	subi	r24, 0x66	; 102
    1178:	91 41       	sbci	r25, 0x11	; 17

0000117a <.Loc.104>:
    117a:	96 95       	lsr	r25
    117c:	87 95       	ror	r24
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24

00001182 <.Loc.105>:
    1182:	9c 01       	movw	r18, r24
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	29 83       	std	Y+1, r18	; 0x01
    118a:	3a 83       	std	Y+2, r19	; 0x02
    118c:	4b 83       	std	Y+3, r20	; 0x03
    118e:	5c 83       	std	Y+4, r21	; 0x04
    1190:	ca 01       	movw	r24, r20
    1192:	b9 01       	movw	r22, r18
    1194:	0e 94 1b 09 	call	0x1236	; 0x1236 <__floatunsisf>

00001198 <.LVL15>:
    1198:	28 e2       	ldi	r18, 0x28	; 40
    119a:	3e e7       	ldi	r19, 0x7E	; 126
    119c:	4c e0       	ldi	r20, 0x0C	; 12
    119e:	5d e3       	ldi	r21, 0x3D	; 61
    11a0:	69 83       	std	Y+1, r22	; 0x01
    11a2:	7a 83       	std	Y+2, r23	; 0x02
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	9c 83       	std	Y+4, r25	; 0x04
    11a8:	69 81       	ldd	r22, Y+1	; 0x01
    11aa:	7a 81       	ldd	r23, Y+2	; 0x02
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	0e 94 81 09 	call	0x1302	; 0x1302 <__mulsf3>

000011b4 <.LVL16>:
    11b4:	69 83       	std	Y+1, r22	; 0x01
    11b6:	7a 83       	std	Y+2, r23	; 0x02
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	69 81       	ldd	r22, Y+1	; 0x01
    11be:	7a 81       	ldd	r23, Y+2	; 0x02
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>

000011c8 <.LVL17>:
    11c8:	46 2f       	mov	r20, r22
    11ca:	57 2f       	mov	r21, r23
    11cc:	50 93 59 02 	sts	0x0259, r21	; 0x800259 <agv_ultrasoon_boom_links+0x1>
    11d0:	40 93 58 02 	sts	0x0258, r20	; 0x800258 <agv_ultrasoon_boom_links>

000011d4 <.Loc.107>:
        PORTA &= ~(0b00000010);
    11d4:	11 98       	cbi	0x02, 1	; 2
    11d6:	ab cf       	rjmp	.-170    	; 0x112e <.L15>

000011d8 <__fixunssfsi>:
    11d8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_splitA>
    11dc:	88 f0       	brcs	.+34     	; 0x1200 <.L_err>
    11de:	9f 57       	subi	r25, 0x7F	; 127
    11e0:	98 f0       	brcs	.+38     	; 0x1208 <.L_zr>
    11e2:	b9 2f       	mov	r27, r25
    11e4:	99 27       	eor	r25, r25
    11e6:	b7 51       	subi	r27, 0x17	; 23
    11e8:	b0 f0       	brcs	.+44     	; 0x1216 <.L4^B1>
    11ea:	e1 f0       	breq	.+56     	; 0x1224 <.L_sign>

000011ec <.L1^B1>:
    11ec:	66 0f       	add	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	1a f0       	brmi	.+6      	; 0x11fc <.L2^B1>
    11f6:	ba 95       	dec	r27
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <.L1^B1>
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <.L_sign>

000011fc <.L2^B1>:
    11fc:	b1 30       	cpi	r27, 0x01	; 1
    11fe:	91 f0       	breq	.+36     	; 0x1224 <.L_sign>

00001200 <.L_err>:
    1200:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_zero>
    1204:	b1 e0       	ldi	r27, 0x01	; 1
    1206:	08 95       	ret

00001208 <.L_zr>:
    1208:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_zero>

0000120c <.L3^B1>:
    120c:	67 2f       	mov	r22, r23
    120e:	78 2f       	mov	r23, r24
    1210:	88 27       	eor	r24, r24
    1212:	b8 5f       	subi	r27, 0xF8	; 248
    1214:	39 f0       	breq	.+14     	; 0x1224 <.L_sign>

00001216 <.L4^B1>:
    1216:	b9 3f       	cpi	r27, 0xF9	; 249
    1218:	cc f3       	brlt	.-14     	; 0x120c <.L3^B1>

0000121a <.L5^B1>:
    121a:	86 95       	lsr	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b3 95       	inc	r27
    1222:	d9 f7       	brne	.-10     	; 0x121a <.L5^B1>

00001224 <.L_sign>:
    1224:	3e f4       	brtc	.+14     	; 0x1234 <.L6^B1>
    1226:	90 95       	com	r25
    1228:	80 95       	com	r24
    122a:	70 95       	com	r23
    122c:	61 95       	neg	r22
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255

00001234 <.L6^B1>:
    1234:	08 95       	ret

00001236 <__floatunsisf>:
    1236:	e8 94       	clt
    1238:	09 c0       	rjmp	.+18     	; 0x124c <.L1^B1>

0000123a <__floatsisf>:
    123a:	97 fb       	bst	r25, 7
    123c:	3e f4       	brtc	.+14     	; 0x124c <.L1^B1>
    123e:	90 95       	com	r25
    1240:	80 95       	com	r24
    1242:	70 95       	com	r23
    1244:	61 95       	neg	r22
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255

0000124c <.L1^B1>:
    124c:	99 23       	and	r25, r25
    124e:	a9 f0       	breq	.+42     	; 0x127a <.L4^B1>
    1250:	f9 2f       	mov	r31, r25
    1252:	96 e9       	ldi	r25, 0x96	; 150
    1254:	bb 27       	eor	r27, r27

00001256 <.L2^B1>:
    1256:	93 95       	inc	r25
    1258:	f6 95       	lsr	r31
    125a:	87 95       	ror	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b7 95       	ror	r27
    1262:	f1 11       	cpse	r31, r1
    1264:	f8 cf       	rjmp	.-16     	; 0x1256 <.L2^B1>
    1266:	fa f4       	brpl	.+62     	; 0x12a6 <.L_pack>
    1268:	bb 0f       	add	r27, r27
    126a:	11 f4       	brne	.+4      	; 0x1270 <.L3^B1>
    126c:	60 ff       	sbrs	r22, 0
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <.L_pack>

00001270 <.L3^B1>:
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	16 c0       	rjmp	.+44     	; 0x12a6 <.L_pack>

0000127a <.L4^B1>:
    127a:	88 23       	and	r24, r24
    127c:	11 f0       	breq	.+4      	; 0x1282 <.L5^B1>
    127e:	96 e9       	ldi	r25, 0x96	; 150
    1280:	11 c0       	rjmp	.+34     	; 0x12a4 <.L8^B1>

00001282 <.L5^B1>:
    1282:	77 23       	and	r23, r23
    1284:	21 f0       	breq	.+8      	; 0x128e <.L6^B1>
    1286:	9e e8       	ldi	r25, 0x8E	; 142
    1288:	87 2f       	mov	r24, r23
    128a:	76 2f       	mov	r23, r22
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <.L7^B1>

0000128e <.L6^B1>:
    128e:	66 23       	and	r22, r22
    1290:	71 f0       	breq	.+28     	; 0x12ae <.L9^B1>
    1292:	96 e8       	ldi	r25, 0x86	; 134
    1294:	86 2f       	mov	r24, r22
    1296:	70 e0       	ldi	r23, 0x00	; 0

00001298 <.L7^B1>:
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	2a f0       	brmi	.+10     	; 0x12a6 <.L_pack>

0000129c <.L10^B1>:
    129c:	9a 95       	dec	r25
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24

000012a4 <.L8^B1>:
    12a4:	da f7       	brpl	.-10     	; 0x129c <.L10^B1>

000012a6 <.L_pack>:
    12a6:	88 0f       	add	r24, r24
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	97 f9       	bld	r25, 7

000012ae <.L9^B1>:
    12ae:	08 95       	ret

000012b0 <__fp_split3>:
    12b0:	57 fd       	sbrc	r21, 7
    12b2:	90 58       	subi	r25, 0x80	; 128
    12b4:	44 0f       	add	r20, r20
    12b6:	55 1f       	adc	r21, r21
    12b8:	59 f0       	breq	.+22     	; 0x12d0 <.L4^B1>
    12ba:	5f 3f       	cpi	r21, 0xFF	; 255
    12bc:	71 f0       	breq	.+28     	; 0x12da <.L5^B1>

000012be <.L1^B1>:
    12be:	47 95       	ror	r20

000012c0 <__fp_splitA>:
    12c0:	88 0f       	add	r24, r24
    12c2:	97 fb       	bst	r25, 7
    12c4:	99 1f       	adc	r25, r25
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <.L6^B1>
    12c8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ca:	79 f0       	breq	.+30     	; 0x12ea <.L7^B1>

000012cc <.L3^B1>:
    12cc:	87 95       	ror	r24
    12ce:	08 95       	ret

000012d0 <.L4^B1>:
    12d0:	12 16       	cp	r1, r18
    12d2:	13 06       	cpc	r1, r19
    12d4:	14 06       	cpc	r1, r20
    12d6:	55 1f       	adc	r21, r21
    12d8:	f2 cf       	rjmp	.-28     	; 0x12be <.L1^B1>

000012da <.L5^B1>:
    12da:	46 95       	lsr	r20
    12dc:	f1 df       	rcall	.-30     	; 0x12c0 <__fp_splitA>
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <.L8^B1>

000012e0 <.L6^B1>:
    12e0:	16 16       	cp	r1, r22
    12e2:	17 06       	cpc	r1, r23
    12e4:	18 06       	cpc	r1, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	f1 cf       	rjmp	.-30     	; 0x12cc <.L3^B1>

000012ea <.L7^B1>:
    12ea:	86 95       	lsr	r24
    12ec:	71 05       	cpc	r23, r1
    12ee:	61 05       	cpc	r22, r1

000012f0 <.L8^B1>:
    12f0:	08 94       	sec
    12f2:	08 95       	ret

000012f4 <__fp_zero>:
    12f4:	e8 94       	clt

000012f6 <__fp_szero>:
    12f6:	bb 27       	eor	r27, r27
    12f8:	66 27       	eor	r22, r22
    12fa:	77 27       	eor	r23, r23
    12fc:	cb 01       	movw	r24, r22
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <__mulsf3>:
    1302:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3x>
    1306:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_round>

0000130a <.L^B1>:
    130a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_pscA>
    130e:	38 f0       	brcs	.+14     	; 0x131e <.L1^B1>
    1310:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__fp_pscB>
    1314:	20 f0       	brcs	.+8      	; 0x131e <.L1^B1>
    1316:	95 23       	and	r25, r21
    1318:	11 f0       	breq	.+4      	; 0x131e <.L1^B1>
    131a:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_inf>

0000131e <.L1^B1>:
    131e:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__fp_nan>

00001322 <.L2^B1>:
    1322:	11 24       	eor	r1, r1
    1324:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__fp_szero>

00001328 <__mulsf3x>:
    1328:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fp_split3>
    132c:	70 f3       	brcs	.-36     	; 0x130a <.L^B1>

0000132e <__mulsf3_pse>:
    132e:	95 9f       	mul	r25, r21
    1330:	c1 f3       	breq	.-16     	; 0x1322 <.L2^B1>
    1332:	95 0f       	add	r25, r21
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	55 1f       	adc	r21, r21
    1338:	62 9f       	mul	r22, r18
    133a:	f0 01       	movw	r30, r0
    133c:	72 9f       	mul	r23, r18
    133e:	bb 27       	eor	r27, r27
    1340:	f0 0d       	add	r31, r0
    1342:	b1 1d       	adc	r27, r1
    1344:	63 9f       	mul	r22, r19
    1346:	aa 27       	eor	r26, r26
    1348:	f0 0d       	add	r31, r0
    134a:	b1 1d       	adc	r27, r1
    134c:	aa 1f       	adc	r26, r26
    134e:	64 9f       	mul	r22, r20
    1350:	66 27       	eor	r22, r22
    1352:	b0 0d       	add	r27, r0
    1354:	a1 1d       	adc	r26, r1
    1356:	66 1f       	adc	r22, r22
    1358:	82 9f       	mul	r24, r18
    135a:	22 27       	eor	r18, r18
    135c:	b0 0d       	add	r27, r0
    135e:	a1 1d       	adc	r26, r1
    1360:	62 1f       	adc	r22, r18
    1362:	73 9f       	mul	r23, r19
    1364:	b0 0d       	add	r27, r0
    1366:	a1 1d       	adc	r26, r1
    1368:	62 1f       	adc	r22, r18
    136a:	83 9f       	mul	r24, r19
    136c:	a0 0d       	add	r26, r0
    136e:	61 1d       	adc	r22, r1
    1370:	22 1f       	adc	r18, r18
    1372:	74 9f       	mul	r23, r20
    1374:	33 27       	eor	r19, r19
    1376:	a0 0d       	add	r26, r0
    1378:	61 1d       	adc	r22, r1
    137a:	23 1f       	adc	r18, r19
    137c:	84 9f       	mul	r24, r20
    137e:	60 0d       	add	r22, r0
    1380:	21 1d       	adc	r18, r1
    1382:	82 2f       	mov	r24, r18
    1384:	76 2f       	mov	r23, r22
    1386:	6a 2f       	mov	r22, r26
    1388:	11 24       	eor	r1, r1
    138a:	9f 57       	subi	r25, 0x7F	; 127
    138c:	50 40       	sbci	r21, 0x00	; 0
    138e:	9a f0       	brmi	.+38     	; 0x13b6 <.L13^B1>
    1390:	f1 f0       	breq	.+60     	; 0x13ce <.L15^B1>

00001392 <.L10^B1>:
    1392:	88 23       	and	r24, r24
    1394:	4a f0       	brmi	.+18     	; 0x13a8 <.L11^B1>
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	bb 1f       	adc	r27, r27
    139c:	66 1f       	adc	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	a9 f7       	brne	.-22     	; 0x1392 <.L10^B1>

000013a8 <.L11^B1>:
    13a8:	9e 3f       	cpi	r25, 0xFE	; 254
    13aa:	51 05       	cpc	r21, r1
    13ac:	80 f0       	brcs	.+32     	; 0x13ce <.L15^B1>
    13ae:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_inf>

000013b2 <.L12^B1>:
    13b2:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__fp_szero>

000013b6 <.L13^B1>:
    13b6:	5f 3f       	cpi	r21, 0xFF	; 255
    13b8:	e4 f3       	brlt	.-8      	; 0x13b2 <.L12^B1>
    13ba:	98 3e       	cpi	r25, 0xE8	; 232
    13bc:	d4 f3       	brlt	.-12     	; 0x13b2 <.L12^B1>

000013be <.L14^B1>:
    13be:	86 95       	lsr	r24
    13c0:	77 95       	ror	r23
    13c2:	67 95       	ror	r22
    13c4:	b7 95       	ror	r27
    13c6:	f7 95       	ror	r31
    13c8:	e7 95       	ror	r30
    13ca:	9f 5f       	subi	r25, 0xFF	; 255
    13cc:	c1 f7       	brne	.-16     	; 0x13be <.L14^B1>

000013ce <.L15^B1>:
    13ce:	fe 2b       	or	r31, r30
    13d0:	88 0f       	add	r24, r24
    13d2:	91 1d       	adc	r25, r1
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	97 f9       	bld	r25, 7
    13da:	08 95       	ret

000013dc <__fp_inf>:
    13dc:	97 f9       	bld	r25, 7
    13de:	9f 67       	ori	r25, 0x7F	; 127
    13e0:	80 e8       	ldi	r24, 0x80	; 128
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	08 95       	ret

000013e8 <__fp_nan>:
    13e8:	9f ef       	ldi	r25, 0xFF	; 255
    13ea:	80 ec       	ldi	r24, 0xC0	; 192
    13ec:	08 95       	ret

000013ee <__fp_pscA>:
    13ee:	00 24       	eor	r0, r0
    13f0:	0a 94       	dec	r0
    13f2:	16 16       	cp	r1, r22
    13f4:	17 06       	cpc	r1, r23
    13f6:	18 06       	cpc	r1, r24
    13f8:	09 06       	cpc	r0, r25
    13fa:	08 95       	ret

000013fc <__fp_pscB>:
    13fc:	00 24       	eor	r0, r0
    13fe:	0a 94       	dec	r0
    1400:	12 16       	cp	r1, r18
    1402:	13 06       	cpc	r1, r19
    1404:	14 06       	cpc	r1, r20
    1406:	05 06       	cpc	r0, r21
    1408:	08 95       	ret

0000140a <__fp_round>:
    140a:	09 2e       	mov	r0, r25
    140c:	03 94       	inc	r0
    140e:	00 0c       	add	r0, r0
    1410:	11 f4       	brne	.+4      	; 0x1416 <.L1^B1>
    1412:	88 23       	and	r24, r24
    1414:	52 f0       	brmi	.+20     	; 0x142a <.L3^B1>

00001416 <.L1^B1>:
    1416:	bb 0f       	add	r27, r27
    1418:	40 f4       	brcc	.+16     	; 0x142a <.L3^B1>
    141a:	bf 2b       	or	r27, r31
    141c:	11 f4       	brne	.+4      	; 0x1422 <.L2^B1>
    141e:	60 ff       	sbrs	r22, 0
    1420:	04 c0       	rjmp	.+8      	; 0x142a <.L3^B1>

00001422 <.L2^B1>:
    1422:	6f 5f       	subi	r22, 0xFF	; 255
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	8f 4f       	sbci	r24, 0xFF	; 255
    1428:	9f 4f       	sbci	r25, 0xFF	; 255

0000142a <.L3^B1>:
    142a:	08 95       	ret

0000142c <_exit>:
    142c:	f8 94       	cli

0000142e <__stop_program>:
    142e:	ff cf       	rjmp	.-2      	; 0x142e <__stop_program>
