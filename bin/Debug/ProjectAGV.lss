
bin\Debug\ProjectAGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00001180  00001234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001180  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080022a  0080022a  0000125e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000125e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  000012b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001fe5  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000013bb  00000000  00000000  000033b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001aa8  00000000  00000000  00004770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  0000050c  00000000  00000000  00006218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000a72  00000000  00000000  00006724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001ef  00000000  00000000  00007196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000046d  00000000  00000000  00007385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000002c  00000000  00000000  000077f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e0 e8       	ldi	r30, 0x80	; 128

000000fc <.Loc.4>:
      fc:	f1 e1       	ldi	r31, 0x11	; 17

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	aa 32       	cpi	r26, 0x2A	; 42

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	aa e2       	ldi	r26, 0x2A	; 42

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	a0 35       	cpi	r26, 0x50	; 80

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <main>
     122:	0c 94 be 08 	jmp	0x117c	; 0x117c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LedTreeIndictorLeftToggle>:
    PORTB |= (1 << PB2) | (1 << PB3);
    init_delay_led();
}

void LedTreeIndictorLeftToggle(){
        PORTB ^= (1 << TreeIndicatedLEDLeft);
     12a:	85 b1       	in	r24, 0x05	; 5

0000012c <.Loc.2>:
     12c:	94 e0       	ldi	r25, 0x04	; 4
     12e:	89 27       	eor	r24, r25
     130:	85 b9       	out	0x05, r24	; 5

00000132 <.Loc.3>:
}
     132:	08 95       	ret

00000134 <LedTreeIndictorRightToggle>:
void LedTreeIndictorRightToggle(){
        PORTB ^= (1 << TreeIndicatedLEDRight);
     134:	85 b1       	in	r24, 0x05	; 5

00000136 <.Loc.6>:
     136:	98 e0       	ldi	r25, 0x08	; 8
     138:	89 27       	eor	r24, r25
     13a:	85 b9       	out	0x05, r24	; 5

0000013c <.Loc.7>:
}
     13c:	08 95       	ret

0000013e <LedTurnSignalLeftToggle>:

void LedTurnSignalLeftToggle(){
    PORTL ^= (1 << TurnSignalLEDLeft);
     13e:	eb e0       	ldi	r30, 0x0B	; 11
     140:	f1 e0       	ldi	r31, 0x01	; 1
     142:	80 81       	ld	r24, Z

00000144 <.Loc.10>:
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	89 27       	eor	r24, r25
     148:	80 83       	st	Z, r24

0000014a <.Loc.11>:
}
     14a:	08 95       	ret

0000014c <LedTurnSignalRightToggle>:
void LedTurnSignalRightToggle(){
        PORTL ^= (1 << TurnSignalLEDRight);
     14c:	eb e0       	ldi	r30, 0x0B	; 11
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	80 81       	ld	r24, Z

00000152 <.Loc.14>:
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	89 27       	eor	r24, r25
     156:	80 83       	st	Z, r24

00000158 <.Loc.15>:
}
     158:	08 95       	ret

0000015a <LedBreakLightLeft>:

void LedBreakLightLeft(int x){
    if(x){
     15a:	89 2b       	or	r24, r25
     15c:	31 f0       	breq	.+12     	; 0x16a <.L6>

0000015e <.Loc.19>:
        PORTL |= (1 << BreaklightsLeft);
     15e:	eb e0       	ldi	r30, 0x0B	; 11
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	80 81       	ld	r24, Z

00000164 <.Loc.20>:
     164:	84 60       	ori	r24, 0x04	; 4
     166:	80 83       	st	Z, r24
     168:	08 95       	ret

0000016a <.L6>:
    }
    else{
        PORTL &= ~(1 << BreaklightsLeft);
     16a:	eb e0       	ldi	r30, 0x0B	; 11
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	80 81       	ld	r24, Z

00000170 <.Loc.23>:
     170:	8b 7f       	andi	r24, 0xFB	; 251
     172:	80 83       	st	Z, r24

00000174 <.Loc.24>:
    }
}
     174:	08 95       	ret

00000176 <LedBreakLightRight>:
void LedBreakLightRight(int x){
    if(x){
     176:	89 2b       	or	r24, r25
     178:	31 f0       	breq	.+12     	; 0x186 <.L9>

0000017a <.Loc.28>:
        PORTL |= (1 << BreaklightRight);
     17a:	eb e0       	ldi	r30, 0x0B	; 11
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	80 81       	ld	r24, Z

00000180 <.Loc.29>:
     180:	88 60       	ori	r24, 0x08	; 8
     182:	80 83       	st	Z, r24
     184:	08 95       	ret

00000186 <.L9>:
    }
    else{
        PORTL &= ~(1 << BreaklightRight);
     186:	eb e0       	ldi	r30, 0x0B	; 11
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	80 81       	ld	r24, Z

0000018c <.Loc.32>:
     18c:	87 7f       	andi	r24, 0xF7	; 247
     18e:	80 83       	st	Z, r24

00000190 <.Loc.33>:
    }
}
     190:	08 95       	ret

00000192 <setBreaklights>:

void setBreaklights(int x){
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	d8 2f       	mov	r29, r24
     198:	c9 2f       	mov	r28, r25

0000019a <.Loc.36>:
    LedBreakLightLeft(x);
     19a:	0e 94 ad 00 	call	0x15a	; 0x15a <LedBreakLightLeft>

0000019e <.LVL9>:
    LedBreakLightRight(x);
     19e:	8d 2f       	mov	r24, r29
     1a0:	9c 2f       	mov	r25, r28
     1a2:	0e 94 bb 00 	call	0x176	; 0x176 <LedBreakLightRight>

000001a6 <.LVL10>:
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <LedHeadlightLeft>:

void LedHeadlightLeft(int x){
    if(x){
     1ac:	89 2b       	or	r24, r25
     1ae:	31 f0       	breq	.+12     	; 0x1bc <.L13>

000001b0 <.Loc.42>:
        PORTL |= (1 << HeadlightsLeft);
     1b0:	eb e0       	ldi	r30, 0x0B	; 11
     1b2:	f1 e0       	ldi	r31, 0x01	; 1
     1b4:	80 81       	ld	r24, Z

000001b6 <.Loc.43>:
     1b6:	80 61       	ori	r24, 0x10	; 16
     1b8:	80 83       	st	Z, r24
     1ba:	08 95       	ret

000001bc <.L13>:
    }
    else{
        PORTL &= ~(1 << HeadlightsLeft);
     1bc:	eb e0       	ldi	r30, 0x0B	; 11
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	80 81       	ld	r24, Z

000001c2 <.Loc.46>:
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	80 83       	st	Z, r24

000001c6 <.Loc.47>:
    }
}
     1c6:	08 95       	ret

000001c8 <LedHeadlightRight>:
void LedHeadlightRight(int x){
    if(x){
     1c8:	89 2b       	or	r24, r25
     1ca:	31 f0       	breq	.+12     	; 0x1d8 <.L16>

000001cc <.Loc.51>:
        PORTL |= (1 << HeadlightsRight);
     1cc:	eb e0       	ldi	r30, 0x0B	; 11
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z

000001d2 <.Loc.52>:
     1d2:	80 62       	ori	r24, 0x20	; 32
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <.L16>:
    }
    else{
        PORTL &= ~(1 << HeadlightsRight);
     1d8:	eb e0       	ldi	r30, 0x0B	; 11
     1da:	f1 e0       	ldi	r31, 0x01	; 1
     1dc:	80 81       	ld	r24, Z

000001de <.Loc.55>:
     1de:	8f 7d       	andi	r24, 0xDF	; 223
     1e0:	80 83       	st	Z, r24

000001e2 <.Loc.56>:
    }
}
     1e2:	08 95       	ret

000001e4 <setHeadlights>:

void setHeadlights(int x){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	d8 2f       	mov	r29, r24
     1ea:	c9 2f       	mov	r28, r25

000001ec <.Loc.59>:
    LedHeadlightLeft(x);
     1ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LedHeadlightLeft>

000001f0 <.LVL20>:
    LedHeadlightRight(x);
     1f0:	8d 2f       	mov	r24, r29
     1f2:	9c 2f       	mov	r25, r28
     1f4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LedHeadlightRight>

000001f8 <.LVL21>:
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <LedNoodstopFront>:

void LedNoodstopFront(int x){
    if(x){
     1fe:	89 2b       	or	r24, r25
     200:	31 f0       	breq	.+12     	; 0x20e <.L20>

00000202 <.Loc.65>:
        PORTL |= (1 << NoodstopLEDFront);
     202:	eb e0       	ldi	r30, 0x0B	; 11
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	80 81       	ld	r24, Z

00000208 <.Loc.66>:
     208:	80 64       	ori	r24, 0x40	; 64
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <.L20>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDFront);
     20e:	eb e0       	ldi	r30, 0x0B	; 11
     210:	f1 e0       	ldi	r31, 0x01	; 1
     212:	80 81       	ld	r24, Z

00000214 <.Loc.69>:
     214:	8f 7b       	andi	r24, 0xBF	; 191
     216:	80 83       	st	Z, r24

00000218 <.Loc.70>:
    }
}
     218:	08 95       	ret

0000021a <LedNoodstopBack>:
void LedNoodstopBack(int x){
    if(x){
     21a:	89 2b       	or	r24, r25
     21c:	31 f0       	breq	.+12     	; 0x22a <.L23>

0000021e <.Loc.74>:
        PORTL |= (1 << NoodstopLEDBack);
     21e:	eb e0       	ldi	r30, 0x0B	; 11
     220:	f1 e0       	ldi	r31, 0x01	; 1
     222:	80 81       	ld	r24, Z

00000224 <.Loc.75>:
     224:	80 68       	ori	r24, 0x80	; 128
     226:	80 83       	st	Z, r24
     228:	08 95       	ret

0000022a <.L23>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDBack);
     22a:	eb e0       	ldi	r30, 0x0B	; 11
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	80 81       	ld	r24, Z

00000230 <.Loc.78>:
     230:	8f 77       	andi	r24, 0x7F	; 127
     232:	80 83       	st	Z, r24

00000234 <.Loc.79>:
    }
}
     234:	08 95       	ret

00000236 <__vector_15>:
volatile int TreeSignalLeft = 0;
volatile int TreeSignalRight = 0;

#define blinkspeed 300
volatile int counter = 0;
ISR(TIMER2_OVF_vect){
     236:	1f 92       	push	r1
     238:	0f 92       	push	r0
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	0f 92       	push	r0
     23e:	11 24       	eor	r1, r1
     240:	0b b6       	in	r0, 0x3b	; 59
     242:	0f 92       	push	r0
     244:	2f 93       	push	r18
     246:	3f 93       	push	r19
     248:	4f 93       	push	r20
     24a:	5f 93       	push	r21
     24c:	6f 93       	push	r22
     24e:	7f 93       	push	r23
     250:	8f 93       	push	r24
     252:	9f 93       	push	r25
     254:	af 93       	push	r26
     256:	bf 93       	push	r27
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31

0000025c <.Loc.81>:
    counter++;
     25c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <counter>
     260:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <counter+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <counter+0x1>
     26a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <counter>

0000026e <.Loc.83>:
    if(counter == blinkspeed){
     26e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <counter>
     272:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <counter+0x1>

00000276 <.Loc.85>:
     276:	8c 32       	cpi	r24, 0x2C	; 44
     278:	91 40       	sbci	r25, 0x01	; 1
     27a:	99 f0       	breq	.+38     	; 0x2a2 <.L31>

0000027c <.L25>:
        if(TurnSignalRight)LedTurnSignalRightToggle();
        if(TreeSignalLeft) LedTreeIndictorLeftToggle();
        if(TreeSignalRight) LedTreeIndictorRightToggle();
        counter = 0;
    }
}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0b be       	out	0x3b, r0	; 59
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <.L31>:
        if(TurnSignalLeft) LedTurnSignalLeftToggle();
     2a2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <TurnSignalLeft>
     2a6:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <TurnSignalLeft+0x1>

000002aa <.Loc.89>:
     2aa:	89 2b       	or	r24, r25
     2ac:	b9 f4       	brne	.+46     	; 0x2dc <.L32>

000002ae <.L27>:
        if(TurnSignalRight)LedTurnSignalRightToggle();
     2ae:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <TurnSignalRight>
     2b2:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <TurnSignalRight+0x1>

000002b6 <.Loc.92>:
     2b6:	89 2b       	or	r24, r25
     2b8:	a1 f4       	brne	.+40     	; 0x2e2 <.L33>

000002ba <.L28>:
        if(TreeSignalLeft) LedTreeIndictorLeftToggle();
     2ba:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <TreeSignalLeft>
     2be:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <TreeSignalLeft+0x1>

000002c2 <.Loc.95>:
     2c2:	89 2b       	or	r24, r25
     2c4:	89 f4       	brne	.+34     	; 0x2e8 <.L34>

000002c6 <.L29>:
        if(TreeSignalRight) LedTreeIndictorRightToggle();
     2c6:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <TreeSignalRight>
     2ca:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <TreeSignalRight+0x1>

000002ce <.Loc.98>:
     2ce:	89 2b       	or	r24, r25
     2d0:	71 f4       	brne	.+28     	; 0x2ee <.L35>

000002d2 <.L30>:
        counter = 0;
     2d2:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <counter+0x1>
     2d6:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <counter>

000002da <.Loc.101>:
}
     2da:	d0 cf       	rjmp	.-96     	; 0x27c <.L25>

000002dc <.L32>:
        if(TurnSignalLeft) LedTurnSignalLeftToggle();
     2dc:	0e 94 9f 00 	call	0x13e	; 0x13e <LedTurnSignalLeftToggle>

000002e0 <.LVL30>:
     2e0:	e6 cf       	rjmp	.-52     	; 0x2ae <.L27>

000002e2 <.L33>:
        if(TurnSignalRight)LedTurnSignalRightToggle();
     2e2:	0e 94 a6 00 	call	0x14c	; 0x14c <LedTurnSignalRightToggle>

000002e6 <.LVL31>:
     2e6:	e9 cf       	rjmp	.-46     	; 0x2ba <.L28>

000002e8 <.L34>:
        if(TreeSignalLeft) LedTreeIndictorLeftToggle();
     2e8:	0e 94 95 00 	call	0x12a	; 0x12a <LedTreeIndictorLeftToggle>

000002ec <.LVL32>:
     2ec:	ec cf       	rjmp	.-40     	; 0x2c6 <.L29>

000002ee <.L35>:
        if(TreeSignalRight) LedTreeIndictorRightToggle();
     2ee:	0e 94 9a 00 	call	0x134	; 0x134 <LedTreeIndictorRightToggle>

000002f2 <.LVL33>:
     2f2:	ef cf       	rjmp	.-34     	; 0x2d2 <.L30>

000002f4 <init_delay_led>:

void init_delay_led(){
    // Use mode 0, clkdiv = 64
    TCCR2A = 0;
     2f4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

000002f8 <.Loc.109>:
    TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

000002fe <.Loc.111>:

    // Disable PWM output
    OCR2A = 0;
     2fe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000302 <.Loc.113>:
    OCR2B = 0;
     302:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000306 <.Loc.115>:

    //Overflow interrupt
    TIMSK2 = (1<<TOIE2);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

0000030c <.Loc.117>:
    TCNT2 = 6;
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>

00000312 <.Loc.119>:
}
     312:	08 95       	ret

00000314 <init_Leds>:
    PORTL = 0xff;
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

0000031a <.Loc.123>:
    PORTB |= (1 << PB2) | (1 << PB3);
     31a:	85 b1       	in	r24, 0x05	; 5

0000031c <.Loc.124>:
     31c:	8c 60       	ori	r24, 0x0C	; 12
     31e:	85 b9       	out	0x05, r24	; 5

00000320 <.Loc.125>:
    init_delay_led();
     320:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <init_delay_led>

00000324 <.LVL34>:
}
     324:	08 95       	ret

00000326 <startTimer>:
    startTimer(); //Start de bocht
}

//Set timer aan
void startTimer(){
    AVGBochtenCounter = 0;
     326:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <AVGBochtenCounter+0x1>
     32a:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <AVGBochtenCounter>

0000032e <.Loc.3>:
    TCNT4 = 0;
     32e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     332:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

00000336 <.Loc.5>:
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000033c <.Loc.7>:
}
     33c:	08 95       	ret

0000033e <stopTimer>:

//Stop timer
void stopTimer(){
     TCCR4B = (0<<CS42) | (0<<CS41) | (0<<CS40);
     33e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000342 <.Loc.11>:
     turnsTaken++;
     342:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     346:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <turnsTaken+0x1>
     350:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <turnsTaken>

00000354 <.Loc.13>:
}
     354:	08 95       	ret

00000356 <checkIfFinished>:

//Check of de bocht af is
void checkIfFinished(){
    if(turnsTaken >= 3){
     356:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     35a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     35e:	03 97       	sbiw	r24, 0x03	; 3
     360:	44 f0       	brlt	.+16     	; 0x372 <.L3>

00000362 <.Loc.17>:
        turnsTaken = 0;
     362:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <turnsTaken+0x1>
     366:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <turnsTaken>

0000036a <.Loc.19>:
        turnStarted = 0;
     36a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <turnStarted+0x1>
     36e:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <turnStarted>

00000372 <.L3>:
        return 1;
    } else return 0;
}
     372:	08 95       	ret

00000374 <startTurn>:
    if(turnStarted == 1) { //Check of we niet al een bocht aan het maken zijn
     374:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <turnStarted>
     378:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <turnStarted+0x1>
     37c:	21 30       	cpi	r18, 0x01	; 1
     37e:	31 05       	cpc	r19, r1
     380:	69 f0       	breq	.+26     	; 0x39c <.L7>

00000382 <.Loc.26>:
    turnStarted = 1;
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <turnStarted+0x1>
     38a:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <turnStarted>

0000038e <.Loc.28>:
    turnDirection = direction;
     38e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <turnDirection>
     392:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <turnDirection+0x1>

00000396 <.Loc.30>:
    startTimer(); //Start de bocht
     396:	0e 94 93 01 	call	0x326	; 0x326 <startTimer>

0000039a <.LVL1>:
}
     39a:	08 95       	ret

0000039c <.L7>:
        return checkIfFinished();
     39c:	0e 94 ab 01 	call	0x356	; 0x356 <checkIfFinished>

000003a0 <.LVL3>:
     3a0:	08 95       	ret

000003a2 <init_AGVBochten_timer>:

void init_AGVBochten_timer(){
    // Use timer 4 (16bit), clkdiv = 0, 16.000.000 / (2^16) / 8 = 30(.5175
    TCCR4A = 0;
     3a2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

000003a6 <.Loc.38>:
    //TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);

    // Disable PWM output
    OCR4A = 0;
     3a6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     3aa:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

000003ae <.Loc.40>:
    OCR4B = 0;
     3ae:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     3b2:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>

000003b6 <.Loc.42>:

    //Compares

    //Overflow interrupt
    TIMSK4 = (1<<TOIE4);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

000003bc <.Loc.44>:
    //TCNT4 = 6;
}
     3bc:	08 95       	ret

000003be <initAGVBochten>:
    init_AGVBochten_timer();
     3be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init_AGVBochten_timer>

000003c2 <.LVL4>:
}
     3c2:	08 95       	ret

000003c4 <turn>:
        turnsTaken++; //increase aantal bochten
    }
}

//Zet de wielen goed voor de bocht
void turn(int direction){
     3c4:	28 2f       	mov	r18, r24
     3c6:	39 2f       	mov	r19, r25

000003c8 <.Loc.50>:
    switch(direction) {
     3c8:	21 15       	cp	r18, r1
     3ca:	31 05       	cpc	r19, r1
     3cc:	21 f0       	breq	.+8      	; 0x3d6 <.L11>
     3ce:	21 30       	cpi	r18, 0x01	; 1
     3d0:	31 05       	cpc	r19, r1
     3d2:	71 f0       	breq	.+28     	; 0x3f0 <.L12>
     3d4:	08 95       	ret

000003d6 <.L11>:
    case Left:
        setStepperMode(leftMotor, Off);
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	8a e0       	ldi	r24, 0x0A	; 10
     3dc:	90 e0       	ldi	r25, 0x00	; 0

000003de <.Loc.52>:
     3de:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

000003e2 <.LVL7>:
        setStepperMode(rightMotor, ForwardStep);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	8b e0       	ldi	r24, 0x0B	; 11
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

000003ee <.LVL8>:
        break;
     3ee:	08 95       	ret

000003f0 <.L12>:
    case Right:
        setStepperMode(leftMotor, ForwardStep);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	8a e0       	ldi	r24, 0x0A	; 10
     3f6:	90 e0       	ldi	r25, 0x00	; 0

000003f8 <.Loc.56>:
     3f8:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

000003fc <.LVL11>:
        setStepperMode(rightMotor, Off);
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	8b e0       	ldi	r24, 0x0B	; 11
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

00000408 <.LVL12>:
        break;
    }
}
     408:	08 95       	ret

0000040a <__vector_45>:
ISR(TIMER4_OVF_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	6f 93       	push	r22
     422:	7f 93       	push	r23
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31

00000430 <.Loc.61>:
    AVGBochtenCounter++;
     430:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     434:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <AVGBochtenCounter+0x1>
     43e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <AVGBochtenCounter>

00000442 <.Loc.63>:
    if(AVGBochtenCounter == Comp_StartTurn){
     442:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     446:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>

0000044a <.Loc.65>:
     44a:	8a 35       	cpi	r24, 0x5A	; 90
     44c:	91 05       	cpc	r25, r1
     44e:	d1 f0       	breq	.+52     	; 0x484 <.L19>

00000450 <.L15>:
    if(AVGBochtenCounter == Comp_EndTurn){
     450:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     454:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>

00000458 <.Loc.68>:
     458:	8f 3c       	cpi	r24, 0xCF	; 207
     45a:	91 05       	cpc	r25, r1
     45c:	19 f1       	breq	.+70     	; 0x4a4 <.L20>

0000045e <.L14>:
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0b be       	out	0x3b, r0	; 59
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <.L19>:
        if(turnsTaken == 2) { //Als we al 2 bochten hebben gemaakt stop de timer
     484:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     488:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     48c:	02 97       	sbiw	r24, 0x02	; 2
     48e:	39 f0       	breq	.+14     	; 0x49e <.L21>

00000490 <.LBB3>:
        } else turn(turnDirection); //Zoniet, maak de bocht
     490:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <turnDirection>
     494:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <turnDirection+0x1>
     498:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <turn>

0000049c <.LVL13>:
     49c:	d9 cf       	rjmp	.-78     	; 0x450 <.L15>

0000049e <.L21>:
            stopTimer();
     49e:	0e 94 9f 01 	call	0x33e	; 0x33e <stopTimer>

000004a2 <.LVL14>:
     4a2:	d6 cf       	rjmp	.-84     	; 0x450 <.L15>

000004a4 <.L20>:
        setBothStepperMode(ForwardStep);
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000004ac <.LVL15>:
        if(turnsTaken == 0) AVGBochtenCounter = DrivingHeadstart; //Als dit het einde is van de eerste bocht, reset de timer om het te herhalen
     4ac:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     4b0:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>

000004b4 <.Loc.77>:
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <.L18>

000004b8 <.Loc.78>:
     4b8:	2e ec       	ldi	r18, 0xCE	; 206
     4ba:	3f ef       	ldi	r19, 0xFF	; 255
     4bc:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <AVGBochtenCounter+0x1>
     4c0:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <AVGBochtenCounter>

000004c4 <.L18>:
        turnsTaken++; //increase aantal bochten
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <turnsTaken+0x1>
     4ca:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <turnsTaken>

000004ce <.Loc.82>:
}
     4ce:	c7 cf       	rjmp	.-114    	; 0x45e <.L14>

000004d0 <needCorrection>:
    2-Afwijking naar links
*/
int needCorrection(){
    int returnValue = 0;
    //Linker bit is niet geactiveerd, we hebben een afwijking naar Rechts
    if(!bit_is_clear(PINA, IRSensorLeft)){
     4d0:	80 b1       	in	r24, 0x00	; 0

000004d2 <.Loc.4>:
        returnValue = 1;
    }
    //Rechter bit is niet geactiveerd, we hebben een afwijking naar Links
    if(!bit_is_clear(PINA, IRSensorRight)){
     4d2:	03 99       	sbic	0x00, 3	; 0
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <.L3>

000004d6 <.Loc.6>:
    if(!bit_is_clear(PINA, IRSensorLeft)){
     4d6:	82 fb       	bst	r24, 2
     4d8:	88 27       	eor	r24, r24
     4da:	80 f9       	bld	r24, 0

000004dc <.Loc.7>:
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	08 95       	ret

000004e0 <.L3>:
        returnValue = 2;
     4e0:	82 e0       	ldi	r24, 0x02	; 2

000004e2 <.Loc.9>:
     4e2:	90 e0       	ldi	r25, 0x00	; 0

000004e4 <.Loc.10>:
    }

    return returnValue;
}
     4e4:	08 95       	ret

000004e6 <checkNoodstop>:

//Check of noodstop is ingedrukt
int checkNoodstop(){
    if(bit_is_clear(PINC, NoodstopPin)){
     4e6:	86 b1       	in	r24, 0x06	; 6

000004e8 <.Loc.15>:
     4e8:	86 95       	lsr	r24
     4ea:	86 95       	lsr	r24
     4ec:	86 95       	lsr	r24
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	89 27       	eor	r24, r25

000004f2 <.Loc.16>:
        return 1;
    }
    return 0;
}
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	08 95       	ret

000004f8 <isStartButtonPressed>:

//Check of start knop is ingedrukt
int isStartButtonPressed(){
    return bit_is_clear(PINC, StartButtonPin);
     4f8:	86 b1       	in	r24, 0x06	; 6
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	89 27       	eor	r24, r25

000004fe <.Loc.20>:
}
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	08 95       	ret

00000504 <checkModeSwitchState>:
    0- Switch staat in het midden
    1- Volgen
    2- Rijden
*/
int checkModeSwitchState(){
    if(bit_is_clear(PINC, FollowModeSwitch)){
     504:	31 9b       	sbis	0x06, 1	; 6
     506:	0b c0       	rjmp	.+22     	; 0x51e <.L8>

00000508 <.Loc.24>:
        return 1; //Switch is in follow mode.
    }
    if(bit_is_clear(PINC, DriveModeSwitch)){
     508:	26 b1       	in	r18, 0x06	; 6

0000050a <.Loc.26>:
     50a:	26 95       	lsr	r18
     50c:	26 95       	lsr	r18
     50e:	31 e0       	ldi	r19, 0x01	; 1
     510:	23 27       	eor	r18, r19
     512:	82 2f       	mov	r24, r18
     514:	81 70       	andi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	08 95       	ret

0000051e <.L8>:
        return 1; //Switch is in follow mode.
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0

00000522 <.Loc.28>:
        return 2; //Switch is in drive mode.
    }

    return 0; //Switch staat in het midden, geen van beide geactiveerd.

}
     522:	08 95       	ret

00000524 <initButtons>:

//Init buttons
void initButtons(){
    //Loop voor alle buttons
    for(int i = 0; i < 5; i++){
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0

00000528 <.Loc.34>:
        DDRC &= ~(1<<i);
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	70 e0       	ldi	r23, 0x00	; 0

0000052c <.L10>:
     52c:	37 b1       	in	r19, 0x07	; 7

0000052e <.Loc.36>:
     52e:	ab 01       	movw	r20, r22
     530:	08 2e       	mov	r0, r24
     532:	02 c0       	rjmp	.+4      	; 0x538 <.L2^B1>

00000534 <.L1^B1>:
     534:	44 0f       	add	r20, r20
     536:	55 1f       	adc	r21, r21

00000538 <.L2^B1>:
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <.L1^B1>

0000053c <.Loc.37>:
     53c:	24 2f       	mov	r18, r20
     53e:	20 95       	com	r18
     540:	23 23       	and	r18, r19
     542:	27 b9       	out	0x07, r18	; 7

00000544 <.Loc.38>:
        PORTC |= (1<<i);
     544:	28 b1       	in	r18, 0x08	; 8

00000546 <.Loc.39>:
     546:	24 2b       	or	r18, r20
     548:	28 b9       	out	0x08, r18	; 8

0000054a <.Loc.40>:
    for(int i = 0; i < 5; i++){
     54a:	01 96       	adiw	r24, 0x01	; 1

0000054c <.Loc.41>:
     54c:	85 30       	cpi	r24, 0x05	; 5
     54e:	91 05       	cpc	r25, r1
     550:	69 f7       	brne	.-38     	; 0x52c <.L10>

00000552 <.LBE10>:
    }
}
     552:	08 95       	ret

00000554 <initIRSensors>:

//Init IR sensors
void initIRSensors(){
    //Loop voor alle IR sensors
    for(int i = 0; i < 4; i++){
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0

00000558 <.Loc.48>:
        DDRA &= ~(1<<i);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	70 e0       	ldi	r23, 0x00	; 0

0000055c <.L13>:
     55c:	31 b1       	in	r19, 0x01	; 1

0000055e <.Loc.50>:
     55e:	ab 01       	movw	r20, r22
     560:	08 2e       	mov	r0, r24
     562:	02 c0       	rjmp	.+4      	; 0x568 <.L2^B2>

00000564 <.L1^B2>:
     564:	44 0f       	add	r20, r20
     566:	55 1f       	adc	r21, r21

00000568 <.L2^B2>:
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <.L1^B2>

0000056c <.Loc.51>:
     56c:	24 2f       	mov	r18, r20
     56e:	20 95       	com	r18
     570:	23 23       	and	r18, r19
     572:	21 b9       	out	0x01, r18	; 1

00000574 <.Loc.52>:
        PORTA |= (1<<i);
     574:	22 b1       	in	r18, 0x02	; 2

00000576 <.Loc.53>:
     576:	24 2b       	or	r18, r20
     578:	22 b9       	out	0x02, r18	; 2

0000057a <.Loc.54>:
    for(int i = 0; i < 4; i++){
     57a:	01 96       	adiw	r24, 0x01	; 1

0000057c <.Loc.55>:
     57c:	84 30       	cpi	r24, 0x04	; 4
     57e:	91 05       	cpc	r25, r1
     580:	69 f7       	brne	.-38     	; 0x55c <.L13>

00000582 <.LBE11>:
    }
}
     582:	08 95       	ret

00000584 <initAGV>:
    init_Leds();
     584:	0e 94 8a 01 	call	0x314	; 0x314 <init_Leds>

00000588 <.LVL12>:
    agv_ultrasoon_init();
     588:	0e 94 82 05 	call	0xb04	; 0xb04 <agv_ultrasoon_init>

0000058c <.LVL13>:
    initSteppermotorAVRDriver();
     58c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <initSteppermotorAVRDriver>

00000590 <.LVL14>:
    initIRSensors();
     590:	0e 94 aa 02 	call	0x554	; 0x554 <initIRSensors>

00000594 <.LVL15>:
    initButtons();
     594:	0e 94 92 02 	call	0x524	; 0x524 <initButtons>

00000598 <.LVL16>:
    initAGVBochten();
     598:	0e 94 df 01 	call	0x3be	; 0x3be <initAGVBochten>

0000059c <.LVL17>:
}
     59c:	08 95       	ret

0000059e <checkFrontIRState>:
    2- Rechts
    3- Geen
*/
int checkFrontIRState(){
    //Allebij detecteren iets, return 0
    if(bit_is_clear(PINA, FrontIRSensorLeftPin) && bit_is_clear(PINA, FrontIRSensorRightPin)){
     59e:	00 99       	sbic	0x00, 0	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <.L17>

000005a2 <.Loc.68>:
     5a2:	01 9b       	sbis	0x00, 1	; 0
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <.L19>

000005a6 <.L17>:
        return 0;
    }

    //Linker sensor detecteerd iets, return 1
    if(bit_is_clear(PINA, FrontIRSensorLeftPin)){
     5a6:	00 9b       	sbis	0x00, 0	; 0
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <.L20>

000005aa <.Loc.71>:
        return 1;
    }

    //Rechter sensor detecteert iets, return 2
    if(bit_is_clear(PINA, FrontIRSensorRightPin)){
     5aa:	01 9b       	sbis	0x00, 1	; 0
     5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <.L21>

000005ae <.Loc.73>:
        return 2;
    }

    //Return 3
    return 3;
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <.L19>:
        return 0;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	08 95       	ret

000005ba <.L20>:
        return 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	08 95       	ret

000005c0 <.L21>:
        return 2;
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	90 e0       	ldi	r25, 0x00	; 0

000005c4 <.Loc.77>:
}
     5c4:	08 95       	ret

000005c6 <filterDistance>:
    Als er iets te ver weg van de sonic sensor is de waarde tussen de 500 & 660,
    dus verander dit naar een groot waarde, in dit geval 100.

    Anders return de originele waarde.
*/
int filterDistance(int distance){
     5c6:	28 2f       	mov	r18, r24
     5c8:	39 2f       	mov	r19, r25

000005ca <.Loc.80>:
    //Alle waardes boven 200 zijn bs anyways
    if(distance == 561){
     5ca:	21 33       	cpi	r18, 0x31	; 49
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	38 07       	cpc	r19, r24

000005d0 <.Loc.82>:
     5d0:	31 f0       	breq	.+12     	; 0x5de <.L24>

000005d2 <.Loc.83>:
        distance = 1;
    } else if(distance > 500){
     5d2:	25 3f       	cpi	r18, 0xF5	; 245
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	38 07       	cpc	r19, r24
     5d8:	2c f4       	brge	.+10     	; 0x5e4 <.L25>
     5da:	82 2f       	mov	r24, r18
     5dc:	08 95       	ret

000005de <.L24>:
        distance = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	08 95       	ret

000005e4 <.L25>:
        distance = 100;
     5e4:	84 e6       	ldi	r24, 0x64	; 100
     5e6:	90 e0       	ldi	r25, 0x00	; 0

000005e8 <.Loc.87>:
    }
    return distance;
}
     5e8:	08 95       	ret

000005ea <checkSensors>:
    if(maxDistance > filterDistance(agv_ultrasoon_voor_midden)){
     5ea:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <agv_ultrasoon_voor_midden>
     5ee:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <agv_ultrasoon_voor_midden+0x1>
     5f2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <filterDistance>

000005f6 <.LVL21>:
     5f6:	0e 97       	sbiw	r24, 0x0e	; 14
     5f8:	0c f4       	brge	.+2      	; 0x5fc <.Loc.95>

000005fa <L0^A>:
     5fa:	57 c0       	rjmp	.+174    	; 0x6aa <.L33>

000005fc <.Loc.95>:
    if((TreeDistance > filterDistance(agv_ultrasoon_boom_links)) && !leftPreviousState){
     5fc:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <agv_ultrasoon_boom_links>
     600:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     604:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <filterDistance>

00000608 <.LVL22>:
     608:	0a 97       	sbiw	r24, 0x0a	; 10
     60a:	d4 f4       	brge	.+52     	; 0x640 <.L28>

0000060c <.Loc.98>:
     60c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftPreviousState.1>
     610:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftPreviousState.1+0x1>
     614:	89 2b       	or	r24, r25
     616:	69 f0       	breq	.+26     	; 0x632 <.L36>

00000618 <.L29>:
    } else if(leftPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_links)) ){
     618:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <agv_ultrasoon_boom_links>
     61c:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     620:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <filterDistance>

00000624 <.LVL23>:
     624:	0b 97       	sbiw	r24, 0x0b	; 11
     626:	94 f0       	brlt	.+36     	; 0x64c <.L30>

00000628 <.Loc.101>:
        leftPreviousState = 0;
     628:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <leftPreviousState.1+0x1>
     62c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <leftPreviousState.1>
     630:	0d c0       	rjmp	.+26     	; 0x64c <.L30>

00000632 <.L36>:
        leftPreviousState = 1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <leftPreviousState.1+0x1>
     63a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <leftPreviousState.1>

0000063e <.Loc.105>:
        return 1;
     63e:	08 95       	ret

00000640 <.L28>:
    } else if(leftPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_links)) ){
     640:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftPreviousState.1>
     644:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftPreviousState.1+0x1>
     648:	89 2b       	or	r24, r25
     64a:	31 f7       	brne	.-52     	; 0x618 <.L29>

0000064c <.L30>:
    if((TreeDistance > filterDistance(agv_ultrasoon_boom_rechts)) && !rightPreviousState){
     64c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <agv_ultrasoon_boom_rechts>
     650:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     654:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <filterDistance>

00000658 <.LVL24>:
     658:	0a 97       	sbiw	r24, 0x0a	; 10
     65a:	f4 f4       	brge	.+60     	; 0x698 <.L31>

0000065c <.Loc.112>:
     65c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rightPreviousState.0>
     660:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <rightPreviousState.0+0x1>
     664:	89 2b       	or	r24, r25
     666:	79 f0       	breq	.+30     	; 0x686 <.L37>

00000668 <.L32>:
    } else if(rightPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_rechts)) ){
     668:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <agv_ultrasoon_boom_rechts>
     66c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     670:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <filterDistance>

00000674 <.LVL25>:
     674:	0b 97       	sbiw	r24, 0x0b	; 11
     676:	e4 f0       	brlt	.+56     	; 0x6b0 <.L35>

00000678 <.Loc.115>:
        rightPreviousState = 0;
     678:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <rightPreviousState.0+0x1>
     67c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <rightPreviousState.0>

00000680 <.Loc.117>:
    return 3;
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	08 95       	ret

00000686 <.L37>:
        rightPreviousState = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <rightPreviousState.0+0x1>
     68e:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <rightPreviousState.0>

00000692 <.Loc.120>:
        return 2;
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	08 95       	ret

00000698 <.L31>:
    } else if(rightPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_rechts)) ){
     698:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rightPreviousState.0>
     69c:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <rightPreviousState.0+0x1>
     6a0:	89 2b       	or	r24, r25
     6a2:	11 f7       	brne	.-60     	; 0x668 <.L32>

000006a4 <.Loc.124>:
    return 3;
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	08 95       	ret

000006aa <.L33>:
        return 0;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	08 95       	ret

000006b0 <.L35>:
    return 3;
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	90 e0       	ldi	r25, 0x00	; 0

000006b4 <.Loc.127>:
}
     6b4:	08 95       	ret

000006b6 <followHand>:

//Code voor het volgen van de hand op de juiste afstand
void followHand(int distance){
     6b6:	28 2f       	mov	r18, r24
     6b8:	39 2f       	mov	r19, r25

000006ba <.Loc.130>:

    //Check voor als er iets TE ver weg staat en te negeren.
    if(distance > distanceToCheck){
     6ba:	23 33       	cpi	r18, 0x33	; 51
     6bc:	31 05       	cpc	r19, r1
     6be:	5c f4       	brge	.+22     	; 0x6d6 <.L43>

000006c0 <.Loc.132>:
        setBothStepperMode(Off);
        return;
    }

    //Check voor juiste afstand met speelruimte
    if((distance < maxDistance) && (distance > minDistance)){
     6c0:	c9 01       	movw	r24, r18

000006c2 <.Loc.134>:
     6c2:	0b 97       	sbiw	r24, 0x0b	; 11

000006c4 <.Loc.135>:
     6c4:	03 97       	sbiw	r24, 0x03	; 3
     6c6:	60 f0       	brcs	.+24     	; 0x6e0 <.L44>

000006c8 <.Loc.136>:
            setBothStepperMode(Off);
            return;
    }

    //Check voor dichtbij
    if(distance < minDistance){
     6c8:	2a 30       	cpi	r18, 0x0A	; 10
     6ca:	31 05       	cpc	r19, r1
     6cc:	74 f0       	brlt	.+28     	; 0x6ea <.L45>

000006ce <.Loc.138>:
        setBothStepperMode(BackwardStep);
        return;
    }

    //check voor verweg
    if(distance > maxDistance){
     6ce:	2f 30       	cpi	r18, 0x0F	; 15
     6d0:	31 05       	cpc	r19, r1
     6d2:	84 f4       	brge	.+32     	; 0x6f4 <.L46>

000006d4 <.L38>:
        setBothStepperMode(ForwardStep);
    }

}
     6d4:	08 95       	ret

000006d6 <.L43>:
        setBothStepperMode(Off);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0

000006da <.Loc.142>:
     6da:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000006de <.LVL30>:
        return;
     6de:	08 95       	ret

000006e0 <.L44>:
            setBothStepperMode(Off);
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000006e8 <.LVL31>:
            return;
     6e8:	08 95       	ret

000006ea <.L45>:
        setBothStepperMode(BackwardStep);
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000006f2 <.LVL32>:
        return;
     6f2:	08 95       	ret

000006f4 <.L46>:
        setBothStepperMode(ForwardStep);
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000006fc <.LVL33>:
     6fc:	eb cf       	rjmp	.-42     	; 0x6d4 <.L38>

000006fe <main>:
    initAGV(); //Init
     6fe:	0e 94 c2 02 	call	0x584	; 0x584 <initAGV>

00000702 <.LVL35>:
    setBothStepperMode(ForwardStep);
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

0000070a <.LVL36>:
    setHeadlights(1);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setHeadlights>

00000712 <.LVL37>:
    int mode = ModeOff; //Active mode van de AGV
     712:	c0 e0       	ldi	r28, 0x00	; 0
     714:	d0 e0       	ldi	r29, 0x00	; 0

00000716 <.Loc.156>:
                if(!checkNoodstop()) {
     716:	e1 2c       	mov	r14, r1
     718:	f1 2c       	mov	r15, r1
     71a:	60 c0       	rjmp	.+192    	; 0x7dc <.L48>

0000071c <.L69>:
        if(mode != Noodstop && mode != ModeOff && isStartButtonPressed()){
     71c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <isStartButtonPressed>

00000720 <.LVL39>:
     720:	89 2b       	or	r24, r25
     722:	09 f0       	breq	.+2      	; 0x726 <.Loc.160>

00000724 <L0^A>:
     724:	65 c0       	rjmp	.+202    	; 0x7f0 <.L50>

00000726 <.Loc.160>:
        switch(mode){
     726:	c2 30       	cpi	r28, 0x02	; 2
     728:	d1 05       	cpc	r29, r1
     72a:	09 f4       	brne	.+2      	; 0x72e <.Loc.161>

0000072c <L0^A>:
     72c:	ae c0       	rjmp	.+348    	; 0x88a <.L51>

0000072e <.Loc.161>:
     72e:	6c f5       	brge	.+90     	; 0x78a <.L52>
     730:	c1 30       	cpi	r28, 0x01	; 1
     732:	d1 05       	cpc	r29, r1
     734:	09 f0       	breq	.+2      	; 0x738 <.Loc.162>

00000736 <L0^A>:
     736:	52 c0       	rjmp	.+164    	; 0x7dc <.L48>

00000738 <.Loc.162>:
                FrontDistance = agv_ultrasoon_voor_midden;
     738:	c0 90 4a 02 	lds	r12, 0x024A	; 0x80024a <agv_ultrasoon_voor_midden>
     73c:	d0 90 4b 02 	lds	r13, 0x024B	; 0x80024b <agv_ultrasoon_voor_midden+0x1>

00000740 <.Loc.164>:
                int IRState = checkFrontIRState();
     740:	0e 94 cf 02 	call	0x59e	; 0x59e <checkFrontIRState>

00000744 <.LVL41>:
     744:	08 2f       	mov	r16, r24
     746:	19 2f       	mov	r17, r25

00000748 <.Loc.166>:
                switch(IRState){
     748:	02 30       	cpi	r16, 0x02	; 2
     74a:	11 05       	cpc	r17, r1
     74c:	09 f4       	brne	.+2      	; 0x750 <L0^A+0x2>

0000074e <L0^A>:
     74e:	8a c0       	rjmp	.+276    	; 0x864 <.L58>
     750:	0c f0       	brlt	.+2      	; 0x754 <L0^A+0x2>

00000752 <L0^A>:
     752:	68 c0       	rjmp	.+208    	; 0x824 <.L59>
     754:	01 15       	cp	r16, r1
     756:	11 05       	cpc	r17, r1
     758:	09 f4       	brne	.+2      	; 0x75c <L0^A+0x2>

0000075a <L0^A>:
     75a:	75 c0       	rjmp	.+234    	; 0x846 <.L60>
     75c:	01 30       	cpi	r16, 0x01	; 1
     75e:	11 05       	cpc	r17, r1
     760:	e9 f5       	brne	.+122    	; 0x7dc <.L48>

00000762 <.Loc.167>:
                        TurnSignalLeft = 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <TurnSignalLeft+0x1>
     76a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <TurnSignalLeft>

0000076e <.Loc.169>:
                        setStepperMode(rightMotor, BackwardStep);
     76e:	62 e0       	ldi	r22, 0x02	; 2
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	8b e0       	ldi	r24, 0x0B	; 11
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

0000077a <.LVL43>:
                        setStepperMode(leftMotor, Off);
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8a e0       	ldi	r24, 0x0A	; 10
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

00000786 <.LVL44>:
                        break;
     786:	e8 01       	movw	r28, r16

00000788 <.Loc.172>:
     788:	29 c0       	rjmp	.+82     	; 0x7dc <.L48>

0000078a <.L52>:
        switch(mode){
     78a:	c3 30       	cpi	r28, 0x03	; 3
     78c:	d1 05       	cpc	r29, r1
     78e:	31 f5       	brne	.+76     	; 0x7dc <.L48>

00000790 <.LBB13>:
                if(startTurn(direction)){
     790:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <direction.2>
     794:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <direction.2+0x1>
     798:	0e 94 ba 01 	call	0x374	; 0x374 <startTurn>

0000079c <.LVL47>:
     79c:	89 2b       	or	r24, r25
     79e:	f1 f0       	breq	.+60     	; 0x7dc <.L48>

000007a0 <.Loc.179>:
                    direction = !direction;
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <direction.2>
     7a8:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <direction.2+0x1>
     7ac:	23 2b       	or	r18, r19
     7ae:	11 f0       	breq	.+4      	; 0x7b4 <.L68>
     7b0:	9e 2d       	mov	r25, r14
     7b2:	8f 2d       	mov	r24, r15

000007b4 <.L68>:
     7b4:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <direction.2>
     7b8:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <direction.2+0x1>

000007bc <.Loc.182>:
     7bc:	0f c0       	rjmp	.+30     	; 0x7dc <.L48>

000007be <.L49>:
                setBothStepperMode(Off);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000007c6 <.LVL50>:
                if(!checkNoodstop()) {
     7c6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <checkNoodstop>

000007ca <.LVL51>:
     7ca:	c1 e0       	ldi	r28, 0x01	; 1
     7cc:	d0 e0       	ldi	r29, 0x00	; 0
     7ce:	89 2b       	or	r24, r25
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <.L57>
     7d2:	e7 01       	movw	r28, r14

000007d4 <.L57>:
     7d4:	cc 0f       	add	r28, r28
     7d6:	dd 1f       	adc	r29, r29
     7d8:	cc 0f       	add	r28, r28
     7da:	dd 1f       	adc	r29, r29

000007dc <.L48>:
        if(checkNoodstop()){
     7dc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <checkNoodstop>

000007e0 <.LVL53>:
     7e0:	89 2b       	or	r24, r25
     7e2:	69 f7       	brne	.-38     	; 0x7be <.L49>

000007e4 <.Loc.193>:
        if(mode != Noodstop && mode != ModeOff && isStartButtonPressed()){
     7e4:	c4 30       	cpi	r28, 0x04	; 4
     7e6:	d1 05       	cpc	r29, r1
     7e8:	51 f3       	breq	.-44     	; 0x7be <.L49>

000007ea <.Loc.195>:
     7ea:	20 97       	sbiw	r28, 0x00	; 0
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <.L50>

000007ee <L0^A>:
     7ee:	96 cf       	rjmp	.-212    	; 0x71c <.L69>

000007f0 <.L50>:
                setBothStepperMode(Off);
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000007f8 <.LVL55>:
                if(isStartButtonPressed()){
     7f8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <isStartButtonPressed>

000007fc <.LVL56>:
     7fc:	c8 2f       	mov	r28, r24
     7fe:	d9 2f       	mov	r29, r25

00000800 <.Loc.199>:
     800:	20 97       	sbiw	r28, 0x00	; 0
     802:	61 f3       	breq	.-40     	; 0x7dc <.L48>

00000804 <.LBB14>:
                    int switchState = checkModeSwitchState();
     804:	0e 94 82 02 	call	0x504	; 0x504 <checkModeSwitchState>

00000808 <.LVL57>:
     808:	c8 2f       	mov	r28, r24
     80a:	d9 2f       	mov	r29, r25

0000080c <.Loc.202>:
                    switch(switchState){
     80c:	c1 30       	cpi	r28, 0x01	; 1
     80e:	d1 05       	cpc	r29, r1
     810:	29 f3       	breq	.-54     	; 0x7dc <.L48>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	22 97       	sbiw	r28, 0x02	; 2
     818:	09 f0       	breq	.+2      	; 0x81c <.L56>
     81a:	c7 01       	movw	r24, r14

0000081c <.L56>:
     81c:	ec 01       	movw	r28, r24

0000081e <.Loc.203>:
     81e:	cc 0f       	add	r28, r28
     820:	dd 1f       	adc	r29, r29
     822:	dc cf       	rjmp	.-72     	; 0x7dc <.L48>

00000824 <.L59>:
     824:	03 30       	cpi	r16, 0x03	; 3
     826:	11 05       	cpc	r17, r1
     828:	c9 f6       	brne	.-78     	; 0x7dc <.L48>

0000082a <.Loc.205>:
                        followHand(filterDistance(FrontDistance));
     82a:	c6 01       	movw	r24, r12
     82c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <filterDistance>

00000830 <.LVL61>:
     830:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <followHand>

00000834 <.LVL62>:
                        TurnSignalLeft = 0;
     834:	f0 92 33 02 	sts	0x0233, r15	; 0x800233 <TurnSignalLeft+0x1>
     838:	e0 92 32 02 	sts	0x0232, r14	; 0x800232 <TurnSignalLeft>

0000083c <.Loc.208>:
                        TurnSignalRight = 0;
     83c:	f0 92 31 02 	sts	0x0231, r15	; 0x800231 <TurnSignalRight+0x1>
     840:	e0 92 30 02 	sts	0x0230, r14	; 0x800230 <TurnSignalRight>

00000844 <.Loc.210>:
                        break;
     844:	cb cf       	rjmp	.-106    	; 0x7dc <.L48>

00000846 <.L60>:
                        setBothStepperMode(Off);
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

0000084e <.LVL63>:
                        TurnSignalLeft = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <TurnSignalLeft+0x1>
     856:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <TurnSignalLeft>

0000085a <.Loc.214>:
                        TurnSignalRight = 1;
     85a:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <TurnSignalRight+0x1>
     85e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TurnSignalRight>

00000862 <.Loc.216>:
                        break;
     862:	bc cf       	rjmp	.-136    	; 0x7dc <.L48>

00000864 <.L58>:
                        TurnSignalRight = 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <TurnSignalRight+0x1>
     86c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TurnSignalRight>

00000870 <.Loc.219>:
                        setStepperMode(leftMotor, BackwardStep);
     870:	62 e0       	ldi	r22, 0x02	; 2
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

0000087c <.LVL64>:
                        setStepperMode(rightMotor, Off);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	8b e0       	ldi	r24, 0x0B	; 11
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

00000888 <.LVL65>:
                        break;
     888:	a9 cf       	rjmp	.-174    	; 0x7dc <.L48>

0000088a <.L51>:
                int WorldState = checkSensors();
     88a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <checkSensors>

0000088e <.LVL67>:
     88e:	08 2f       	mov	r16, r24
     890:	19 2f       	mov	r17, r25

00000892 <.Loc.224>:
                switch(WorldState){
     892:	02 30       	cpi	r16, 0x02	; 2
     894:	11 05       	cpc	r17, r1
     896:	b1 f1       	breq	.+108    	; 0x904 <.L63>
     898:	0c f5       	brge	.+66     	; 0x8dc <.L64>
     89a:	01 15       	cp	r16, r1
     89c:	11 05       	cpc	r17, r1
     89e:	49 f1       	breq	.+82     	; 0x8f2 <.L65>
     8a0:	01 30       	cpi	r16, 0x01	; 1
     8a2:	11 05       	cpc	r17, r1
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <.Loc.225>

000008a6 <L0^A>:
     8a6:	9a cf       	rjmp	.-204    	; 0x7dc <.L48>

000008a8 <.Loc.225>:
                        setBothStepperMode(Off);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000008b0 <.LVL69>:
                        TreeSignalLeft = 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TreeSignalLeft+0x1>
     8b8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <TreeSignalLeft>

000008bc <.Loc.228>:
                        setBreaklights(1);
     8bc:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

000008c0 <.LBB16>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c0:	2f ef       	ldi	r18, 0xFF	; 255
     8c2:	83 ed       	ldi	r24, 0xD3	; 211
     8c4:	90 e3       	ldi	r25, 0x30	; 48

000008c6 <.L1^B3>:
     8c6:	21 50       	subi	r18, 0x01	; 1
     8c8:	80 40       	sbci	r24, 0x00	; 0
     8ca:	90 40       	sbci	r25, 0x00	; 0
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <.L1^B3>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <L0^A>

000008d0 <L0^A>:
	...

000008d2 <.LBE16>:
                        TreeSignalLeft = 0;
     8d2:	f0 92 2f 02 	sts	0x022F, r15	; 0x80022f <TreeSignalLeft+0x1>
     8d6:	e0 92 2e 02 	sts	0x022E, r14	; 0x80022e <TreeSignalLeft>

000008da <.Loc.240>:
                        break;
     8da:	80 cf       	rjmp	.-256    	; 0x7dc <.L48>

000008dc <.L64>:
     8dc:	03 30       	cpi	r16, 0x03	; 3
     8de:	11 05       	cpc	r17, r1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <.Loc.241>

000008e2 <L0^A>:
     8e2:	7c cf       	rjmp	.-264    	; 0x7dc <.L48>

000008e4 <.Loc.241>:
                        setBothStepperMode(ForwardStep);
     8e4:	c7 01       	movw	r24, r14
     8e6:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000008ea <.LVL72>:
                        setBreaklights(0);
     8ea:	c7 01       	movw	r24, r14
     8ec:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

000008f0 <.LVL73>:
                        break;
     8f0:	75 cf       	rjmp	.-278    	; 0x7dc <.L48>

000008f2 <.L65>:
                        setBothStepperMode(Off);
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

000008fa <.LVL74>:
                        setBreaklights(1);
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

00000902 <.LVL75>:
                        break;
     902:	6c cf       	rjmp	.-296    	; 0x7dc <.L48>

00000904 <.L63>:
                        setBothStepperMode(Off);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 c6 04 	call	0x98c	; 0x98c <setBothStepperMode>

0000090c <.LVL76>:
                        TreeSignalRight = 1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <TreeSignalRight+0x1>
     914:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <TreeSignalRight>

00000918 <.Loc.250>:
                        setBreaklights(1);
     918:	0e 94 c9 00 	call	0x192	; 0x192 <setBreaklights>

0000091c <.LBB18>:
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	83 ed       	ldi	r24, 0xD3	; 211
     920:	90 e3       	ldi	r25, 0x30	; 48

00000922 <.L1^B4>:
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <.L1^B4>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <L0^A>

0000092c <L0^A>:
	...

0000092e <.LBE18>:
                        TreeSignalRight = 0;
     92e:	f0 92 2d 02 	sts	0x022D, r15	; 0x80022d <TreeSignalRight+0x1>
     932:	e0 92 2c 02 	sts	0x022C, r14	; 0x80022c <TreeSignalRight>

00000936 <.Loc.262>:
                        break;
     936:	e8 01       	movw	r28, r16

00000938 <.Loc.263>:
     938:	51 cf       	rjmp	.-350    	; 0x7dc <.L48>

0000093a <setStepperMode>:
void setBothStepperMode(int mode){
    setStepperMode(leftMotor, mode);
    setStepperMode(rightMotor, mode);
}

void setStepperMode(int motor, int mode){
     93a:	28 2f       	mov	r18, r24
     93c:	39 2f       	mov	r19, r25
     93e:	86 2f       	mov	r24, r22

00000940 <.Loc.2>:
     940:	97 2f       	mov	r25, r23

00000942 <.Loc.3>:

    int state;
    if(mode == Off){
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	91 05       	cpc	r25, r1
     94a:	69 f0       	breq	.+26     	; 0x966 <.L8>

0000094c <.L2>:
        state = 1;
    }


    int** motorLoop;
    switch(motor){
     94c:	2a 30       	cpi	r18, 0x0A	; 10
     94e:	31 05       	cpc	r19, r1
     950:	61 f0       	breq	.+24     	; 0x96a <.L3>
     952:	2b 30       	cpi	r18, 0x0B	; 11
     954:	31 05       	cpc	r19, r1
     956:	81 f0       	breq	.+32     	; 0x978 <.L4>

00000958 <.L5>:
            motorLoop = &rightMotorLoop;
            rightMotorEnabled = state;
            break;
    }

    switch(mode){
     958:	02 97       	sbiw	r24, 0x02	; 2
     95a:	a9 f0       	breq	.+42     	; 0x986 <.L9>
     95c:	88 e1       	ldi	r24, 0x18	; 24
     95e:	92 e0       	ldi	r25, 0x02	; 2

00000960 <.L6>:
        default:
        case ForwardStep:
            *motorLoop = &LoopForward;
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	80 83       	st	Z, r24

00000964 <.Loc.10>:
            break;
        case BackwardStep:
            *motorLoop = &LoopBackwards;
            break;
    }
}
     964:	08 95       	ret

00000966 <.L8>:
    if(mode == Off){
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	f1 cf       	rjmp	.-30     	; 0x94c <.L2>

0000096a <.L3>:
            leftMotorEnabled = state;
     96a:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <leftMotorEnabled>
     96e:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <leftMotorEnabled+0x1>

00000972 <.Loc.15>:
            motorLoop = &leftMotorLoop;
     972:	e6 e0       	ldi	r30, 0x06	; 6
     974:	f2 e0       	ldi	r31, 0x02	; 2

00000976 <.Loc.17>:
            break;
     976:	f0 cf       	rjmp	.-32     	; 0x958 <.L5>

00000978 <.L4>:
            rightMotorEnabled = state;
     978:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <rightMotorEnabled>
     97c:	40 93 01 02 	sts	0x0201, r20	; 0x800201 <rightMotorEnabled+0x1>

00000980 <.Loc.21>:
            motorLoop = &rightMotorLoop;
     980:	e4 e0       	ldi	r30, 0x04	; 4
     982:	f2 e0       	ldi	r31, 0x02	; 2

00000984 <.Loc.23>:
            break;
     984:	e9 cf       	rjmp	.-46     	; 0x958 <.L5>

00000986 <.L9>:
    switch(mode){
     986:	88 e0       	ldi	r24, 0x08	; 8
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	ea cf       	rjmp	.-44     	; 0x960 <.L6>

0000098c <setBothStepperMode>:
void setBothStepperMode(int mode){
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	d8 2f       	mov	r29, r24
     992:	c9 2f       	mov	r28, r25

00000994 <.Loc.27>:
    setStepperMode(leftMotor, mode);
     994:	68 2f       	mov	r22, r24
     996:	79 2f       	mov	r23, r25
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	90 e0       	ldi	r25, 0x00	; 0

0000099c <.Loc.28>:
     99c:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

000009a0 <.LVL10>:
    setStepperMode(rightMotor, mode);
     9a0:	6d 2f       	mov	r22, r29
     9a2:	7c 2f       	mov	r23, r28
     9a4:	8b e0       	ldi	r24, 0x0B	; 11
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

000009ac <.LVL11>:
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <init_timer>:

//Clockspeed = 16.000.000 / 250 / 64 = 1.000
#define Clockspeed 1000
void init_timer(){
    // Use mode 0, clkdiv = 64
    TCCR0A = 0;
     9b2:	14 bc       	out	0x24, r1	; 36

000009b4 <.Loc.34>:
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	85 bd       	out	0x25, r24	; 37

000009b8 <.Loc.36>:

    // Disable PWM output
    OCR0A = 0;
     9b8:	17 bc       	out	0x27, r1	; 39

000009ba <.Loc.38>:
    OCR0B = 0;
     9ba:	18 bc       	out	0x28, r1	; 40

000009bc <.Loc.40>:

    //Overflow interrupt
    TIMSK0 = (1<<TOIE0);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

000009c2 <.Loc.42>:
    TCNT0 = 6;
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	86 bd       	out	0x26, r24	; 38

000009c6 <.Loc.44>:

    sei();
     9c6:	78 94       	sei

000009c8 <.Loc.45>:
}
     9c8:	08 95       	ret

000009ca <initMotorpins>:
}


void initMotorpins(){
    for(int i = MotorLeftStartpin; i < MotorLeftStartpin+4; i++){
        MotorLeftDDR |= (1<<i);
     9ca:	80 9a       	sbi	0x10, 0	; 16

000009cc <.Loc.52>:
     9cc:	81 9a       	sbi	0x10, 1	; 16

000009ce <.Loc.56>:
     9ce:	82 9a       	sbi	0x10, 2	; 16

000009d0 <.Loc.60>:
     9d0:	83 9a       	sbi	0x10, 3	; 16

000009d2 <.LBB3>:
    }

    for(int i = MotorRightStartpin; i < MotorRightStartpin+4; i++){
        MotorRightDDR |= (1<<i);
     9d2:	84 9a       	sbi	0x10, 4	; 16

000009d4 <.Loc.69>:
     9d4:	85 9a       	sbi	0x10, 5	; 16

000009d6 <.Loc.73>:
     9d6:	86 9a       	sbi	0x10, 6	; 16

000009d8 <.Loc.77>:
     9d8:	87 9a       	sbi	0x10, 7	; 16

000009da <.LBE3>:
    }
}
     9da:	08 95       	ret

000009dc <initSteppermotorAVRDriver>:
    initMotorpins();
     9dc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <initMotorpins>

000009e0 <.LVL21>:
    setStepperMode(leftMotor, ForwardStep);
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 9d 04 	call	0x93a	; 0x93a <setStepperMode>

000009ec <.LVL22>:
    init_timer();
     9ec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <init_timer>

000009f0 <.LVL23>:
}
     9f0:	08 95       	ret

000009f2 <LeftStepperNextStep>:

void LeftStepperNextStep(){
    static int position = 0;
    MotorLeftPort &= ~(0b1111<< MotorLeftStartpin);
     9f2:	81 b3       	in	r24, 0x11	; 17
     9f4:	80 7f       	andi	r24, 0xF0	; 240
     9f6:	81 bb       	out	0x11, r24	; 17

000009f8 <.Loc.93>:
    MotorLeftPort |= ((*leftMotorLoop)[position] << MotorLeftStartpin);
     9f8:	81 b3       	in	r24, 0x11	; 17

000009fa <.Loc.94>:
     9fa:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <leftMotorLoop>
     9fe:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <leftMotorLoop+0x1>
     a02:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <position.1>
     a06:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <position.1+0x1>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	e2 0f       	add	r30, r18
     a10:	f3 1f       	adc	r31, r19

00000a12 <.Loc.95>:
     a12:	90 81       	ld	r25, Z
     a14:	89 2b       	or	r24, r25
     a16:	81 bb       	out	0x11, r24	; 17

00000a18 <.Loc.96>:
    position++;
     a18:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <position.1>
     a1c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <position.1+0x1>
     a20:	9c 01       	movw	r18, r24
     a22:	2f 5f       	subi	r18, 0xFF	; 255
     a24:	3f 4f       	sbci	r19, 0xFF	; 255

00000a26 <.Loc.98>:
    if(position == LoopLength) position = 0;
     a26:	07 97       	sbiw	r24, 0x07	; 7
     a28:	29 f0       	breq	.+10     	; 0xa34 <.L17>

00000a2a <.L15>:
    position++;
     a2a:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <position.1+0x1>
     a2e:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <position.1>

00000a32 <.Loc.101>:
}
     a32:	08 95       	ret

00000a34 <.L17>:
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	f8 cf       	rjmp	.-16     	; 0xa2a <.L15>

00000a3a <RightStepperNextStep>:

void RightStepperNextStep(){
    static int position = 0;
    MotorRightPort &= ~(0b1111<<MotorRightStartpin);
     a3a:	81 b3       	in	r24, 0x11	; 17
     a3c:	8f 70       	andi	r24, 0x0F	; 15
     a3e:	81 bb       	out	0x11, r24	; 17

00000a40 <.Loc.106>:
    MotorRightPort |= ((*rightMotorLoop)[position] << MotorRightStartpin);
     a40:	81 b3       	in	r24, 0x11	; 17

00000a42 <.Loc.107>:
     a42:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <rightMotorLoop>
     a46:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <rightMotorLoop+0x1>
     a4a:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <position.0>
     a4e:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <position.0+0x1>
     a52:	22 0f       	add	r18, r18
     a54:	33 1f       	adc	r19, r19
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19

00000a5a <.Loc.108>:
     a5a:	20 81       	ld	r18, Z
     a5c:	31 81       	ldd	r19, Z+1	; 0x01
     a5e:	22 95       	swap	r18
     a60:	32 95       	swap	r19
     a62:	30 7f       	andi	r19, 0xF0	; 240
     a64:	32 27       	eor	r19, r18
     a66:	20 7f       	andi	r18, 0xF0	; 240
     a68:	32 27       	eor	r19, r18

00000a6a <.Loc.109>:
     a6a:	82 2b       	or	r24, r18
     a6c:	81 bb       	out	0x11, r24	; 17

00000a6e <.Loc.110>:
    position++;
     a6e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <position.0>
     a72:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <position.0+0x1>
     a76:	9c 01       	movw	r18, r24
     a78:	2f 5f       	subi	r18, 0xFF	; 255
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255

00000a7c <.Loc.112>:
    if(position == LoopLength) position = 0;
     a7c:	07 97       	sbiw	r24, 0x07	; 7
     a7e:	29 f0       	breq	.+10     	; 0xa8a <.L21>

00000a80 <.L19>:
    position++;
     a80:	30 93 47 02 	sts	0x0247, r19	; 0x800247 <position.0+0x1>
     a84:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <position.0>

00000a88 <.Loc.115>:
}
     a88:	08 95       	ret

00000a8a <.L21>:
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <.L19>

00000a90 <__vector_23>:


ISR(TIMER0_OVF_vect){
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	0b b6       	in	r0, 0x3b	; 59
     a9c:	0f 92       	push	r0
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	5f 93       	push	r21
     aa6:	6f 93       	push	r22
     aa8:	7f 93       	push	r23
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31

00000ab6 <.Loc.117>:
    if(leftMotorEnabled) LeftStepperNextStep();
     ab6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <leftMotorEnabled>
     aba:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <leftMotorEnabled+0x1>
     abe:	89 2b       	or	r24, r25
     ac0:	d9 f4       	brne	.+54     	; 0xaf8 <.L25>

00000ac2 <.L23>:
    if(rightMotorEnabled) RightStepperNextStep();
     ac2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <rightMotorEnabled>
     ac6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <rightMotorEnabled+0x1>
     aca:	89 2b       	or	r24, r25
     acc:	c1 f4       	brne	.+48     	; 0xafe <.L26>

00000ace <.L24>:

    TCNT0 = 6;
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	86 bd       	out	0x26, r24	; 38

00000ad2 <.Loc.123>:
}
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	0b be       	out	0x3b, r0	; 59
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti

00000af8 <.L25>:
    if(leftMotorEnabled) LeftStepperNextStep();
     af8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LeftStepperNextStep>

00000afc <.LVL24>:
     afc:	e2 cf       	rjmp	.-60     	; 0xac2 <.L23>

00000afe <.L26>:
    if(rightMotorEnabled) RightStepperNextStep();
     afe:	0e 94 1d 05 	call	0xa3a	; 0xa3a <RightStepperNextStep>

00000b02 <.LVL25>:
     b02:	e5 cf       	rjmp	.-54     	; 0xace <.L24>

00000b04 <agv_ultrasoon_init>:
volatile uint16_t agv_ultrasoon_voor_midden = 0; //pin A12
volatile uint8_t agv_ultrasoon_current_sensor = 2;

void agv_ultrasoon_init()
{
    cli();
     b04:	f8 94       	cli

00000b06 <.Loc.2>:
    TCCR3A |= (1<<COM3A1) | (1<<WGM31);
     b06:	e0 e9       	ldi	r30, 0x90	; 144
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z

00000b0c <.Loc.3>:
     b0c:	82 68       	ori	r24, 0x82	; 130
     b0e:	80 83       	st	Z, r24

00000b10 <.Loc.4>:
    TCCR3B |= (1<<WGM33) | (1<<CS31) | (1<<WGM32);//wgm33 wgm32 wgm31
     b10:	e1 e9       	ldi	r30, 0x91	; 145
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z

00000b16 <.Loc.5>:
     b16:	8a 61       	ori	r24, 0x1A	; 26
     b18:	80 83       	st	Z, r24

00000b1a <.Loc.6>:
    ICR3 = 32768;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e8       	ldi	r25, 0x80	; 128
     b1e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     b22:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000b26 <.Loc.8>:
    OCR3A = 20;//10microsec
     b26:	84 e1       	ldi	r24, 0x14	; 20
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b2e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000b32 <.Loc.10>:
    OCR3B = 5500;// (10microsec + 480microsec+ marge) *2
     b32:	8c e7       	ldi	r24, 0x7C	; 124
     b34:	95 e1       	ldi	r25, 0x15	; 21
     b36:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     b3a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>

00000b3e <.Loc.12>:
    DDRE |= (1<<PE3);
     b3e:	6b 9a       	sbi	0x0d, 3	; 13

00000b40 <.Loc.14>:
    TIMSK3 |= (1<<ICIE3) | (1<<OCIE3B);
     b40:	e1 e7       	ldi	r30, 0x71	; 113
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z

00000b46 <.Loc.15>:
     b46:	84 62       	ori	r24, 0x24	; 36
     b48:	80 83       	st	Z, r24

00000b4a <.Loc.16>:
    //pin change interrupt:
    PCICR |= (1<<PCIE2);//enables pci 16 tot 23
     b4a:	e8 e6       	ldi	r30, 0x68	; 104
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z

00000b50 <.Loc.17>:
     b50:	84 60       	ori	r24, 0x04	; 4
     b52:	80 83       	st	Z, r24

00000b54 <.Loc.18>:
    sei();
     b54:	78 94       	sei

00000b56 <.Loc.19>:
}
     b56:	08 95       	ret

00000b58 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     b58:	8f 93       	push	r24
     b5a:	8f b7       	in	r24, 0x3f	; 63
     b5c:	8f 93       	push	r24
     b5e:	8b b7       	in	r24, 0x3b	; 59
     b60:	8f 93       	push	r24
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31

00000b66 <.Loc.21>:
    agv_ultrasoon_current_sensor = (agv_ultrasoon_current_sensor<<1);
     b66:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>
     b6a:	88 0f       	add	r24, r24

00000b6c <.Loc.23>:
     b6c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>

00000b70 <.Loc.24>:
    if (agv_ultrasoon_current_sensor == (1<<6))//0b00100000
     b70:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000b74 <.Loc.26>:
     b74:	80 34       	cpi	r24, 0x40	; 64
     b76:	89 f0       	breq	.+34     	; 0xb9a <.L4>

00000b78 <.L3>:
    {
        agv_ultrasoon_current_sensor = 2;

    }
    PCMSK2 = agv_ultrasoon_current_sensor;
     b78:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>
     b7c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000b80 <.Loc.29>:
    //PORTA = agv_ultrasoon_current_sensor;
    TIMSK3 |= (1<<OCIE3B);
     b80:	e1 e7       	ldi	r30, 0x71	; 113
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z

00000b86 <.Loc.30>:
     b86:	84 60       	ori	r24, 0x04	; 4
     b88:	80 83       	st	Z, r24

00000b8a <.Loc.31>:
}
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	8f 91       	pop	r24
     b90:	8b bf       	out	0x3b, r24	; 59
     b92:	8f 91       	pop	r24
     b94:	8f bf       	out	0x3f, r24	; 63
     b96:	8f 91       	pop	r24
     b98:	18 95       	reti

00000b9a <.L4>:
        agv_ultrasoon_current_sensor = 2;
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>
     ba0:	eb cf       	rjmp	.-42     	; 0xb78 <.L3>

00000ba2 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	0b b6       	in	r0, 0x3b	; 59
     bae:	0f 92       	push	r0
     bb0:	2f 93       	push	r18
     bb2:	3f 93       	push	r19
     bb4:	4f 93       	push	r20
     bb6:	5f 93       	push	r21
     bb8:	6f 93       	push	r22
     bba:	7f 93       	push	r23
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
     bc0:	af 93       	push	r26
     bc2:	bf 93       	push	r27
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <L0^A>

00000bce <L0^A>:
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62

00000bd4 <.Loc.35>:
    //zet max naar sensorwaarde
    if(agv_ultrasoon_current_sensor == 0b00000010)
     bd4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000bd8 <.Loc.37>:
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	f1 f1       	breq	.+124    	; 0xc58 <.L9>

00000bdc <.Loc.38>:
    {
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
     bdc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000be0 <.Loc.40>:
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	09 f4       	brne	.+2      	; 0xbe6 <.Loc.41>

00000be4 <L0^A>:
     be4:	87 c0       	rjmp	.+270    	; 0xcf4 <.L10>

00000be6 <.Loc.41>:
    {
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
     be6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000bea <.Loc.43>:
     bea:	80 31       	cpi	r24, 0x10	; 16
     bec:	09 f0       	breq	.+2      	; 0xbf0 <.Loc.44>

00000bee <L0^A>:
     bee:	67 c0       	rjmp	.+206    	; 0xcbe <.L7>

00000bf0 <.Loc.44>:
    {
        agv_ultrasoon_voor_midden = (ICR3 - 4454)/4*0.0343;
     bf0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     bf4:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000bf8 <.Loc.46>:
     bf8:	86 56       	subi	r24, 0x66	; 102
     bfa:	91 41       	sbci	r25, 0x11	; 17

00000bfc <.Loc.47>:
     bfc:	96 95       	lsr	r25
     bfe:	87 95       	ror	r24
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24

00000c04 <.Loc.48>:
     c04:	9c 01       	movw	r18, r24
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	29 83       	std	Y+1, r18	; 0x01
     c0c:	3a 83       	std	Y+2, r19	; 0x02
     c0e:	4b 83       	std	Y+3, r20	; 0x03
     c10:	5c 83       	std	Y+4, r21	; 0x04
     c12:	ca 01       	movw	r24, r20
     c14:	b9 01       	movw	r22, r18
     c16:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatunsisf>

00000c1a <.LVL0>:
     c1a:	28 e2       	ldi	r18, 0x28	; 40
     c1c:	3e e7       	ldi	r19, 0x7E	; 126
     c1e:	4c e0       	ldi	r20, 0x0C	; 12
     c20:	5d e3       	ldi	r21, 0x3D	; 61
     c22:	69 83       	std	Y+1, r22	; 0x01
     c24:	7a 83       	std	Y+2, r23	; 0x02
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	69 81       	ldd	r22, Y+1	; 0x01
     c2c:	7a 81       	ldd	r23, Y+2	; 0x02
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>

00000c36 <.LVL1>:
     c36:	69 83       	std	Y+1, r22	; 0x01
     c38:	7a 83       	std	Y+2, r23	; 0x02
     c3a:	8b 83       	std	Y+3, r24	; 0x03
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	69 81       	ldd	r22, Y+1	; 0x01
     c40:	7a 81       	ldd	r23, Y+2	; 0x02
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>

00000c4a <.LVL2>:
     c4a:	46 2f       	mov	r20, r22
     c4c:	57 2f       	mov	r21, r23
     c4e:	50 93 4b 02 	sts	0x024B, r21	; 0x80024b <agv_ultrasoon_voor_midden+0x1>
     c52:	40 93 4a 02 	sts	0x024A, r20	; 0x80024a <agv_ultrasoon_voor_midden>
     c56:	33 c0       	rjmp	.+102    	; 0xcbe <.L7>

00000c58 <.L9>:
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
     c58:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     c5c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000c60 <.Loc.52>:
     c60:	86 56       	subi	r24, 0x66	; 102
     c62:	91 41       	sbci	r25, 0x11	; 17

00000c64 <.Loc.53>:
     c64:	96 95       	lsr	r25
     c66:	87 95       	ror	r24
     c68:	96 95       	lsr	r25
     c6a:	87 95       	ror	r24

00000c6c <.Loc.54>:
     c6c:	9c 01       	movw	r18, r24
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	29 83       	std	Y+1, r18	; 0x01
     c74:	3a 83       	std	Y+2, r19	; 0x02
     c76:	4b 83       	std	Y+3, r20	; 0x03
     c78:	5c 83       	std	Y+4, r21	; 0x04
     c7a:	ca 01       	movw	r24, r20
     c7c:	b9 01       	movw	r22, r18
     c7e:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatunsisf>

00000c82 <.LVL3>:
     c82:	28 e2       	ldi	r18, 0x28	; 40
     c84:	3e e7       	ldi	r19, 0x7E	; 126
     c86:	4c e0       	ldi	r20, 0x0C	; 12
     c88:	5d e3       	ldi	r21, 0x3D	; 61
     c8a:	69 83       	std	Y+1, r22	; 0x01
     c8c:	7a 83       	std	Y+2, r23	; 0x02
     c8e:	8b 83       	std	Y+3, r24	; 0x03
     c90:	9c 83       	std	Y+4, r25	; 0x04
     c92:	69 81       	ldd	r22, Y+1	; 0x01
     c94:	7a 81       	ldd	r23, Y+2	; 0x02
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	9c 81       	ldd	r25, Y+4	; 0x04
     c9a:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>

00000c9e <.LVL4>:
     c9e:	69 83       	std	Y+1, r22	; 0x01
     ca0:	7a 83       	std	Y+2, r23	; 0x02
     ca2:	8b 83       	std	Y+3, r24	; 0x03
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	69 81       	ldd	r22, Y+1	; 0x01
     ca8:	7a 81       	ldd	r23, Y+2	; 0x02
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>

00000cb2 <.LVL5>:
     cb2:	46 2f       	mov	r20, r22
     cb4:	57 2f       	mov	r21, r23
     cb6:	50 93 4d 02 	sts	0x024D, r21	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     cba:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <agv_ultrasoon_boom_rechts>

00000cbe <.L7>:
    }
    PCMSK2 = 0;
     cbe:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000cc2 <.Loc.58>:

}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0b be       	out	0x3b, r0	; 59
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <.L10>:
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
     cf4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     cf8:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000cfc <.Loc.61>:
     cfc:	86 56       	subi	r24, 0x66	; 102
     cfe:	91 41       	sbci	r25, 0x11	; 17

00000d00 <.Loc.62>:
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	96 95       	lsr	r25
     d06:	87 95       	ror	r24

00000d08 <.Loc.63>:
     d08:	9c 01       	movw	r18, r24
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	29 83       	std	Y+1, r18	; 0x01
     d10:	3a 83       	std	Y+2, r19	; 0x02
     d12:	4b 83       	std	Y+3, r20	; 0x03
     d14:	5c 83       	std	Y+4, r21	; 0x04
     d16:	ca 01       	movw	r24, r20
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatunsisf>

00000d1e <.LVL6>:
     d1e:	28 e2       	ldi	r18, 0x28	; 40
     d20:	3e e7       	ldi	r19, 0x7E	; 126
     d22:	4c e0       	ldi	r20, 0x0C	; 12
     d24:	5d e3       	ldi	r21, 0x3D	; 61
     d26:	69 83       	std	Y+1, r22	; 0x01
     d28:	7a 83       	std	Y+2, r23	; 0x02
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	69 81       	ldd	r22, Y+1	; 0x01
     d30:	7a 81       	ldd	r23, Y+2	; 0x02
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>

00000d3a <.LVL7>:
     d3a:	69 83       	std	Y+1, r22	; 0x01
     d3c:	7a 83       	std	Y+2, r23	; 0x02
     d3e:	8b 83       	std	Y+3, r24	; 0x03
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	7a 81       	ldd	r23, Y+2	; 0x02
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>

00000d4e <.LVL8>:
     d4e:	46 2f       	mov	r20, r22
     d50:	57 2f       	mov	r21, r23
     d52:	50 93 4f 02 	sts	0x024F, r21	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     d56:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <agv_ultrasoon_boom_links>
     d5a:	b1 cf       	rjmp	.-158    	; 0xcbe <.L7>

00000d5c <__vector_11>:

ISR(PCINT2_vect)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	0b b6       	in	r0, 0x3b	; 59
     d68:	0f 92       	push	r0
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <L0^A>

00000d88 <L0^A>:
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62

00000d8e <.Loc.66>:
    if(agv_ultrasoon_current_sensor == 0b00000010)
     d8e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000d92 <.Loc.68>:
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	09 f4       	brne	.+2      	; 0xd98 <.Loc.69>

00000d96 <L0^A>:
     d96:	3f c0       	rjmp	.+126    	; 0xe16 <.L15>

00000d98 <.Loc.69>:
    {
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
        PORTA &= ~(0b00000001);
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
     d98:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000d9c <.Loc.71>:
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	09 f4       	brne	.+2      	; 0xda2 <.Loc.72>

00000da0 <L0^A>:
     da0:	8e c0       	rjmp	.+284    	; 0xebe <.L16>

00000da2 <.Loc.72>:
    {
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
        PORTA &= ~(0b00000010);
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
     da2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000da6 <.Loc.74>:
     da6:	80 31       	cpi	r24, 0x10	; 16
     da8:	09 f0       	breq	.+2      	; 0xdac <.Loc.75>

00000daa <L0^A>:
     daa:	69 c0       	rjmp	.+210    	; 0xe7e <.L13>

00000dac <.Loc.75>:
    {
        agv_ultrasoon_voor_midden = (TCNT3 - 4454)/4*0.0343;
     dac:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     db0:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00000db4 <.Loc.77>:
     db4:	86 56       	subi	r24, 0x66	; 102
     db6:	91 41       	sbci	r25, 0x11	; 17

00000db8 <.Loc.78>:
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24

00000dc0 <.Loc.79>:
     dc0:	9c 01       	movw	r18, r24
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	29 83       	std	Y+1, r18	; 0x01
     dc8:	3a 83       	std	Y+2, r19	; 0x02
     dca:	4b 83       	std	Y+3, r20	; 0x03
     dcc:	5c 83       	std	Y+4, r21	; 0x04
     dce:	ca 01       	movw	r24, r20
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatunsisf>

00000dd6 <.LVL9>:
     dd6:	28 e2       	ldi	r18, 0x28	; 40
     dd8:	3e e7       	ldi	r19, 0x7E	; 126
     dda:	4c e0       	ldi	r20, 0x0C	; 12
     ddc:	5d e3       	ldi	r21, 0x3D	; 61
     dde:	69 83       	std	Y+1, r22	; 0x01
     de0:	7a 83       	std	Y+2, r23	; 0x02
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	69 81       	ldd	r22, Y+1	; 0x01
     de8:	7a 81       	ldd	r23, Y+2	; 0x02
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>

00000df2 <.LVL10>:
     df2:	69 83       	std	Y+1, r22	; 0x01
     df4:	7a 83       	std	Y+2, r23	; 0x02
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	9c 83       	std	Y+4, r25	; 0x04
     dfa:	69 81       	ldd	r22, Y+1	; 0x01
     dfc:	7a 81       	ldd	r23, Y+2	; 0x02
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>

00000e06 <.LVL11>:
     e06:	46 2f       	mov	r20, r22
     e08:	57 2f       	mov	r21, r23
     e0a:	50 93 4b 02 	sts	0x024B, r21	; 0x80024b <agv_ultrasoon_voor_midden+0x1>
     e0e:	40 93 4a 02 	sts	0x024A, r20	; 0x80024a <agv_ultrasoon_voor_midden>

00000e12 <.Loc.81>:
        PORTA &= ~(0b00001000);
     e12:	13 98       	cbi	0x02, 3	; 2
     e14:	34 c0       	rjmp	.+104    	; 0xe7e <.L13>

00000e16 <.L15>:
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
     e16:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     e1a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00000e1e <.Loc.85>:
     e1e:	86 56       	subi	r24, 0x66	; 102
     e20:	91 41       	sbci	r25, 0x11	; 17

00000e22 <.Loc.86>:
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	96 95       	lsr	r25
     e28:	87 95       	ror	r24

00000e2a <.Loc.87>:
     e2a:	9c 01       	movw	r18, r24
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	29 83       	std	Y+1, r18	; 0x01
     e32:	3a 83       	std	Y+2, r19	; 0x02
     e34:	4b 83       	std	Y+3, r20	; 0x03
     e36:	5c 83       	std	Y+4, r21	; 0x04
     e38:	ca 01       	movw	r24, r20
     e3a:	b9 01       	movw	r22, r18
     e3c:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatunsisf>

00000e40 <.LVL12>:
     e40:	28 e2       	ldi	r18, 0x28	; 40
     e42:	3e e7       	ldi	r19, 0x7E	; 126
     e44:	4c e0       	ldi	r20, 0x0C	; 12
     e46:	5d e3       	ldi	r21, 0x3D	; 61
     e48:	69 83       	std	Y+1, r22	; 0x01
     e4a:	7a 83       	std	Y+2, r23	; 0x02
     e4c:	8b 83       	std	Y+3, r24	; 0x03
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	69 81       	ldd	r22, Y+1	; 0x01
     e52:	7a 81       	ldd	r23, Y+2	; 0x02
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>

00000e5c <.LVL13>:
     e5c:	69 83       	std	Y+1, r22	; 0x01
     e5e:	7a 83       	std	Y+2, r23	; 0x02
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	69 81       	ldd	r22, Y+1	; 0x01
     e66:	7a 81       	ldd	r23, Y+2	; 0x02
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>

00000e70 <.LVL14>:
     e70:	46 2f       	mov	r20, r22
     e72:	57 2f       	mov	r21, r23
     e74:	50 93 4d 02 	sts	0x024D, r21	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     e78:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <agv_ultrasoon_boom_rechts>

00000e7c <.Loc.89>:
        PORTA &= ~(0b00000001);
     e7c:	10 98       	cbi	0x02, 0	; 2

00000e7e <.L13>:
    }
    //check welke sensor en schrijf timer3 waarde naar sensorwaarde
    TIMSK3 &= ~(1<<ICIE3);
     e7e:	e1 e7       	ldi	r30, 0x71	; 113
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	80 83       	st	Z, r24

00000e88 <.Loc.93>:
    //zet timer3 overflow flag uit
    PCMSK2 = 0;
     e88:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000e8c <.Loc.95>:
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0b be       	out	0x3b, r0	; 59
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <.L16>:
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
     ebe:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     ec2:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00000ec6 <.Loc.98>:
     ec6:	86 56       	subi	r24, 0x66	; 102
     ec8:	91 41       	sbci	r25, 0x11	; 17

00000eca <.Loc.99>:
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24

00000ed2 <.Loc.100>:
     ed2:	9c 01       	movw	r18, r24
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	29 83       	std	Y+1, r18	; 0x01
     eda:	3a 83       	std	Y+2, r19	; 0x02
     edc:	4b 83       	std	Y+3, r20	; 0x03
     ede:	5c 83       	std	Y+4, r21	; 0x04
     ee0:	ca 01       	movw	r24, r20
     ee2:	b9 01       	movw	r22, r18
     ee4:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatunsisf>

00000ee8 <.LVL15>:
     ee8:	28 e2       	ldi	r18, 0x28	; 40
     eea:	3e e7       	ldi	r19, 0x7E	; 126
     eec:	4c e0       	ldi	r20, 0x0C	; 12
     eee:	5d e3       	ldi	r21, 0x3D	; 61
     ef0:	69 83       	std	Y+1, r22	; 0x01
     ef2:	7a 83       	std	Y+2, r23	; 0x02
     ef4:	8b 83       	std	Y+3, r24	; 0x03
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>

00000f04 <.LVL16>:
     f04:	69 83       	std	Y+1, r22	; 0x01
     f06:	7a 83       	std	Y+2, r23	; 0x02
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	69 81       	ldd	r22, Y+1	; 0x01
     f0e:	7a 81       	ldd	r23, Y+2	; 0x02
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	0e 94 94 07 	call	0xf28	; 0xf28 <__fixunssfsi>

00000f18 <.LVL17>:
     f18:	46 2f       	mov	r20, r22
     f1a:	57 2f       	mov	r21, r23
     f1c:	50 93 4f 02 	sts	0x024F, r21	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     f20:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <agv_ultrasoon_boom_links>

00000f24 <.Loc.102>:
        PORTA &= ~(0b00000010);
     f24:	11 98       	cbi	0x02, 1	; 2
     f26:	ab cf       	rjmp	.-170    	; 0xe7e <.L13>

00000f28 <__fixunssfsi>:
     f28:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_splitA>
     f2c:	88 f0       	brcs	.+34     	; 0xf50 <.L_err>
     f2e:	9f 57       	subi	r25, 0x7F	; 127
     f30:	98 f0       	brcs	.+38     	; 0xf58 <.L_zr>
     f32:	b9 2f       	mov	r27, r25
     f34:	99 27       	eor	r25, r25
     f36:	b7 51       	subi	r27, 0x17	; 23
     f38:	b0 f0       	brcs	.+44     	; 0xf66 <.L4^B1>
     f3a:	e1 f0       	breq	.+56     	; 0xf74 <.L_sign>

00000f3c <.L1^B1>:
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	1a f0       	brmi	.+6      	; 0xf4c <.L2^B1>
     f46:	ba 95       	dec	r27
     f48:	c9 f7       	brne	.-14     	; 0xf3c <.L1^B1>
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <.L_sign>

00000f4c <.L2^B1>:
     f4c:	b1 30       	cpi	r27, 0x01	; 1
     f4e:	91 f0       	breq	.+36     	; 0xf74 <.L_sign>

00000f50 <.L_err>:
     f50:	0e 94 22 08 	call	0x1044	; 0x1044 <__fp_zero>
     f54:	b1 e0       	ldi	r27, 0x01	; 1
     f56:	08 95       	ret

00000f58 <.L_zr>:
     f58:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_zero>

00000f5c <.L3^B1>:
     f5c:	67 2f       	mov	r22, r23
     f5e:	78 2f       	mov	r23, r24
     f60:	88 27       	eor	r24, r24
     f62:	b8 5f       	subi	r27, 0xF8	; 248
     f64:	39 f0       	breq	.+14     	; 0xf74 <.L_sign>

00000f66 <.L4^B1>:
     f66:	b9 3f       	cpi	r27, 0xF9	; 249
     f68:	cc f3       	brlt	.-14     	; 0xf5c <.L3^B1>

00000f6a <.L5^B1>:
     f6a:	86 95       	lsr	r24
     f6c:	77 95       	ror	r23
     f6e:	67 95       	ror	r22
     f70:	b3 95       	inc	r27
     f72:	d9 f7       	brne	.-10     	; 0xf6a <.L5^B1>

00000f74 <.L_sign>:
     f74:	3e f4       	brtc	.+14     	; 0xf84 <.L6^B1>
     f76:	90 95       	com	r25
     f78:	80 95       	com	r24
     f7a:	70 95       	com	r23
     f7c:	61 95       	neg	r22
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255

00000f84 <.L6^B1>:
     f84:	08 95       	ret

00000f86 <__floatunsisf>:
     f86:	e8 94       	clt
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <.L1^B1>

00000f8a <__floatsisf>:
     f8a:	97 fb       	bst	r25, 7
     f8c:	3e f4       	brtc	.+14     	; 0xf9c <.L1^B1>
     f8e:	90 95       	com	r25
     f90:	80 95       	com	r24
     f92:	70 95       	com	r23
     f94:	61 95       	neg	r22
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255

00000f9c <.L1^B1>:
     f9c:	99 23       	and	r25, r25
     f9e:	a9 f0       	breq	.+42     	; 0xfca <.L4^B1>
     fa0:	f9 2f       	mov	r31, r25
     fa2:	96 e9       	ldi	r25, 0x96	; 150
     fa4:	bb 27       	eor	r27, r27

00000fa6 <.L2^B1>:
     fa6:	93 95       	inc	r25
     fa8:	f6 95       	lsr	r31
     faa:	87 95       	ror	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	b7 95       	ror	r27
     fb2:	f1 11       	cpse	r31, r1
     fb4:	f8 cf       	rjmp	.-16     	; 0xfa6 <.L2^B1>
     fb6:	fa f4       	brpl	.+62     	; 0xff6 <.L_pack>
     fb8:	bb 0f       	add	r27, r27
     fba:	11 f4       	brne	.+4      	; 0xfc0 <.L3^B1>
     fbc:	60 ff       	sbrs	r22, 0
     fbe:	1b c0       	rjmp	.+54     	; 0xff6 <.L_pack>

00000fc0 <.L3^B1>:
     fc0:	6f 5f       	subi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	8f 4f       	sbci	r24, 0xFF	; 255
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	16 c0       	rjmp	.+44     	; 0xff6 <.L_pack>

00000fca <.L4^B1>:
     fca:	88 23       	and	r24, r24
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <.L5^B1>
     fce:	96 e9       	ldi	r25, 0x96	; 150
     fd0:	11 c0       	rjmp	.+34     	; 0xff4 <.L8^B1>

00000fd2 <.L5^B1>:
     fd2:	77 23       	and	r23, r23
     fd4:	21 f0       	breq	.+8      	; 0xfde <.L6^B1>
     fd6:	9e e8       	ldi	r25, 0x8E	; 142
     fd8:	87 2f       	mov	r24, r23
     fda:	76 2f       	mov	r23, r22
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <.L7^B1>

00000fde <.L6^B1>:
     fde:	66 23       	and	r22, r22
     fe0:	71 f0       	breq	.+28     	; 0xffe <.L9^B1>
     fe2:	96 e8       	ldi	r25, 0x86	; 134
     fe4:	86 2f       	mov	r24, r22
     fe6:	70 e0       	ldi	r23, 0x00	; 0

00000fe8 <.L7^B1>:
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	2a f0       	brmi	.+10     	; 0xff6 <.L_pack>

00000fec <.L10^B1>:
     fec:	9a 95       	dec	r25
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	88 1f       	adc	r24, r24

00000ff4 <.L8^B1>:
     ff4:	da f7       	brpl	.-10     	; 0xfec <.L10^B1>

00000ff6 <.L_pack>:
     ff6:	88 0f       	add	r24, r24
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	97 f9       	bld	r25, 7

00000ffe <.L9^B1>:
     ffe:	08 95       	ret

00001000 <__fp_split3>:
    1000:	57 fd       	sbrc	r21, 7
    1002:	90 58       	subi	r25, 0x80	; 128
    1004:	44 0f       	add	r20, r20
    1006:	55 1f       	adc	r21, r21
    1008:	59 f0       	breq	.+22     	; 0x1020 <.L4^B1>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	71 f0       	breq	.+28     	; 0x102a <.L5^B1>

0000100e <.L1^B1>:
    100e:	47 95       	ror	r20

00001010 <__fp_splitA>:
    1010:	88 0f       	add	r24, r24
    1012:	97 fb       	bst	r25, 7
    1014:	99 1f       	adc	r25, r25
    1016:	61 f0       	breq	.+24     	; 0x1030 <.L6^B1>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	79 f0       	breq	.+30     	; 0x103a <.L7^B1>

0000101c <.L3^B1>:
    101c:	87 95       	ror	r24
    101e:	08 95       	ret

00001020 <.L4^B1>:
    1020:	12 16       	cp	r1, r18
    1022:	13 06       	cpc	r1, r19
    1024:	14 06       	cpc	r1, r20
    1026:	55 1f       	adc	r21, r21
    1028:	f2 cf       	rjmp	.-28     	; 0x100e <.L1^B1>

0000102a <.L5^B1>:
    102a:	46 95       	lsr	r20
    102c:	f1 df       	rcall	.-30     	; 0x1010 <__fp_splitA>
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <.L8^B1>

00001030 <.L6^B1>:
    1030:	16 16       	cp	r1, r22
    1032:	17 06       	cpc	r1, r23
    1034:	18 06       	cpc	r1, r24
    1036:	99 1f       	adc	r25, r25
    1038:	f1 cf       	rjmp	.-30     	; 0x101c <.L3^B1>

0000103a <.L7^B1>:
    103a:	86 95       	lsr	r24
    103c:	71 05       	cpc	r23, r1
    103e:	61 05       	cpc	r22, r1

00001040 <.L8^B1>:
    1040:	08 94       	sec
    1042:	08 95       	ret

00001044 <__fp_zero>:
    1044:	e8 94       	clt

00001046 <__fp_szero>:
    1046:	bb 27       	eor	r27, r27
    1048:	66 27       	eor	r22, r22
    104a:	77 27       	eor	r23, r23
    104c:	cb 01       	movw	r24, r22
    104e:	97 f9       	bld	r25, 7
    1050:	08 95       	ret

00001052 <__mulsf3>:
    1052:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3x>
    1056:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_round>

0000105a <.L^B1>:
    105a:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_pscA>
    105e:	38 f0       	brcs	.+14     	; 0x106e <.L1^B1>
    1060:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscB>
    1064:	20 f0       	brcs	.+8      	; 0x106e <.L1^B1>
    1066:	95 23       	and	r25, r21
    1068:	11 f0       	breq	.+4      	; 0x106e <.L1^B1>
    106a:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>

0000106e <.L1^B1>:
    106e:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_nan>

00001072 <.L2^B1>:
    1072:	11 24       	eor	r1, r1
    1074:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>

00001078 <__mulsf3x>:
    1078:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
    107c:	70 f3       	brcs	.-36     	; 0x105a <.L^B1>

0000107e <__mulsf3_pse>:
    107e:	95 9f       	mul	r25, r21
    1080:	c1 f3       	breq	.-16     	; 0x1072 <.L2^B1>
    1082:	95 0f       	add	r25, r21
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	55 1f       	adc	r21, r21
    1088:	62 9f       	mul	r22, r18
    108a:	f0 01       	movw	r30, r0
    108c:	72 9f       	mul	r23, r18
    108e:	bb 27       	eor	r27, r27
    1090:	f0 0d       	add	r31, r0
    1092:	b1 1d       	adc	r27, r1
    1094:	63 9f       	mul	r22, r19
    1096:	aa 27       	eor	r26, r26
    1098:	f0 0d       	add	r31, r0
    109a:	b1 1d       	adc	r27, r1
    109c:	aa 1f       	adc	r26, r26
    109e:	64 9f       	mul	r22, r20
    10a0:	66 27       	eor	r22, r22
    10a2:	b0 0d       	add	r27, r0
    10a4:	a1 1d       	adc	r26, r1
    10a6:	66 1f       	adc	r22, r22
    10a8:	82 9f       	mul	r24, r18
    10aa:	22 27       	eor	r18, r18
    10ac:	b0 0d       	add	r27, r0
    10ae:	a1 1d       	adc	r26, r1
    10b0:	62 1f       	adc	r22, r18
    10b2:	73 9f       	mul	r23, r19
    10b4:	b0 0d       	add	r27, r0
    10b6:	a1 1d       	adc	r26, r1
    10b8:	62 1f       	adc	r22, r18
    10ba:	83 9f       	mul	r24, r19
    10bc:	a0 0d       	add	r26, r0
    10be:	61 1d       	adc	r22, r1
    10c0:	22 1f       	adc	r18, r18
    10c2:	74 9f       	mul	r23, r20
    10c4:	33 27       	eor	r19, r19
    10c6:	a0 0d       	add	r26, r0
    10c8:	61 1d       	adc	r22, r1
    10ca:	23 1f       	adc	r18, r19
    10cc:	84 9f       	mul	r24, r20
    10ce:	60 0d       	add	r22, r0
    10d0:	21 1d       	adc	r18, r1
    10d2:	82 2f       	mov	r24, r18
    10d4:	76 2f       	mov	r23, r22
    10d6:	6a 2f       	mov	r22, r26
    10d8:	11 24       	eor	r1, r1
    10da:	9f 57       	subi	r25, 0x7F	; 127
    10dc:	50 40       	sbci	r21, 0x00	; 0
    10de:	9a f0       	brmi	.+38     	; 0x1106 <.L13^B1>
    10e0:	f1 f0       	breq	.+60     	; 0x111e <.L15^B1>

000010e2 <.L10^B1>:
    10e2:	88 23       	and	r24, r24
    10e4:	4a f0       	brmi	.+18     	; 0x10f8 <.L11^B1>
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	bb 1f       	adc	r27, r27
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	a9 f7       	brne	.-22     	; 0x10e2 <.L10^B1>

000010f8 <.L11^B1>:
    10f8:	9e 3f       	cpi	r25, 0xFE	; 254
    10fa:	51 05       	cpc	r21, r1
    10fc:	80 f0       	brcs	.+32     	; 0x111e <.L15^B1>
    10fe:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>

00001102 <.L12^B1>:
    1102:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>

00001106 <.L13^B1>:
    1106:	5f 3f       	cpi	r21, 0xFF	; 255
    1108:	e4 f3       	brlt	.-8      	; 0x1102 <.L12^B1>
    110a:	98 3e       	cpi	r25, 0xE8	; 232
    110c:	d4 f3       	brlt	.-12     	; 0x1102 <.L12^B1>

0000110e <.L14^B1>:
    110e:	86 95       	lsr	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	b7 95       	ror	r27
    1116:	f7 95       	ror	r31
    1118:	e7 95       	ror	r30
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	c1 f7       	brne	.-16     	; 0x110e <.L14^B1>

0000111e <.L15^B1>:
    111e:	fe 2b       	or	r31, r30
    1120:	88 0f       	add	r24, r24
    1122:	91 1d       	adc	r25, r1
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__fp_inf>:
    112c:	97 f9       	bld	r25, 7
    112e:	9f 67       	ori	r25, 0x7F	; 127
    1130:	80 e8       	ldi	r24, 0x80	; 128
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	08 95       	ret

00001138 <__fp_nan>:
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	80 ec       	ldi	r24, 0xC0	; 192
    113c:	08 95       	ret

0000113e <__fp_pscA>:
    113e:	00 24       	eor	r0, r0
    1140:	0a 94       	dec	r0
    1142:	16 16       	cp	r1, r22
    1144:	17 06       	cpc	r1, r23
    1146:	18 06       	cpc	r1, r24
    1148:	09 06       	cpc	r0, r25
    114a:	08 95       	ret

0000114c <__fp_pscB>:
    114c:	00 24       	eor	r0, r0
    114e:	0a 94       	dec	r0
    1150:	12 16       	cp	r1, r18
    1152:	13 06       	cpc	r1, r19
    1154:	14 06       	cpc	r1, r20
    1156:	05 06       	cpc	r0, r21
    1158:	08 95       	ret

0000115a <__fp_round>:
    115a:	09 2e       	mov	r0, r25
    115c:	03 94       	inc	r0
    115e:	00 0c       	add	r0, r0
    1160:	11 f4       	brne	.+4      	; 0x1166 <.L1^B1>
    1162:	88 23       	and	r24, r24
    1164:	52 f0       	brmi	.+20     	; 0x117a <.L3^B1>

00001166 <.L1^B1>:
    1166:	bb 0f       	add	r27, r27
    1168:	40 f4       	brcc	.+16     	; 0x117a <.L3^B1>
    116a:	bf 2b       	or	r27, r31
    116c:	11 f4       	brne	.+4      	; 0x1172 <.L2^B1>
    116e:	60 ff       	sbrs	r22, 0
    1170:	04 c0       	rjmp	.+8      	; 0x117a <.L3^B1>

00001172 <.L2^B1>:
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255

0000117a <.L3^B1>:
    117a:	08 95       	ret

0000117c <_exit>:
    117c:	f8 94       	cli

0000117e <__stop_program>:
    117e:	ff cf       	rjmp	.-2      	; 0x117e <__stop_program>
