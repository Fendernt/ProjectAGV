
bin\Debug\ProjectAGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  000017a4  00001858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800234  00800234  0000188c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000188c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000178  00000000  00000000  000018e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00002888  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000015bd  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000028b6  00000000  00000000  000058a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000005fc  00000000  00000000  0000815c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000bc0  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000210  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000090b  00000000  00000000  00009528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000048  00000000  00000000  00009e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 07 08 	jmp	0x100e	; 0x100e <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e4 ea       	ldi	r30, 0xA4	; 164

000000fc <.Loc.4>:
      fc:	f7 e1       	ldi	r31, 0x17	; 23

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a4 33       	cpi	r26, 0x34	; 52

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a4 e3       	ldi	r26, 0x34	; 52

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	a4 37       	cpi	r26, 0x74	; 116

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 a8 04 	call	0x950	; 0x950 <main>
     122:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initDisplay>:
                      0b01000001, 0b00011111, 0b00000001,
                      0b00001001, 0b11111101};

void initDisplay (void)
{
    DDRH |= BV(SFTCLK) | BV(LCHCLK);
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	f1 e0       	ldi	r31, 0x01	; 1
     12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
     130:	80 66       	ori	r24, 0x60	; 96
     132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
    DDRB |= BV(DATAIN);
     134:	24 9a       	sbi	0x04, 4	; 4

00000136 <.Loc.5>:

    disablePin(SFTPORT, SFTCLK);
     136:	e2 e0       	ldi	r30, 0x02	; 2
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	80 81       	ld	r24, Z
     13c:	8f 7b       	andi	r24, 0xBF	; 191
     13e:	80 83       	st	Z, r24

00000140 <.Loc.6>:
    disablePin(LTCHPORT, LCHCLK);
     140:	80 81       	ld	r24, Z
     142:	8f 7d       	andi	r24, 0xDF	; 223
     144:	80 83       	st	Z, r24

00000146 <.Loc.7>:
}
     146:	08 95       	ret

00000148 <send_data>:
#define LCHCLK PH5 //pin 8 (latchclk)


void send_data(char data)
{
    for(int i = 0; i < 8; i++)
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0

0000014c <.Loc.13>:
    {
        if((data & (1<<i))){
     14c:	68 2f       	mov	r22, r24
     14e:	88 0f       	add	r24, r24
     150:	77 0b       	sbc	r23, r23

00000152 <.Loc.14>:
            setPin(DataPORT, DATAIN);
        } else {
            disablePin(DataPORT, DATAIN);
        }

        setPin(SFTPORT, SFTCLK);
     152:	e2 e0       	ldi	r30, 0x02	; 2
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	0c c0       	rjmp	.+24     	; 0x170 <.L5>

00000158 <.L3>:
            disablePin(DataPORT, DATAIN);
     158:	2c 98       	cbi	0x05, 4	; 5

0000015a <.L4>:
        setPin(SFTPORT, SFTCLK);
     15a:	90 81       	ld	r25, Z
     15c:	90 64       	ori	r25, 0x40	; 64
     15e:	90 83       	st	Z, r25

00000160 <.Loc.17>:
        disablePin(SFTPORT, SFTCLK);
     160:	90 81       	ld	r25, Z
     162:	9f 7b       	andi	r25, 0xBF	; 191
     164:	90 83       	st	Z, r25

00000166 <.Loc.18>:
    for(int i = 0; i < 8; i++)
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255

0000016a <.Loc.19>:
     16a:	28 30       	cpi	r18, 0x08	; 8
     16c:	31 05       	cpc	r19, r1
     16e:	59 f0       	breq	.+22     	; 0x186 <.L7>

00000170 <.L5>:
        if((data & (1<<i))){
     170:	ab 01       	movw	r20, r22
     172:	02 2e       	mov	r0, r18
     174:	02 c0       	rjmp	.+4      	; 0x17a <.L2^B1>

00000176 <.L1^B1>:
     176:	55 95       	asr	r21
     178:	47 95       	ror	r20

0000017a <.L2^B1>:
     17a:	0a 94       	dec	r0
     17c:	e2 f7       	brpl	.-8      	; 0x176 <.L1^B1>

0000017e <.Loc.22>:
     17e:	40 ff       	sbrs	r20, 0
     180:	eb cf       	rjmp	.-42     	; 0x158 <.L3>

00000182 <.Loc.23>:
            setPin(DataPORT, DATAIN);
     182:	2c 9a       	sbi	0x05, 4	; 5
     184:	ea cf       	rjmp	.-44     	; 0x15a <.L4>

00000186 <.L7>:
    }
}
     186:	08 95       	ret

00000188 <send_enable>:

void send_enable(int num)
{
    send_data(1<<(3+num));
     188:	9c 01       	movw	r18, r24
     18a:	2d 5f       	subi	r18, 0xFD	; 253
     18c:	3f 4f       	sbci	r19, 0xFF	; 255

0000018e <.Loc.29>:
     18e:	81 e0       	ldi	r24, 0x01	; 1

00000190 <.Loc.30>:
     190:	01 c0       	rjmp	.+2      	; 0x194 <.L2^B2>

00000192 <.L1^B2>:
     192:	88 0f       	add	r24, r24

00000194 <.L2^B2>:
     194:	2a 95       	dec	r18
     196:	ea f7       	brpl	.-6      	; 0x192 <.L1^B2>
     198:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

0000019c <.LVL6>:
}
     19c:	08 95       	ret

0000019e <setLatch>:

void setLatch(void){
    setPin(LTCHPORT, LCHCLK);
     19e:	e2 e0       	ldi	r30, 0x02	; 2
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	80 81       	ld	r24, Z
     1a4:	80 62       	ori	r24, 0x20	; 32
     1a6:	80 83       	st	Z, r24

000001a8 <.Loc.34>:
    disablePin(LTCHPORT, LCHCLK);
     1a8:	80 81       	ld	r24, Z
     1aa:	8f 7d       	andi	r24, 0xDF	; 223
     1ac:	80 83       	st	Z, r24

000001ae <.Loc.35>:
}
     1ae:	08 95       	ret

000001b0 <display>:

void display(int data)
{
     1b0:	8f 92       	push	r8
     1b2:	9f 92       	push	r9
     1b4:	af 92       	push	r10
     1b6:	bf 92       	push	r11
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	c8 2f       	mov	r28, r24
     1ca:	d9 2f       	mov	r29, r25

000001cc <.Loc.38>:
    int pos = 0;
    int negative = 0;

    if(data == 0){
     1cc:	20 97       	sbiw	r28, 0x00	; 0
     1ce:	e1 f1       	breq	.+120    	; 0x248 <.L18>

000001d0 <.Loc.42>:
        send_enable(1);
        setLatch();
        return;
    }

    if(data < 0 && data > -1000){
     1d0:	c9 31       	cpi	r28, 0x19	; 25
     1d2:	8c ef       	ldi	r24, 0xFC	; 252
     1d4:	d8 07       	cpc	r29, r24

000001d6 <.Loc.44>:
     1d6:	08 f4       	brcc	.+2      	; 0x1da <.Loc.45>

000001d8 <L0^A>:
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <.L13>

000001da <.Loc.45>:
        data *= -1;
     1da:	d1 95       	neg	r29
     1dc:	c1 95       	neg	r28
     1de:	d1 09       	sbc	r29, r1

000001e0 <.Loc.47>:
        negative = 1;
     1e0:	88 24       	eor	r8, r8
     1e2:	83 94       	inc	r8
     1e4:	91 2c       	mov	r9, r1

000001e6 <.L15>:
    int negative = 0;
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	10 e0       	ldi	r17, 0x00	; 0

000001ea <.Loc.51>:
    }

    while(data > 0){
        send_data(numberCodes[data%10]);
     1ea:	0f 2e       	mov	r0, r31
     1ec:	fa e0       	ldi	r31, 0x0A	; 10
     1ee:	cf 2e       	mov	r12, r31
     1f0:	d1 2c       	mov	r13, r1
     1f2:	f0 2d       	mov	r31, r0

000001f4 <.L14>:
     1f4:	ce 01       	movw	r24, r28
     1f6:	b6 01       	movw	r22, r12
     1f8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__divmodhi4>
     1fc:	a6 2e       	mov	r10, r22
     1fe:	b7 2e       	mov	r11, r23

00000200 <.Loc.54>:
     200:	fc 01       	movw	r30, r24
     202:	e0 50       	subi	r30, 0x00	; 0
     204:	fe 4f       	sbci	r31, 0xFE	; 254
     206:	80 81       	ld	r24, Z
     208:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

0000020c <.LVL13>:
        data /= 10;
     20c:	7e 01       	movw	r14, r28

0000020e <.Loc.56>:
     20e:	ca 2d       	mov	r28, r10

00000210 <.Loc.57>:
     210:	db 2d       	mov	r29, r11

00000212 <.Loc.58>:
        send_enable(++pos);
     212:	58 01       	movw	r10, r16

00000214 <.Loc.59>:
     214:	0f 5f       	subi	r16, 0xFF	; 255
     216:	1f 4f       	sbci	r17, 0xFF	; 255

00000218 <.Loc.60>:
     218:	c8 01       	movw	r24, r16
     21a:	0e 94 c4 00 	call	0x188	; 0x188 <send_enable>

0000021e <.LVL18>:
        setLatch();
     21e:	0e 94 cf 00 	call	0x19e	; 0x19e <setLatch>

00000222 <.LVL19>:
    while(data > 0){
     222:	8a e0       	ldi	r24, 0x0A	; 10
     224:	e8 16       	cp	r14, r24
     226:	f1 04       	cpc	r15, r1
     228:	2c f7       	brge	.-54     	; 0x1f4 <.L14>

0000022a <.Loc.63>:
    }

    if(negative){
     22a:	89 28       	or	r8, r9
     22c:	c1 f4       	brne	.+48     	; 0x25e <.L19>

0000022e <.L10>:
        send_data(numberCodes[10]);
        send_enable(++pos);
        setLatch();
    }
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	bf 90       	pop	r11
     240:	af 90       	pop	r10
     242:	9f 90       	pop	r9
     244:	8f 90       	pop	r8
     246:	08 95       	ret

00000248 <.L18>:
        send_data(numberCodes[0]);
     248:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <numberCodes>

0000024c <.Loc.67>:
     24c:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

00000250 <.LVL23>:
        send_enable(1);
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 c4 00 	call	0x188	; 0x188 <send_enable>

00000258 <.LVL24>:
        setLatch();
     258:	0e 94 cf 00 	call	0x19e	; 0x19e <setLatch>

0000025c <.LVL25>:
        return;
     25c:	e8 cf       	rjmp	.-48     	; 0x22e <.L10>

0000025e <.L19>:
        send_data(numberCodes[10]);
     25e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numberCodes+0xa>
     262:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

00000266 <.LVL27>:
        send_enable(++pos);
     266:	c5 01       	movw	r24, r10
     268:	02 96       	adiw	r24, 0x02	; 2

0000026a <.Loc.74>:
     26a:	0e 94 c4 00 	call	0x188	; 0x188 <send_enable>

0000026e <.LVL29>:
        setLatch();
     26e:	0e 94 cf 00 	call	0x19e	; 0x19e <setLatch>

00000272 <.LVL30>:
     272:	dd cf       	rjmp	.-70     	; 0x22e <.L10>

00000274 <.L13>:
    int negative = 0;
     274:	81 2c       	mov	r8, r1
     276:	91 2c       	mov	r9, r1

00000278 <.Loc.78>:
    while(data > 0){
     278:	1c 16       	cp	r1, r28
     27a:	1d 06       	cpc	r1, r29
     27c:	0c f4       	brge	.+2      	; 0x280 <L0^A+0x2>

0000027e <L0^A>:
     27e:	b3 cf       	rjmp	.-154    	; 0x1e6 <.L15>
     280:	d6 cf       	rjmp	.-84     	; 0x22e <.L10>

00000282 <LedTreeIndictorLeftToggle>:
    DDRB |= (1 << PB2) | (1 << PB3);
    init_delay_led();
}

void LedTreeIndictorLeftToggle(){
        PORTB ^= (1 << TreeIndicatedLEDLeft);
     282:	85 b1       	in	r24, 0x05	; 5

00000284 <.Loc.2>:
     284:	94 e0       	ldi	r25, 0x04	; 4
     286:	89 27       	eor	r24, r25
     288:	85 b9       	out	0x05, r24	; 5

0000028a <.Loc.3>:
}
     28a:	08 95       	ret

0000028c <LedTreeIndictorRightToggle>:
void LedTreeIndictorRightToggle(){
        PORTB ^= (1 << TreeIndicatedLEDRight);
     28c:	85 b1       	in	r24, 0x05	; 5

0000028e <.Loc.6>:
     28e:	98 e0       	ldi	r25, 0x08	; 8
     290:	89 27       	eor	r24, r25
     292:	85 b9       	out	0x05, r24	; 5

00000294 <.Loc.7>:
}
     294:	08 95       	ret

00000296 <LedTurnSignalLeftToggle>:

void LedTurnSignalLeftToggle(){
    PORTL ^= (1 << TurnSignalLEDLeft);
     296:	eb e0       	ldi	r30, 0x0B	; 11
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	80 81       	ld	r24, Z

0000029c <.Loc.10>:
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	89 27       	eor	r24, r25
     2a0:	80 83       	st	Z, r24

000002a2 <.Loc.11>:
}
     2a2:	08 95       	ret

000002a4 <LedTurnSignalRightToggle>:
void LedTurnSignalRightToggle(){
        PORTL ^= (1 << TurnSignalLEDRight);
     2a4:	eb e0       	ldi	r30, 0x0B	; 11
     2a6:	f1 e0       	ldi	r31, 0x01	; 1
     2a8:	80 81       	ld	r24, Z

000002aa <.Loc.14>:
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	89 27       	eor	r24, r25
     2ae:	80 83       	st	Z, r24

000002b0 <.Loc.15>:
}
     2b0:	08 95       	ret

000002b2 <LedBreakLightLeft>:

void LedBreakLightLeft(int x){
    if(x){
     2b2:	89 2b       	or	r24, r25
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <.L6>

000002b6 <.Loc.19>:
        PORTL |= (1 << BreaklightsLeft);
     2b6:	eb e0       	ldi	r30, 0x0B	; 11
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	80 81       	ld	r24, Z

000002bc <.Loc.20>:
     2bc:	84 60       	ori	r24, 0x04	; 4
     2be:	80 83       	st	Z, r24
     2c0:	08 95       	ret

000002c2 <.L6>:
    }
    else{
        PORTL &= ~(1 << BreaklightsLeft);
     2c2:	eb e0       	ldi	r30, 0x0B	; 11
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	80 81       	ld	r24, Z

000002c8 <.Loc.23>:
     2c8:	8b 7f       	andi	r24, 0xFB	; 251
     2ca:	80 83       	st	Z, r24

000002cc <.Loc.24>:
    }
}
     2cc:	08 95       	ret

000002ce <LedBreakLightRight>:
void LedBreakLightRight(int x){
    if(x){
     2ce:	89 2b       	or	r24, r25
     2d0:	31 f0       	breq	.+12     	; 0x2de <.L9>

000002d2 <.Loc.28>:
        PORTL |= (1 << BreaklightRight);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z

000002d8 <.Loc.29>:
     2d8:	88 60       	ori	r24, 0x08	; 8
     2da:	80 83       	st	Z, r24
     2dc:	08 95       	ret

000002de <.L9>:
    }
    else{
        PORTL &= ~(1 << BreaklightRight);
     2de:	eb e0       	ldi	r30, 0x0B	; 11
     2e0:	f1 e0       	ldi	r31, 0x01	; 1
     2e2:	80 81       	ld	r24, Z

000002e4 <.Loc.32>:
     2e4:	87 7f       	andi	r24, 0xF7	; 247
     2e6:	80 83       	st	Z, r24

000002e8 <.Loc.33>:
    }
}
     2e8:	08 95       	ret

000002ea <setBreaklights>:

void setBreaklights(int x){
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	d8 2f       	mov	r29, r24
     2f0:	c9 2f       	mov	r28, r25

000002f2 <.Loc.36>:
    LedBreakLightLeft(x);
     2f2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LedBreakLightLeft>

000002f6 <.LVL9>:
    LedBreakLightRight(x);
     2f6:	8d 2f       	mov	r24, r29
     2f8:	9c 2f       	mov	r25, r28
     2fa:	0e 94 67 01 	call	0x2ce	; 0x2ce <LedBreakLightRight>

000002fe <.LVL10>:
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <LedHeadlightLeft>:

void LedHeadlightLeft(int x){
    if(x){
     304:	89 2b       	or	r24, r25
     306:	31 f0       	breq	.+12     	; 0x314 <.L13>

00000308 <.Loc.42>:
        PORTL |= (1 << HeadlightsLeft);
     308:	eb e0       	ldi	r30, 0x0B	; 11
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	80 81       	ld	r24, Z

0000030e <.Loc.43>:
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	80 83       	st	Z, r24
     312:	08 95       	ret

00000314 <.L13>:
    }
    else{
        PORTL &= ~(1 << HeadlightsLeft);
     314:	eb e0       	ldi	r30, 0x0B	; 11
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	80 81       	ld	r24, Z

0000031a <.Loc.46>:
     31a:	8f 7e       	andi	r24, 0xEF	; 239
     31c:	80 83       	st	Z, r24

0000031e <.Loc.47>:
    }
}
     31e:	08 95       	ret

00000320 <LedHeadlightRight>:
void LedHeadlightRight(int x){
    if(x){
     320:	89 2b       	or	r24, r25
     322:	31 f0       	breq	.+12     	; 0x330 <.L16>

00000324 <.Loc.51>:
        PORTL |= (1 << HeadlightsRight);
     324:	eb e0       	ldi	r30, 0x0B	; 11
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z

0000032a <.Loc.52>:
     32a:	80 62       	ori	r24, 0x20	; 32
     32c:	80 83       	st	Z, r24
     32e:	08 95       	ret

00000330 <.L16>:
    }
    else{
        PORTL &= ~(1 << HeadlightsRight);
     330:	eb e0       	ldi	r30, 0x0B	; 11
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	80 81       	ld	r24, Z

00000336 <.Loc.55>:
     336:	8f 7d       	andi	r24, 0xDF	; 223
     338:	80 83       	st	Z, r24

0000033a <.Loc.56>:
    }
}
     33a:	08 95       	ret

0000033c <setHeadlights>:

void setHeadlights(int x){
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	d8 2f       	mov	r29, r24
     342:	c9 2f       	mov	r28, r25

00000344 <.Loc.59>:
    LedHeadlightLeft(x);
     344:	0e 94 82 01 	call	0x304	; 0x304 <LedHeadlightLeft>

00000348 <.LVL20>:
    LedHeadlightRight(x);
     348:	8d 2f       	mov	r24, r29
     34a:	9c 2f       	mov	r25, r28
     34c:	0e 94 90 01 	call	0x320	; 0x320 <LedHeadlightRight>

00000350 <.LVL21>:
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <LedNoodstopFront>:

void LedNoodstopFront(int x){
    if(x){
     356:	89 2b       	or	r24, r25
     358:	31 f0       	breq	.+12     	; 0x366 <.L20>

0000035a <.Loc.65>:
        PORTL |= (1 << NoodstopLEDFront);
     35a:	eb e0       	ldi	r30, 0x0B	; 11
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	80 81       	ld	r24, Z

00000360 <.Loc.66>:
     360:	80 64       	ori	r24, 0x40	; 64
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <.L20>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDFront);
     366:	eb e0       	ldi	r30, 0x0B	; 11
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	80 81       	ld	r24, Z

0000036c <.Loc.69>:
     36c:	8f 7b       	andi	r24, 0xBF	; 191
     36e:	80 83       	st	Z, r24

00000370 <.Loc.70>:
    }
}
     370:	08 95       	ret

00000372 <LedNoodstopBack>:
void LedNoodstopBack(int x){
    if(x){
     372:	89 2b       	or	r24, r25
     374:	31 f0       	breq	.+12     	; 0x382 <.L23>

00000376 <.Loc.74>:
        PORTL |= (1 << NoodstopLEDBack);
     376:	eb e0       	ldi	r30, 0x0B	; 11
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	80 81       	ld	r24, Z

0000037c <.Loc.75>:
     37c:	80 68       	ori	r24, 0x80	; 128
     37e:	80 83       	st	Z, r24
     380:	08 95       	ret

00000382 <.L23>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDBack);
     382:	eb e0       	ldi	r30, 0x0B	; 11
     384:	f1 e0       	ldi	r31, 0x01	; 1
     386:	80 81       	ld	r24, Z

00000388 <.Loc.78>:
     388:	8f 77       	andi	r24, 0x7F	; 127
     38a:	80 83       	st	Z, r24

0000038c <.Loc.79>:
    }
}
     38c:	08 95       	ret

0000038e <__vector_15>:
volatile int TreeSignalLeft = 0;
volatile int TreeSignalRight = 0;

#define blinkspeed 300
volatile int counter = 0;
ISR(TIMER2_OVF_vect){
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	0b b6       	in	r0, 0x3b	; 59
     39a:	0f 92       	push	r0
     39c:	2f 93       	push	r18
     39e:	3f 93       	push	r19
     3a0:	4f 93       	push	r20
     3a2:	5f 93       	push	r21
     3a4:	6f 93       	push	r22
     3a6:	7f 93       	push	r23
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
     3ac:	af 93       	push	r26
     3ae:	bf 93       	push	r27
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31

000003b4 <.Loc.81>:
    counter++;
     3b4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <counter>
     3b8:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <counter+0x1>
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <counter+0x1>
     3c2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <counter>

000003c6 <.Loc.83>:
    if(counter == blinkspeed){
     3c6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <counter>
     3ca:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <counter+0x1>

000003ce <.Loc.85>:
     3ce:	8c 32       	cpi	r24, 0x2C	; 44
     3d0:	91 40       	sbci	r25, 0x01	; 1
     3d2:	99 f0       	breq	.+38     	; 0x3fa <.L35>

000003d4 <.L25>:
        if(TreeSignalRight) {
                LedTreeIndictorRightToggle();
        } else PORTB &= ~(1 << TreeIndicatedLEDRight);
        counter = 0;
    }
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <.L35>:
        if(TurnSignalLeft) {
     3fa:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <TurnSignalLeft>
     3fe:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <TurnSignalLeft+0x1>

00000402 <.Loc.89>:
     402:	89 2b       	or	r24, r25
     404:	19 f5       	brne	.+70     	; 0x44c <.L36>

00000406 <.Loc.90>:
        } else PORTL &= ~(1<<TurnSignalLEDLeft);
     406:	eb e0       	ldi	r30, 0x0B	; 11
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	80 83       	st	Z, r24

00000410 <.L28>:
        if(TurnSignalRight){
     410:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <TurnSignalRight>
     414:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <TurnSignalRight+0x1>

00000418 <.Loc.94>:
     418:	89 2b       	or	r24, r25
     41a:	d9 f4       	brne	.+54     	; 0x452 <.L37>

0000041c <.Loc.95>:
        } else PORTL &= ~(1 << TurnSignalLEDRight);
     41c:	eb e0       	ldi	r30, 0x0B	; 11
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	80 81       	ld	r24, Z
     422:	8d 7f       	andi	r24, 0xFD	; 253
     424:	80 83       	st	Z, r24

00000426 <.L30>:
        if(TreeSignalLeft) {
     426:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <TreeSignalLeft>
     42a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <TreeSignalLeft+0x1>

0000042e <.Loc.99>:
     42e:	89 2b       	or	r24, r25
     430:	99 f4       	brne	.+38     	; 0x458 <.L38>

00000432 <.Loc.100>:
        } else PORTB &= ~(1 << TreeIndicatedLEDLeft);
     432:	2a 98       	cbi	0x05, 2	; 5

00000434 <.L32>:
        if(TreeSignalRight) {
     434:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <TreeSignalRight>
     438:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <TreeSignalRight+0x1>

0000043c <.Loc.104>:
     43c:	89 2b       	or	r24, r25
     43e:	79 f4       	brne	.+30     	; 0x45e <.L39>

00000440 <.Loc.105>:
        } else PORTB &= ~(1 << TreeIndicatedLEDRight);
     440:	2b 98       	cbi	0x05, 3	; 5

00000442 <.L34>:
        counter = 0;
     442:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <counter+0x1>
     446:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <counter>

0000044a <.Loc.109>:
}
     44a:	c4 cf       	rjmp	.-120    	; 0x3d4 <.L25>

0000044c <.L36>:
                LedTurnSignalLeftToggle();
     44c:	0e 94 4b 01 	call	0x296	; 0x296 <LedTurnSignalLeftToggle>

00000450 <.LVL30>:
     450:	df cf       	rjmp	.-66     	; 0x410 <.L28>

00000452 <.L37>:
                LedTurnSignalRightToggle();
     452:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LedTurnSignalRightToggle>

00000456 <.LVL31>:
     456:	e7 cf       	rjmp	.-50     	; 0x426 <.L30>

00000458 <.L38>:
                LedTreeIndictorLeftToggle();
     458:	0e 94 41 01 	call	0x282	; 0x282 <LedTreeIndictorLeftToggle>

0000045c <.LVL32>:
     45c:	eb cf       	rjmp	.-42     	; 0x434 <.L32>

0000045e <.L39>:
                LedTreeIndictorRightToggle();
     45e:	0e 94 46 01 	call	0x28c	; 0x28c <LedTreeIndictorRightToggle>

00000462 <.LVL33>:
     462:	ef cf       	rjmp	.-34     	; 0x442 <.L34>

00000464 <init_delay_led>:


void init_delay_led(){
    // Use mode 0, clkdiv = 64
    TCCR2A = 0;
     464:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

00000468 <.Loc.117>:
    TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

0000046e <.Loc.119>:

    // Disable PWM output
    OCR2A = 0;
     46e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000472 <.Loc.121>:
    OCR2B = 0;
     472:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000476 <.Loc.123>:

    //Overflow interrupt
    TIMSK2 = (1<<TOIE2);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

0000047c <.Loc.125>:
    TCNT2 = 6;
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>

00000482 <.Loc.127>:
}
     482:	08 95       	ret

00000484 <init_Leds>:
    DDRL = 0xff;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>

0000048a <.Loc.131>:
    DDRB |= (1 << PB2) | (1 << PB3);
     48a:	84 b1       	in	r24, 0x04	; 4

0000048c <.Loc.132>:
     48c:	8c 60       	ori	r24, 0x0C	; 12
     48e:	84 b9       	out	0x04, r24	; 4

00000490 <.Loc.133>:
    init_delay_led();
     490:	0e 94 32 02 	call	0x464	; 0x464 <init_delay_led>

00000494 <.LVL34>:
}
     494:	08 95       	ret

00000496 <startTimer>:
    startTimer(); //Start de bocht
}

//Set timer aan
void startTimer(){
    AVGBochtenCounter = 0;
     496:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <AVGBochtenCounter+0x1>
     49a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <AVGBochtenCounter>

0000049e <.Loc.3>:
    TCNT4 = 0;
     49e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     4a2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

000004a6 <.Loc.5>:
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

000004ac <.Loc.7>:
}
     4ac:	08 95       	ret

000004ae <stopTimer>:

//Stop timer
void stopTimer(){
     TCCR4B = (0<<CS42) | (0<<CS41) | (0<<CS40);
     4ae:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

000004b2 <.Loc.11>:
     turnsTaken++;
     4b2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <turnsTaken>
     4b6:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <turnsTaken+0x1>
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <turnsTaken+0x1>
     4c0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <turnsTaken>

000004c4 <.Loc.13>:
}
     4c4:	08 95       	ret

000004c6 <checkIfFinished>:

//Check of de bocht af is
void checkIfFinished(){
    if(turnsTaken >= 3){
     4c6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <turnsTaken>
     4ca:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <turnsTaken+0x1>
     4ce:	03 97       	sbiw	r24, 0x03	; 3
     4d0:	44 f0       	brlt	.+16     	; 0x4e2 <.L3>

000004d2 <.Loc.17>:
        turnsTaken = 0;
     4d2:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <turnsTaken+0x1>
     4d6:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <turnsTaken>

000004da <.Loc.19>:
        turnStarted = 0;
     4da:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <turnStarted+0x1>
     4de:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <turnStarted>

000004e2 <.L3>:
        return 1;
    } else return 0;
}
     4e2:	08 95       	ret

000004e4 <startTurn>:
int startTurn(int direction){
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	d8 2f       	mov	r29, r24
     4ea:	c9 2f       	mov	r28, r25

000004ec <.Loc.25>:
    if(turnStarted == 1) { //Check of we niet al een bocht aan het maken zijn
     4ec:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <turnStarted>
     4f0:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <turnStarted+0x1>

000004f4 <.Loc.27>:
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	99 f0       	breq	.+38     	; 0x51e <.L7>

000004f8 <.Loc.28>:
    setBothStepperMode(ForwardStep);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000500 <.LVL2>:
    turnStarted = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <turnStarted+0x1>
     508:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <turnStarted>

0000050c <.Loc.31>:
    turnDirection = direction;
     50c:	d0 93 3e 02 	sts	0x023E, r29	; 0x80023e <turnDirection>
     510:	c0 93 3f 02 	sts	0x023F, r28	; 0x80023f <turnDirection+0x1>

00000514 <.Loc.33>:
    startTimer(); //Start de bocht
     514:	0e 94 4b 02 	call	0x496	; 0x496 <startTimer>

00000518 <.L5>:
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <.L7>:
        return checkIfFinished();
     51e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <checkIfFinished>

00000522 <.LVL4>:
     522:	fa cf       	rjmp	.-12     	; 0x518 <.L5>

00000524 <init_AGVBochten_timer>:

void init_AGVBochten_timer(){
    // Use timer 4 (16bit), clkdiv = 0, 16.000.000 / (2^16) / 8 = 30(.5175
    TCCR4A = 0;
     524:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000528 <.Loc.40>:
    //TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);

    // Disable PWM output
    OCR4A = 0;
     528:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     52c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000530 <.Loc.42>:
    OCR4B = 0;
     530:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     534:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>

00000538 <.Loc.44>:

    //Compares

    //Overflow interrupt
    TIMSK4 = (1<<TOIE4);
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

0000053e <.Loc.46>:
    //TCNT4 = 6;
}
     53e:	08 95       	ret

00000540 <initAGVBochten>:
    init_AGVBochten_timer();
     540:	0e 94 92 02 	call	0x524	; 0x524 <init_AGVBochten_timer>

00000544 <.LVL5>:
}
     544:	08 95       	ret

00000546 <turn>:
        turnsTaken++; //increase aantal bochten
    }
}

//Zet de wielen goed voor de bocht
void turn(int direction){
     546:	28 2f       	mov	r18, r24
     548:	39 2f       	mov	r19, r25

0000054a <.Loc.52>:
    switch(direction) {
     54a:	21 15       	cp	r18, r1
     54c:	31 05       	cpc	r19, r1
     54e:	21 f0       	breq	.+8      	; 0x558 <.L11>
     550:	21 30       	cpi	r18, 0x01	; 1
     552:	31 05       	cpc	r19, r1
     554:	71 f0       	breq	.+28     	; 0x572 <.L12>
     556:	08 95       	ret

00000558 <.L11>:
    case Left:
        setStepperMode(leftMotor, Off);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	8a e0       	ldi	r24, 0x0A	; 10
     55e:	90 e0       	ldi	r25, 0x00	; 0

00000560 <.Loc.54>:
     560:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000564 <.LVL8>:
        setStepperMode(rightMotor, ForwardStep);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	8b e0       	ldi	r24, 0x0B	; 11
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000570 <.LVL9>:
        break;
     570:	08 95       	ret

00000572 <.L12>:
    case Right:
        setStepperMode(leftMotor, ForwardStep);
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	90 e0       	ldi	r25, 0x00	; 0

0000057a <.Loc.58>:
     57a:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

0000057e <.LVL12>:
        setStepperMode(rightMotor, Off);
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

0000058a <.LVL13>:
        break;
    }
}
     58a:	08 95       	ret

0000058c <__vector_45>:
ISR(TIMER4_OVF_vect){
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	0b b6       	in	r0, 0x3b	; 59
     598:	0f 92       	push	r0
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31

000005b2 <.Loc.63>:
    AVGBochtenCounter++;
     5b2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <AVGBochtenCounter>
     5b6:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <AVGBochtenCounter+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <AVGBochtenCounter+0x1>
     5c0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <AVGBochtenCounter>

000005c4 <.Loc.65>:
    if(AVGBochtenCounter == Comp_StartTurn){
     5c4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <AVGBochtenCounter>
     5c8:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <AVGBochtenCounter+0x1>

000005cc <.Loc.67>:
     5cc:	81 3e       	cpi	r24, 0xE1	; 225
     5ce:	91 05       	cpc	r25, r1
     5d0:	d1 f0       	breq	.+52     	; 0x606 <.L19>

000005d2 <.L15>:
    if(AVGBochtenCounter == Comp_EndTurn){
     5d2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <AVGBochtenCounter>
     5d6:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <AVGBochtenCounter+0x1>

000005da <.Loc.70>:
     5da:	86 35       	cpi	r24, 0x56	; 86
     5dc:	91 40       	sbci	r25, 0x01	; 1
     5de:	19 f1       	breq	.+70     	; 0x626 <.L20>

000005e0 <.L14>:
}
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	7f 91       	pop	r23
     5ee:	6f 91       	pop	r22
     5f0:	5f 91       	pop	r21
     5f2:	4f 91       	pop	r20
     5f4:	3f 91       	pop	r19
     5f6:	2f 91       	pop	r18
     5f8:	0f 90       	pop	r0
     5fa:	0b be       	out	0x3b, r0	; 59
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <.L19>:
        if(turnsTaken == 2) { //Als we al 2 bochten hebben gemaakt stop de timer
     606:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <turnsTaken>
     60a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <turnsTaken+0x1>
     60e:	02 97       	sbiw	r24, 0x02	; 2
     610:	39 f0       	breq	.+14     	; 0x620 <.L21>

00000612 <.LBB3>:
        } else turn(turnDirection); //Zoniet, maak de bocht
     612:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <turnDirection>
     616:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <turnDirection+0x1>
     61a:	0e 94 a3 02 	call	0x546	; 0x546 <turn>

0000061e <.LVL14>:
     61e:	d9 cf       	rjmp	.-78     	; 0x5d2 <.L15>

00000620 <.L21>:
            stopTimer();
     620:	0e 94 57 02 	call	0x4ae	; 0x4ae <stopTimer>

00000624 <.LVL15>:
     624:	d6 cf       	rjmp	.-84     	; 0x5d2 <.L15>

00000626 <.L20>:
        setBothStepperMode(ForwardStep);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

0000062e <.LVL16>:
        if(turnsTaken == 0) AVGBochtenCounter = DrivingHeadstart; //Als dit het einde is van de eerste bocht, reset de timer om het te herhalen
     62e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <turnsTaken>
     632:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <turnsTaken+0x1>

00000636 <.Loc.79>:
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	31 f4       	brne	.+12     	; 0x646 <.L18>

0000063a <.Loc.80>:
     63a:	2c ee       	ldi	r18, 0xEC	; 236
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <AVGBochtenCounter+0x1>
     642:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <AVGBochtenCounter>

00000646 <.L18>:
        turnsTaken++; //increase aantal bochten
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <turnsTaken+0x1>
     64c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <turnsTaken>

00000650 <.Loc.84>:
}
     650:	c7 cf       	rjmp	.-114    	; 0x5e0 <.L14>

00000652 <nietInEenPad>:

    return 0;
}

int nietInEenPad(){
    return ((!bit_is_clear(IRPIN, IRSensorLeft)) && !bit_is_clear(IRPIN, IRSensorRight));
     652:	02 9b       	sbis	0x00, 2	; 0
     654:	06 c0       	rjmp	.+12     	; 0x662 <.L3>

00000656 <.Loc.3>:
     656:	80 b1       	in	r24, 0x00	; 0

00000658 <.Loc.4>:
     658:	83 fb       	bst	r24, 3
     65a:	88 27       	eor	r24, r24
     65c:	80 f9       	bld	r24, 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	08 95       	ret

00000662 <.L3>:
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0

00000666 <.Loc.6>:
}
     666:	08 95       	ret

00000668 <needCorrection>:

#define testDelay 0
int needCorrection(){

    //Linker bit is niet geactiveerd, we hebben een afwijking naar Rechts //Bijsturen naar links
    if(!bit_is_clear(IRPIN, IRSensorLeft)){
     668:	02 99       	sbic	0x00, 2	; 0
     66a:	05 c0       	rjmp	.+10     	; 0x676 <.L8>

0000066c <.Loc.10>:
        _delay_ms(testDelay);
        return 1;
    }
    //Rechter bit is niet geactiveerd, we hebben een afwijking naar Links //bijsturen naar rechts
    if(!bit_is_clear(IRPIN, IRSensorRight)){
     66c:	03 99       	sbic	0x00, 3	; 0
     66e:	06 c0       	rjmp	.+12     	; 0x67c <.L9>

00000670 <.Loc.12>:
        _delay_ms(testDelay);
        return 2;
    }

    return 0;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0

00000674 <.Loc.13>:
}
     674:	08 95       	ret

00000676 <.L8>:
        return 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 95       	ret

0000067c <.L9>:
        return 2;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	08 95       	ret

00000682 <checkNoodstop>:

//Check of noodstop is ingedrukt
int checkNoodstop(){
    if(bit_is_clear(PINC, NoodstopPin)){
     682:	86 b1       	in	r24, 0x06	; 6

00000684 <.Loc.39>:
     684:	86 95       	lsr	r24
     686:	86 95       	lsr	r24
     688:	86 95       	lsr	r24
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	89 27       	eor	r24, r25

0000068e <.Loc.40>:
        return 1;
    }
    return 0;
}
     68e:	81 70       	andi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 95       	ret

00000694 <isStartButtonPressed>:

//Check of start knop is ingedrukt
int isStartButtonPressed(){
    return bit_is_clear(PINC, StartButtonPin);
     694:	86 b1       	in	r24, 0x06	; 6
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	89 27       	eor	r24, r25

0000069a <.Loc.44>:
}
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	08 95       	ret

000006a0 <checkModeSwitchState>:
    0- Switch staat in het midden
    1- Volgen
    2- Rijden
*/
int checkModeSwitchState(){
    if(bit_is_clear(PINC, FollowModeSwitch)){
     6a0:	32 9b       	sbis	0x06, 2	; 6
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <.L14>

000006a4 <.Loc.48>:
        return 1; //Switch is in follow mode.
    }
    if(bit_is_clear(PINC, DriveModeSwitch)){
     6a4:	26 b1       	in	r18, 0x06	; 6

000006a6 <.Loc.50>:
     6a6:	26 95       	lsr	r18
     6a8:	31 e0       	ldi	r19, 0x01	; 1
     6aa:	23 27       	eor	r18, r19
     6ac:	82 2f       	mov	r24, r18
     6ae:	81 70       	andi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	08 95       	ret

000006b8 <.L14>:
        return 1; //Switch is in follow mode.
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0

000006bc <.Loc.52>:
        return 2; //Switch is in drive mode.
    }

    return 0; //Switch staat in het midden, geen van beide geactiveerd.

}
     6bc:	08 95       	ret

000006be <initButtons>:

//Init buttons
void initButtons(){
    //Loop voor alle buttons
    for(int i = 0; i < 5; i++){
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0

000006c2 <.Loc.58>:
        DDRC &= ~(1<<i);
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	70 e0       	ldi	r23, 0x00	; 0

000006c6 <.L16>:
     6c6:	37 b1       	in	r19, 0x07	; 7

000006c8 <.Loc.60>:
     6c8:	ab 01       	movw	r20, r22
     6ca:	08 2e       	mov	r0, r24
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <.L2^B1>

000006ce <.L1^B1>:
     6ce:	44 0f       	add	r20, r20
     6d0:	55 1f       	adc	r21, r21

000006d2 <.L2^B1>:
     6d2:	0a 94       	dec	r0
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <.L1^B1>

000006d6 <.Loc.61>:
     6d6:	24 2f       	mov	r18, r20
     6d8:	20 95       	com	r18
     6da:	23 23       	and	r18, r19
     6dc:	27 b9       	out	0x07, r18	; 7

000006de <.Loc.62>:
        PORTC |= (1<<i);
     6de:	28 b1       	in	r18, 0x08	; 8

000006e0 <.Loc.63>:
     6e0:	24 2b       	or	r18, r20
     6e2:	28 b9       	out	0x08, r18	; 8

000006e4 <.Loc.64>:
    for(int i = 0; i < 5; i++){
     6e4:	01 96       	adiw	r24, 0x01	; 1

000006e6 <.Loc.65>:
     6e6:	85 30       	cpi	r24, 0x05	; 5
     6e8:	91 05       	cpc	r25, r1
     6ea:	69 f7       	brne	.-38     	; 0x6c6 <.L16>

000006ec <.LBE30>:
    }
}
     6ec:	08 95       	ret

000006ee <initIRSensors>:

//Init IR sensors
void initIRSensors(){
    //Loop voor alle IR sensors
    for(int i = 0; i < 4; i++){
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0

000006f2 <.Loc.72>:
        DDRA &= ~(1<<i);
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	70 e0       	ldi	r23, 0x00	; 0

000006f6 <.L19>:
     6f6:	31 b1       	in	r19, 0x01	; 1

000006f8 <.Loc.74>:
     6f8:	ab 01       	movw	r20, r22
     6fa:	08 2e       	mov	r0, r24
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <.L2^B2>

000006fe <.L1^B2>:
     6fe:	44 0f       	add	r20, r20
     700:	55 1f       	adc	r21, r21

00000702 <.L2^B2>:
     702:	0a 94       	dec	r0
     704:	e2 f7       	brpl	.-8      	; 0x6fe <.L1^B2>

00000706 <.Loc.75>:
     706:	24 2f       	mov	r18, r20
     708:	20 95       	com	r18
     70a:	23 23       	and	r18, r19
     70c:	21 b9       	out	0x01, r18	; 1

0000070e <.Loc.76>:
        PORTA |= (1<<i);
     70e:	22 b1       	in	r18, 0x02	; 2

00000710 <.Loc.77>:
     710:	24 2b       	or	r18, r20
     712:	22 b9       	out	0x02, r18	; 2

00000714 <.Loc.78>:
    for(int i = 0; i < 4; i++){
     714:	01 96       	adiw	r24, 0x01	; 1

00000716 <.Loc.79>:
     716:	84 30       	cpi	r24, 0x04	; 4
     718:	91 05       	cpc	r25, r1
     71a:	69 f7       	brne	.-38     	; 0x6f6 <.L19>

0000071c <.LBE31>:
    }
}
     71c:	08 95       	ret

0000071e <initAGV>:
    init_Leds();
     71e:	0e 94 42 02 	call	0x484	; 0x484 <init_Leds>

00000722 <.LVL8>:
    agv_ultrasoon_init();
     722:	0e 94 dd 07 	call	0xfba	; 0xfba <agv_ultrasoon_init>

00000726 <.LVL9>:
    initSteppermotorAVRDriver();
     726:	0e 94 01 07 	call	0xe02	; 0xe02 <initSteppermotorAVRDriver>

0000072a <.LVL10>:
    initIRSensors();
     72a:	0e 94 77 03 	call	0x6ee	; 0x6ee <initIRSensors>

0000072e <.LVL11>:
    initButtons();
     72e:	0e 94 5f 03 	call	0x6be	; 0x6be <initButtons>

00000732 <.LVL12>:
    initAGVBochten();
     732:	0e 94 a0 02 	call	0x540	; 0x540 <initAGVBochten>

00000736 <.LVL13>:
    initDisplay();
     736:	0e 94 95 00 	call	0x12a	; 0x12a <initDisplay>

0000073a <.LVL14>:
}
     73a:	08 95       	ret

0000073c <checkFrontIRState>:
*/
int checkFrontIRState(){
    //return 3; //for testing without IR sensors

    //Allebij detecteren iets, return 0
    if(bit_is_clear(PINA, FrontIRSensorLeftPin) && bit_is_clear(PINA, FrontIRSensorRightPin)){
     73c:	00 99       	sbic	0x00, 0	; 0
     73e:	02 c0       	rjmp	.+4      	; 0x744 <.L23>

00000740 <.Loc.93>:
     740:	01 9b       	sbis	0x00, 1	; 0
     742:	07 c0       	rjmp	.+14     	; 0x752 <.L25>

00000744 <.L23>:
        return 0;
    }

    //Linker sensor detecteerd iets, return 1
    if(bit_is_clear(PINA, FrontIRSensorLeftPin)){
     744:	00 9b       	sbis	0x00, 0	; 0
     746:	08 c0       	rjmp	.+16     	; 0x758 <.L26>

00000748 <.Loc.96>:
        return 1;
    }

    //Rechter sensor detecteert iets, return 2
    if(bit_is_clear(PINA, FrontIRSensorRightPin)){
     748:	01 9b       	sbis	0x00, 1	; 0
     74a:	09 c0       	rjmp	.+18     	; 0x75e <.L27>

0000074c <.Loc.98>:
        return 2;
    }

    //Return 3
    return 3; //Geen IR sensor's geactiveerd
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	08 95       	ret

00000752 <.L25>:
        return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	08 95       	ret

00000758 <.L26>:
        return 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret

0000075e <.L27>:
        return 2;
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	90 e0       	ldi	r25, 0x00	; 0

00000762 <.Loc.102>:
}
     762:	08 95       	ret

00000764 <filterDistance>:
    Als er iets te ver weg van de sonic sensor is de waarde tussen de 500 & 660,
    dus verander dit naar een groot waarde, in dit geval 100.

    Anders return de originele waarde.
*/
int filterDistance(int distance){
     764:	28 2f       	mov	r18, r24
     766:	39 2f       	mov	r19, r25

00000768 <.Loc.105>:
    //Alle waardes boven 200 zijn bs anyways
    if(distance == 561){
     768:	21 33       	cpi	r18, 0x31	; 49
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	38 07       	cpc	r19, r24

0000076e <.Loc.107>:
     76e:	31 f0       	breq	.+12     	; 0x77c <.L30>

00000770 <.Loc.108>:
        distance = 1;
    } else if(distance >= 500){
     770:	24 3f       	cpi	r18, 0xF4	; 244
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	38 07       	cpc	r19, r24
     776:	2c f4       	brge	.+10     	; 0x782 <.L31>
     778:	82 2f       	mov	r24, r18
     77a:	08 95       	ret

0000077c <.L30>:
        distance = 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret

00000782 <.L31>:
        distance = 100;
     782:	84 e6       	ldi	r24, 0x64	; 100
     784:	90 e0       	ldi	r25, 0x00	; 0

00000786 <.Loc.112>:
    }
    return distance;
}
     786:	08 95       	ret

00000788 <checkSensors>:
int checkSensors(){
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29

00000790 <.Loc.115>:
    int valueLeft = filterDistance(agv_ultrasoon_boom_links);
     790:	c0 91 72 02 	lds	r28, 0x0272	; 0x800272 <agv_ultrasoon_boom_links>
     794:	d0 91 73 02 	lds	r29, 0x0273	; 0x800273 <agv_ultrasoon_boom_links+0x1>

00000798 <.Loc.121>:
    int valueRight = filterDistance(agv_ultrasoon_boom_rechts);
     798:	00 91 70 02 	lds	r16, 0x0270	; 0x800270 <agv_ultrasoon_boom_rechts>
     79c:	10 91 71 02 	lds	r17, 0x0271	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>

000007a0 <.Loc.123>:
    if(CheckinFrontOfAVRWhileDriving > filterDistance(agv_ultrasoon_voor_midden)){
     7a0:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <agv_ultrasoon_voor_midden>
     7a4:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <agv_ultrasoon_voor_midden+0x1>
     7a8:	0e 94 b2 03 	call	0x764	; 0x764 <filterDistance>

000007ac <.LVL18>:
     7ac:	44 97       	sbiw	r24, 0x14	; 20
     7ae:	0c f4       	brge	.+2      	; 0x7b2 <.Loc.126>

000007b0 <L0^A>:
     7b0:	8e c0       	rjmp	.+284    	; 0x8ce <.L39>

000007b2 <.Loc.126>:
    int valueLeft = filterDistance(agv_ultrasoon_boom_links);
     7b2:	ce 01       	movw	r24, r28
     7b4:	0e 94 b2 03 	call	0x764	; 0x764 <filterDistance>

000007b8 <.LVL19>:
     7b8:	28 2f       	mov	r18, r24
     7ba:	39 2f       	mov	r19, r25

000007bc <.Loc.127>:
    if((TreeDistance > valueLeft) && !leftPreviousState){
     7bc:	27 30       	cpi	r18, 0x07	; 7
     7be:	31 05       	cpc	r19, r1
     7c0:	4c f5       	brge	.+82     	; 0x814 <.L34>

000007c2 <.Loc.129>:
     7c2:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <leftPreviousState.3>
     7c6:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <leftPreviousState.3+0x1>
     7ca:	89 2b       	or	r24, r25
     7cc:	49 f5       	brne	.+82     	; 0x820 <.L35>

000007ce <.Loc.130>:
        if(!doubleCheckLeft){
     7ce:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <doubleCheckLeft.2>
     7d2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <doubleCheckLeft.2+0x1>
     7d6:	89 2b       	or	r24, r25
     7d8:	59 f0       	breq	.+22     	; 0x7f0 <.L43>

000007da <.Loc.132>:
            doubleCheckLeft = 0;
     7da:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <doubleCheckLeft.2+0x1>
     7de:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <doubleCheckLeft.2>

000007e2 <.Loc.134>:
            leftPreviousState = 1;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <leftPreviousState.3+0x1>
     7ea:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <leftPreviousState.3>

000007ee <.Loc.136>:
            return 1;
     7ee:	71 c0       	rjmp	.+226    	; 0x8d2 <.L32>

000007f0 <.L43>:
            doubleCheckLeft = 1;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <doubleCheckLeft.2+0x1>
     7f8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <doubleCheckLeft.2>

000007fc <.LBB32>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	85 ea       	ldi	r24, 0xA5	; 165
     800:	9e e0       	ldi	r25, 0x0E	; 14

00000802 <.L1^B3>:
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <.L1^B3>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <L0^A>

0000080c <L0^A>:
	...

0000080e <.LBE32>:
            return 3;
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	5f c0       	rjmp	.+190    	; 0x8d2 <.L32>

00000814 <.L34>:
    } else if(leftPreviousState && (TreeDistance < valueLeft) ){
     814:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <leftPreviousState.3>
     818:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <leftPreviousState.3+0x1>
     81c:	89 2b       	or	r24, r25
     81e:	39 f5       	brne	.+78     	; 0x86e <.L44>

00000820 <.L35>:
    int valueRight = filterDistance(agv_ultrasoon_boom_rechts);
     820:	c8 01       	movw	r24, r16
     822:	0e 94 b2 03 	call	0x764	; 0x764 <filterDistance>

00000826 <.LVL22>:
     826:	28 2f       	mov	r18, r24
     828:	39 2f       	mov	r19, r25

0000082a <.Loc.154>:
    if((TreeDistance > valueRight) && !rightPreviousState ){
     82a:	27 30       	cpi	r18, 0x07	; 7
     82c:	31 05       	cpc	r19, r1
     82e:	c4 f5       	brge	.+112    	; 0x8a0 <.L37>

00000830 <.Loc.156>:
     830:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <rightPreviousState.1>
     834:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <rightPreviousState.1+0x1>
     838:	89 2b       	or	r24, r25
     83a:	09 f0       	breq	.+2      	; 0x83e <.Loc.157>

0000083c <L0^A>:
     83c:	4f c0       	rjmp	.+158    	; 0x8dc <.L40>

0000083e <.Loc.157>:
        if(!doubleCheckRight){
     83e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <doubleCheckRight.0>
     842:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <doubleCheckRight.0+0x1>
     846:	89 2b       	or	r24, r25
     848:	f1 f4       	brne	.+60     	; 0x886 <.L38>

0000084a <.Loc.159>:
            doubleCheckRight = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <doubleCheckRight.0+0x1>
     852:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <doubleCheckRight.0>

00000856 <.LBB34>:
     856:	2f ef       	ldi	r18, 0xFF	; 255
     858:	85 ea       	ldi	r24, 0xA5	; 165
     85a:	9e e0       	ldi	r25, 0x0E	; 14

0000085c <.L1^B4>:
     85c:	21 50       	subi	r18, 0x01	; 1
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	e1 f7       	brne	.-8      	; 0x85c <.L1^B4>
     864:	00 c0       	rjmp	.+0      	; 0x866 <L0^A>

00000866 <L0^A>:
	...

00000868 <.LBE34>:
            return 3;
     868:	83 e0       	ldi	r24, 0x03	; 3
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	32 c0       	rjmp	.+100    	; 0x8d2 <.L32>

0000086e <.L44>:
    } else if(leftPreviousState && (TreeDistance < valueLeft) ){
     86e:	28 30       	cpi	r18, 0x08	; 8
     870:	31 05       	cpc	r19, r1
     872:	b4 f2       	brlt	.-84     	; 0x820 <.L35>

00000874 <.Loc.173>:
        leftPreviousState = 0;
     874:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <leftPreviousState.3+0x1>
     878:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <leftPreviousState.3>

0000087c <.Loc.175>:
        doubleCheckLeft = 0;
     87c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <doubleCheckLeft.2+0x1>
     880:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <doubleCheckLeft.2>
     884:	cd cf       	rjmp	.-102    	; 0x820 <.L35>

00000886 <.L38>:
            doubleCheckRight = 0;
     886:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <doubleCheckRight.0+0x1>
     88a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <doubleCheckRight.0>

0000088e <.Loc.179>:
            rightPreviousState = 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <rightPreviousState.1+0x1>
     896:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <rightPreviousState.1>

0000089a <.Loc.181>:
            return 2;
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	19 c0       	rjmp	.+50     	; 0x8d2 <.L32>

000008a0 <.L37>:
    } else if(rightPreviousState && (TreeDistance < valueRight) ){
     8a0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <rightPreviousState.1>
     8a4:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <rightPreviousState.1+0x1>
     8a8:	89 2b       	or	r24, r25
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <.L45>

000008ac <.Loc.185>:
    return 3;
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	10 c0       	rjmp	.+32     	; 0x8d2 <.L32>

000008b2 <.L45>:
    } else if(rightPreviousState && (TreeDistance < valueRight) ){
     8b2:	28 30       	cpi	r18, 0x08	; 8
     8b4:	31 05       	cpc	r19, r1
     8b6:	ac f0       	brlt	.+42     	; 0x8e2 <.L42>

000008b8 <.Loc.187>:
        rightPreviousState = 0;
     8b8:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <rightPreviousState.1+0x1>
     8bc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <rightPreviousState.1>

000008c0 <.Loc.189>:
        doubleCheckRight = 0;
     8c0:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <doubleCheckRight.0+0x1>
     8c4:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <doubleCheckRight.0>

000008c8 <.Loc.191>:
    return 3;
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <.L32>

000008ce <.L39>:
        return 0;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0

000008d2 <.L32>:
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	08 95       	ret

000008dc <.L40>:
    return 3;
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	f8 cf       	rjmp	.-16     	; 0x8d2 <.L32>

000008e2 <.L42>:
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	f5 cf       	rjmp	.-22     	; 0x8d2 <.L32>

000008e8 <followHand>:

//Code voor het volgen van de hand op de juiste afstand
void followHand(int distance){
     8e8:	28 2f       	mov	r18, r24
     8ea:	39 2f       	mov	r19, r25

000008ec <.Loc.197>:

    //Check voor als er iets TE ver weg staat en te negeren.
    if(distance > distanceToCheck){
     8ec:	29 32       	cpi	r18, 0x29	; 41
     8ee:	31 05       	cpc	r19, r1
     8f0:	5c f4       	brge	.+22     	; 0x908 <.L51>

000008f2 <.Loc.199>:
        setBreaklights(0);
        return;
    }

    //Check voor juiste afstand met speelruimte
    if((distance < maxDistance) && (distance > minDistance)){
     8f2:	c9 01       	movw	r24, r18

000008f4 <.Loc.201>:
     8f4:	08 97       	sbiw	r24, 0x08	; 8

000008f6 <.Loc.202>:
     8f6:	05 97       	sbiw	r24, 0x05	; 5
     8f8:	80 f0       	brcs	.+32     	; 0x91a <.L52>

000008fa <.Loc.203>:
            setBreaklights(0);
            return;
    }

    //Check voor dichtbij
    if(distance < minDistance){
     8fa:	27 30       	cpi	r18, 0x07	; 7
     8fc:	31 05       	cpc	r19, r1
     8fe:	b4 f0       	brlt	.+44     	; 0x92c <.L53>

00000900 <.Loc.205>:
        setBreaklights(1);
        return;
    }

    //check voor verweg
    if(distance > maxDistance){
     900:	2e 30       	cpi	r18, 0x0E	; 14
     902:	31 05       	cpc	r19, r1
     904:	e4 f4       	brge	.+56     	; 0x93e <.L54>

00000906 <.L46>:
        setBothStepperMode(ForwardStep);
        setBreaklights(0);
    }

}
     906:	08 95       	ret

00000908 <.L51>:
        setBothStepperMode(Off);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0

0000090c <.Loc.209>:
     90c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000910 <.LVL29>:
        setBreaklights(0);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000918 <.LVL30>:
        return;
     918:	08 95       	ret

0000091a <.L52>:
            setBothStepperMode(Off);
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000922 <.LVL31>:
            setBreaklights(0);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

0000092a <.LVL32>:
            return;
     92a:	08 95       	ret

0000092c <.L53>:
        setBothStepperMode(BackwardStep);
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000934 <.LVL33>:
        setBreaklights(1);
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

0000093c <.LVL34>:
        return;
     93c:	08 95       	ret

0000093e <.L54>:
        setBothStepperMode(ForwardStep);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000946 <.LVL35>:
        setBreaklights(0);
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

0000094e <.LVL36>:
     94e:	db cf       	rjmp	.-74     	; 0x906 <.L46>

00000950 <main>:
    initAGV(); //Init
     950:	0e 94 8f 03 	call	0x71e	; 0x71e <initAGV>

00000954 <.LVL38>:
    display(0);
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <display>

0000095c <.LVL39>:
    setHeadlights(1);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 9e 01 	call	0x33c	; 0x33c <setHeadlights>

00000964 <.LVL40>:
    int mode = ModeOff; //Active mode van de AGV
     964:	c0 e0       	ldi	r28, 0x00	; 0
     966:	d0 e0       	ldi	r29, 0x00	; 0

00000968 <.Loc.227>:
                if(!checkNoodstop()) {
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	10 e0       	ldi	r17, 0x00	; 0

0000096c <.Loc.228>:
                        mode = BoomgaardRijden;
     96c:	68 94       	set
     96e:	cc 24       	eor	r12, r12
     970:	c1 f8       	bld	r12, 1
     972:	d1 2c       	mov	r13, r1
     974:	32 c0       	rjmp	.+100    	; 0x9da <.L56>

00000976 <.L59>:
        switch(mode){
     976:	c3 30       	cpi	r28, 0x03	; 3
     978:	d1 05       	cpc	r29, r1
     97a:	09 f4       	brne	.+2      	; 0x97e <.Loc.231>

0000097c <L0^A>:
     97c:	cd c1       	rjmp	.+922    	; 0xd18 <.L63>

0000097e <.Loc.231>:
     97e:	c4 30       	cpi	r28, 0x04	; 4
     980:	d1 05       	cpc	r29, r1
     982:	59 f5       	brne	.+86     	; 0x9da <.L56>

00000984 <.L57>:
                setBothStepperMode(Off);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

0000098c <.LVL43>:
                LedNoodstopBack(1);
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 b9 01 	call	0x372	; 0x372 <LedNoodstopBack>

00000994 <.LVL44>:
                LedNoodstopFront(1);
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 ab 01 	call	0x356	; 0x356 <LedNoodstopFront>

0000099c <.LVL45>:
                TurnSignalLeft = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalLeft+0x1>
     9a4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalLeft>

000009a8 <.Loc.237>:
                TurnSignalRight = 1;
     9a8:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TurnSignalRight+0x1>
     9ac:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TurnSignalRight>

000009b0 <.Loc.239>:
                TreeSignalLeft = 1;
     9b0:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TreeSignalLeft+0x1>
     9b4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TreeSignalLeft>

000009b8 <.Loc.241>:
                TreeSignalRight = 1;
     9b8:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <TreeSignalRight+0x1>
     9bc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <TreeSignalRight>

000009c0 <.Loc.243>:
                setBreaklights(1);
     9c0:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

000009c4 <.LVL46>:
                if(!checkNoodstop()) {
     9c4:	0e 94 41 03 	call	0x682	; 0x682 <checkNoodstop>

000009c8 <.LVL47>:
     9c8:	c1 e0       	ldi	r28, 0x01	; 1
     9ca:	d0 e0       	ldi	r29, 0x00	; 0
     9cc:	89 2b       	or	r24, r25
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <.L66>
     9d0:	e8 01       	movw	r28, r16

000009d2 <.L66>:
     9d2:	cc 0f       	add	r28, r28
     9d4:	dd 1f       	adc	r29, r29
     9d6:	cc 0f       	add	r28, r28
     9d8:	dd 1f       	adc	r29, r29

000009da <.L56>:
        display(agv_ultrasoon_boom_rechts);
     9da:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <agv_ultrasoon_boom_rechts>
     9de:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>
     9e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <display>

000009e6 <.LVL49>:
        if(checkNoodstop()){
     9e6:	0e 94 41 03 	call	0x682	; 0x682 <checkNoodstop>

000009ea <.LVL50>:
     9ea:	89 2b       	or	r24, r25
     9ec:	59 f6       	brne	.-106    	; 0x984 <.L57>

000009ee <.Loc.253>:
        switch(mode){
     9ee:	c2 30       	cpi	r28, 0x02	; 2
     9f0:	d1 05       	cpc	r29, r1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <L0^A+0x2>

000009f4 <L0^A>:
     9f4:	b0 c0       	rjmp	.+352    	; 0xb56 <.L58>
     9f6:	0c f0       	brlt	.+2      	; 0x9fa <L0^A+0x2>

000009f8 <L0^A>:
     9f8:	be cf       	rjmp	.-132    	; 0x976 <.L59>
     9fa:	20 97       	sbiw	r28, 0x00	; 0
     9fc:	91 f1       	breq	.+100    	; 0xa62 <.L60>
     9fe:	c1 30       	cpi	r28, 0x01	; 1
     a00:	d1 05       	cpc	r29, r1
     a02:	59 f7       	brne	.-42     	; 0x9da <.L56>

00000a04 <.Loc.254>:
                FrontDistance = agv_ultrasoon_voor_midden;
     a04:	a0 90 6e 02 	lds	r10, 0x026E	; 0x80026e <agv_ultrasoon_voor_midden>
     a08:	b0 90 6f 02 	lds	r11, 0x026F	; 0x80026f <agv_ultrasoon_voor_midden+0x1>

00000a0c <.Loc.256>:
                int IRState = checkFrontIRState();
     a0c:	0e 94 9e 03 	call	0x73c	; 0x73c <checkFrontIRState>

00000a10 <.LVL52>:
     a10:	e8 2e       	mov	r14, r24
     a12:	f9 2e       	mov	r15, r25

00000a14 <.Loc.258>:
                switch(IRState){
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	e9 16       	cp	r14, r25
     a18:	f1 04       	cpc	r15, r1
     a1a:	09 f4       	brne	.+2      	; 0xa1e <L0^A+0x2>

00000a1c <L0^A>:
     a1c:	85 c0       	rjmp	.+266    	; 0xb28 <.L67>
     a1e:	0c f0       	brlt	.+2      	; 0xa22 <L0^A+0x2>

00000a20 <L0^A>:
     a20:	61 c0       	rjmp	.+194    	; 0xae4 <.L68>
     a22:	e1 14       	cp	r14, r1
     a24:	f1 04       	cpc	r15, r1
     a26:	09 f4       	brne	.+2      	; 0xa2a <L0^A+0x2>

00000a28 <L0^A>:
     a28:	70 c0       	rjmp	.+224    	; 0xb0a <.L69>
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	e8 16       	cp	r14, r24
     a2e:	f1 04       	cpc	r15, r1
     a30:	a1 f6       	brne	.-88     	; 0x9da <.L56>

00000a32 <.Loc.259>:
                        TurnSignalLeft = 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalLeft+0x1>
     a3a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalLeft>

00000a3e <.Loc.261>:
                        TurnSignalRight = 0;
     a3e:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <TurnSignalRight+0x1>
     a42:	00 93 3a 02 	sts	0x023A, r16	; 0x80023a <TurnSignalRight>

00000a46 <.Loc.263>:
                        setStepperMode(rightMotor, BackwardStep);
     a46:	6c 2d       	mov	r22, r12
     a48:	7d 2d       	mov	r23, r13
     a4a:	8b e0       	ldi	r24, 0x0B	; 11
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000a52 <.LVL54>:
                        setStepperMode(leftMotor, Off);
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000a5e <.LVL55>:
                        break;
     a5e:	e7 01       	movw	r28, r14

00000a60 <.Loc.266>:
     a60:	bc cf       	rjmp	.-136    	; 0x9da <.L56>

00000a62 <.L60>:
                setBothStepperMode(Off);
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000a6a <.LVL58>:
                LedNoodstopBack(0);
     a6a:	c8 01       	movw	r24, r16
     a6c:	0e 94 b9 01 	call	0x372	; 0x372 <LedNoodstopBack>

00000a70 <.LVL59>:
                LedNoodstopFront(0);
     a70:	c8 01       	movw	r24, r16
     a72:	0e 94 ab 01 	call	0x356	; 0x356 <LedNoodstopFront>

00000a76 <.LVL60>:
                TurnSignalLeft = 0;
     a76:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <TurnSignalLeft+0x1>
     a7a:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <TurnSignalLeft>

00000a7e <.Loc.272>:
                TurnSignalRight = 0;
     a7e:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <TurnSignalRight+0x1>
     a82:	00 93 3a 02 	sts	0x023A, r16	; 0x80023a <TurnSignalRight>

00000a86 <.Loc.274>:
                TreeSignalLeft = 0;
     a86:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <TreeSignalLeft+0x1>
     a8a:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <TreeSignalLeft>

00000a8e <.Loc.276>:
                TreeSignalRight = 0;
     a8e:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <TreeSignalRight+0x1>
     a92:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <TreeSignalRight>

00000a96 <.Loc.278>:
                setBreaklights(0);
     a96:	c8 01       	movw	r24, r16
     a98:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000a9c <.LVL61>:
                if(isStartButtonPressed()){
     a9c:	0e 94 4a 03 	call	0x694	; 0x694 <isStartButtonPressed>

00000aa0 <.LVL62>:
     aa0:	28 2f       	mov	r18, r24
     aa2:	39 2f       	mov	r19, r25

00000aa4 <.Loc.281>:
     aa4:	21 15       	cp	r18, r1
     aa6:	31 05       	cpc	r19, r1
     aa8:	11 f4       	brne	.+4      	; 0xaae <.L90>

00000aaa <.LBB41>:
     aaa:	e9 01       	movw	r28, r18
     aac:	96 cf       	rjmp	.-212    	; 0x9da <.L56>

00000aae <.L90>:
                    int switchState = checkModeSwitchState();
     aae:	0e 94 50 03 	call	0x6a0	; 0x6a0 <checkModeSwitchState>

00000ab2 <.LVL63>:
     ab2:	28 2f       	mov	r18, r24
     ab4:	39 2f       	mov	r19, r25

00000ab6 <.Loc.284>:
                    switch(switchState){
     ab6:	21 30       	cpi	r18, 0x01	; 1
     ab8:	31 05       	cpc	r19, r1
     aba:	61 f0       	breq	.+24     	; 0xad4 <.L64>
     abc:	22 30       	cpi	r18, 0x02	; 2
     abe:	31 05       	cpc	r19, r1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <.LBI42>

00000ac2 <L0^A>:
     ac2:	8b cf       	rjmp	.-234    	; 0x9da <.L56>

00000ac4 <.LBI42>:
     ac4:	8f e3       	ldi	r24, 0x3F	; 63
     ac6:	9c e9       	ldi	r25, 0x9C	; 156

00000ac8 <.L1^B5>:
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <.L1^B5>
     acc:	00 c0       	rjmp	.+0      	; 0xace <L0^A>

00000ace <L0^A>:
	...

00000ad0 <.Loc.294>:
                        mode = BoomgaardRijden;
     ad0:	e9 01       	movw	r28, r18

00000ad2 <.Loc.295>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     ad2:	83 cf       	rjmp	.-250    	; 0x9da <.L56>

00000ad4 <.L64>:
	__builtin_avr_delay_cycles(__ticks_dc);
     ad4:	8f e3       	ldi	r24, 0x3F	; 63
     ad6:	9c e9       	ldi	r25, 0x9C	; 156

00000ad8 <.L1^B6>:
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <.L1^B6>
     adc:	00 c0       	rjmp	.+0      	; 0xade <L0^A>

00000ade <L0^A>:
	...

00000ae0 <.Loc.306>:
                        mode = Following;
     ae0:	e9 01       	movw	r28, r18

00000ae2 <.Loc.307>:
}
     ae2:	7b cf       	rjmp	.-266    	; 0x9da <.L56>

00000ae4 <.L68>:
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	e9 16       	cp	r14, r25
     ae8:	f1 04       	cpc	r15, r1
     aea:	09 f0       	breq	.+2      	; 0xaee <.Loc.309>

00000aec <L0^A>:
     aec:	76 cf       	rjmp	.-276    	; 0x9da <.L56>

00000aee <.Loc.309>:
                        followHand(filterDistance(FrontDistance));
     aee:	c5 01       	movw	r24, r10
     af0:	0e 94 b2 03 	call	0x764	; 0x764 <filterDistance>

00000af4 <.LVL68>:
     af4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <followHand>

00000af8 <.LVL69>:
                        TurnSignalLeft = 0;
     af8:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <TurnSignalLeft+0x1>
     afc:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <TurnSignalLeft>

00000b00 <.Loc.312>:
                        TurnSignalRight = 0;
     b00:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <TurnSignalRight+0x1>
     b04:	00 93 3a 02 	sts	0x023A, r16	; 0x80023a <TurnSignalRight>

00000b08 <.Loc.314>:
                        break;
     b08:	68 cf       	rjmp	.-304    	; 0x9da <.L56>

00000b0a <.L69>:
                        setBothStepperMode(Off);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000b12 <.LVL70>:
                        TurnSignalLeft = 1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalLeft+0x1>
     b1a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalLeft>

00000b1e <.Loc.318>:
                        TurnSignalRight = 1;
     b1e:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TurnSignalRight+0x1>
     b22:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TurnSignalRight>

00000b26 <.Loc.320>:
                        break;
     b26:	59 cf       	rjmp	.-334    	; 0x9da <.L56>

00000b28 <.L67>:
                        TurnSignalRight = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TurnSignalRight+0x1>
     b30:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TurnSignalRight>

00000b34 <.Loc.323>:
                        TurnSignalLeft = 0;
     b34:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <TurnSignalLeft+0x1>
     b38:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <TurnSignalLeft>

00000b3c <.Loc.325>:
                        setStepperMode(leftMotor, BackwardStep);
     b3c:	6c 2d       	mov	r22, r12
     b3e:	7d 2d       	mov	r23, r13
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000b48 <.LVL71>:
                        setStepperMode(rightMotor, Off);
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	8b e0       	ldi	r24, 0x0B	; 11
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000b54 <.LVL72>:
                        break;
     b54:	42 cf       	rjmp	.-380    	; 0x9da <.L56>

00000b56 <.L58>:
                int WorldState = checkSensors();
     b56:	0e 94 c4 03 	call	0x788	; 0x788 <checkSensors>

00000b5a <.LVL74>:
     b5a:	e8 2e       	mov	r14, r24
     b5c:	f9 2e       	mov	r15, r25

00000b5e <.Loc.330>:
                if(nietInEenPad() && !alBochtGemaakt){
     b5e:	0e 94 29 03 	call	0x652	; 0x652 <nietInEenPad>

00000b62 <.LVL76>:
     b62:	89 2b       	or	r24, r25
     b64:	31 f0       	breq	.+12     	; 0xb72 <.L72>

00000b66 <.Loc.334>:
     b66:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <alBochtGemaakt.6>
     b6a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <alBochtGemaakt.6+0x1>
     b6e:	89 2b       	or	r24, r25
     b70:	71 f1       	breq	.+92     	; 0xbce <.L91>

00000b72 <.L72>:
                } else if(nietInEenPad()){
     b72:	0e 94 29 03 	call	0x652	; 0x652 <nietInEenPad>

00000b76 <.LVL77>:
     b76:	89 2b       	or	r24, r25
     b78:	09 f0       	breq	.+2      	; 0xb7c <.L73>

00000b7a <L0^A>:
     b7a:	45 c0       	rjmp	.+138    	; 0xc06 <.L92>

00000b7c <.L73>:
                switch(WorldState){
     b7c:	22 e0       	ldi	r18, 0x02	; 2
     b7e:	e2 16       	cp	r14, r18
     b80:	f1 04       	cpc	r15, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <L0^A+0x2>

00000b84 <L0^A>:
     b84:	83 c0       	rjmp	.+262    	; 0xc8c <.L75>
     b86:	0c f0       	brlt	.+2      	; 0xb8a <L0^A+0x2>

00000b88 <L0^A>:
     b88:	51 c0       	rjmp	.+162    	; 0xc2c <.L76>
     b8a:	e1 14       	cp	r14, r1
     b8c:	f1 04       	cpc	r15, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <L0^A+0x2>

00000b90 <L0^A>:
     b90:	74 c0       	rjmp	.+232    	; 0xc7a <.L77>
     b92:	ea 94       	dec	r14
     b94:	ef 28       	or	r14, r15
     b96:	09 f0       	breq	.+2      	; 0xb9a <.Loc.340>

00000b98 <L0^A>:
     b98:	20 cf       	rjmp	.-448    	; 0x9da <.L56>

00000b9a <.Loc.340>:
                        setBothStepperMode(Off);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000ba2 <.LVL79>:
                        TreeSignalLeft = 1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TreeSignalLeft+0x1>
     baa:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TreeSignalLeft>

00000bae <.Loc.343>:
                        setBreaklights(1);
     bae:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000bb2 <.LBB56>:
	__builtin_avr_delay_cycles(__ticks_dc);
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	97 e9       	ldi	r25, 0x97	; 151
     bb6:	2a e3       	ldi	r18, 0x3A	; 58

00000bb8 <.L1^B7>:
     bb8:	81 50       	subi	r24, 0x01	; 1
     bba:	90 40       	sbci	r25, 0x00	; 0
     bbc:	20 40       	sbci	r18, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <.L1^B7>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <L0^A>

00000bc2 <L0^A>:
	...

00000bc4 <.LBE56>:
                        TreeSignalLeft = 0;
     bc4:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <TreeSignalLeft+0x1>
     bc8:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <TreeSignalLeft>

00000bcc <.Loc.355>:
                        break;
     bcc:	06 cf       	rjmp	.-500    	; 0x9da <.L56>

00000bce <.L91>:
     bce:	2f ef       	ldi	r18, 0xFF	; 255
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	92 e0       	ldi	r25, 0x02	; 2

00000bd4 <.L1^B8>:
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	80 40       	sbci	r24, 0x00	; 0
     bd8:	90 40       	sbci	r25, 0x00	; 0
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <.L1^B8>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <L0^A>

00000bde <L0^A>:
	...

00000be0 <.LBE51>:
                    if(nietInEenPad() && !alBochtGemaakt){
     be0:	0e 94 29 03 	call	0x652	; 0x652 <nietInEenPad>

00000be4 <.LVL84>:
     be4:	89 2b       	or	r24, r25
     be6:	51 f2       	breq	.-108    	; 0xb7c <.L73>

00000be8 <.Loc.369>:
     be8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <alBochtGemaakt.6>
     bec:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <alBochtGemaakt.6+0x1>
     bf0:	89 2b       	or	r24, r25
     bf2:	21 f6       	brne	.-120    	; 0xb7c <.L73>

00000bf4 <.Loc.370>:
                        alBochtGemaakt = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <alBochtGemaakt.6+0x1>
     bfc:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <alBochtGemaakt.6>

00000c00 <.Loc.372>:
                        mode = BoomgaardBocht;
     c00:	c3 e0       	ldi	r28, 0x03	; 3
     c02:	d0 e0       	ldi	r29, 0x00	; 0
     c04:	bb cf       	rjmp	.-138    	; 0xb7c <.L73>

00000c06 <.L92>:
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	80 e7       	ldi	r24, 0x70	; 112
     c0a:	92 e0       	ldi	r25, 0x02	; 2

00000c0c <.L1^B9>:
     c0c:	21 50       	subi	r18, 0x01	; 1
     c0e:	80 40       	sbci	r24, 0x00	; 0
     c10:	90 40       	sbci	r25, 0x00	; 0
     c12:	e1 f7       	brne	.-8      	; 0xc0c <.L1^B9>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <L0^A>

00000c16 <L0^A>:
	...

00000c18 <.LBE53>:
                    if(nietInEenPad()){
     c18:	0e 94 29 03 	call	0x652	; 0x652 <nietInEenPad>

00000c1c <.LVL88>:
     c1c:	c1 e0       	ldi	r28, 0x01	; 1
     c1e:	d0 e0       	ldi	r29, 0x00	; 0

00000c20 <.Loc.386>:
     c20:	89 2b       	or	r24, r25
     c22:	09 f0       	breq	.+2      	; 0xc26 <.L74>
     c24:	e8 01       	movw	r28, r16

00000c26 <.L74>:
     c26:	cc 0f       	add	r28, r28
     c28:	dd 1f       	adc	r29, r29
     c2a:	a8 cf       	rjmp	.-176    	; 0xb7c <.L73>

00000c2c <.L76>:
     c2c:	23 e0       	ldi	r18, 0x03	; 3
     c2e:	e2 16       	cp	r14, r18
     c30:	f1 04       	cpc	r15, r1
     c32:	09 f0       	breq	.+2      	; 0xc36 <.Loc.388>

00000c34 <L0^A>:
     c34:	d2 ce       	rjmp	.-604    	; 0x9da <.L56>

00000c36 <.Loc.388>:
                        int correction = needCorrection();
     c36:	0e 94 34 03 	call	0x668	; 0x668 <needCorrection>

00000c3a <.LVL91>:
     c3a:	e8 2e       	mov	r14, r24

00000c3c <.Loc.390>:
     c3c:	f9 2e       	mov	r15, r25

00000c3e <.Loc.391>:
                        setBreaklights(0);
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000c44 <.LVL94>:
                        switch(correction){
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	e8 16       	cp	r14, r24
     c48:	f1 04       	cpc	r15, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <L0^A+0x2>

00000c4c <L0^A>:
     c4c:	58 c0       	rjmp	.+176    	; 0xcfe <.L80>
     c4e:	c4 f5       	brge	.+112    	; 0xcc0 <.L81>
     c50:	e1 14       	cp	r14, r1
     c52:	f1 04       	cpc	r15, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <L0^A+0x2>

00000c56 <L0^A>:
     c56:	4e c0       	rjmp	.+156    	; 0xcf4 <.L82>
     c58:	ea 94       	dec	r14
     c5a:	ef 28       	or	r14, r15
     c5c:	09 f0       	breq	.+2      	; 0xc60 <.Loc.393>

00000c5e <L0^A>:
     c5e:	bd ce       	rjmp	.-646    	; 0x9da <.L56>

00000c60 <.Loc.393>:
                                setStepperMode(rightMotor, Off);
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	8b e0       	ldi	r24, 0x0B	; 11
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000c6c <.LVL95>:
                                setStepperMode(leftMotor, ForwardStep);
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000c78 <.LVL96>:
                                break;
     c78:	b0 ce       	rjmp	.-672    	; 0x9da <.L56>

00000c7a <.L77>:
                        setBothStepperMode(Off);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000c82 <.LVL98>:
                        setBreaklights(1);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000c8a <.LVL99>:
                        break;
     c8a:	a7 ce       	rjmp	.-690    	; 0x9da <.L56>

00000c8c <.L75>:
                        setBothStepperMode(Off);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000c94 <.LVL100>:
                        TreeSignalRight = 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <TreeSignalRight+0x1>
     c9c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <TreeSignalRight>

00000ca0 <.Loc.402>:
                        setBreaklights(1);
     ca0:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000ca4 <.LBB58>:
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	97 e9       	ldi	r25, 0x97	; 151
     ca8:	2a e3       	ldi	r18, 0x3A	; 58

00000caa <.L1^B10>:
     caa:	81 50       	subi	r24, 0x01	; 1
     cac:	90 40       	sbci	r25, 0x00	; 0
     cae:	20 40       	sbci	r18, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <.L1^B10>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <L0^A>

00000cb4 <L0^A>:
	...

00000cb6 <.LBE58>:
                        TreeSignalRight = 0;
     cb6:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <TreeSignalRight+0x1>
     cba:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <TreeSignalRight>

00000cbe <.Loc.414>:
                        break;
     cbe:	8d ce       	rjmp	.-742    	; 0x9da <.L56>

00000cc0 <.L81>:
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	e8 16       	cp	r14, r24
     cc4:	f1 04       	cpc	r15, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <.Loc.416>

00000cc8 <L0^A>:
     cc8:	88 ce       	rjmp	.-752    	; 0x9da <.L56>

00000cca <.Loc.416>:
                                TreeSignalLeft = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TreeSignalLeft+0x1>
     cd2:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TreeSignalLeft>

00000cd6 <.Loc.418>:
                                TreeSignalRight = 1;
     cd6:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <TreeSignalRight+0x1>
     cda:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <TreeSignalRight>

00000cde <.Loc.420>:
                                TurnSignalLeft = 1;
     cde:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalLeft+0x1>
     ce2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalLeft>

00000ce6 <.Loc.422>:
                                TurnSignalRight = 1;
     ce6:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TurnSignalRight+0x1>
     cea:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TurnSignalRight>

00000cee <.Loc.424>:
                                setBothStepperMode(Off);
     cee:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000cf2 <.LVL104>:
                                break;
     cf2:	73 ce       	rjmp	.-794    	; 0x9da <.L56>

00000cf4 <.L82>:
                                setBothStepperMode(ForwardStep);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000cfc <.LVL105>:
                                break;
     cfc:	6e ce       	rjmp	.-804    	; 0x9da <.L56>

00000cfe <.L80>:
                                setStepperMode(leftMotor, Off);
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	8a e0       	ldi	r24, 0x0A	; 10
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000d0a <.LVL106>:
                                setStepperMode(rightMotor, ForwardStep);
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	8b e0       	ldi	r24, 0x0B	; 11
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000d16 <.LVL107>:
                                break;
     d16:	61 ce       	rjmp	.-830    	; 0x9da <.L56>

00000d18 <.L63>:
                if(startTurn(direction) && (bochtGemaakt == 0)){
     d18:	c8 01       	movw	r24, r16
     d1a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <startTurn>

00000d1e <.LVL109>:
     d1e:	89 2b       	or	r24, r25
     d20:	b9 f0       	breq	.+46     	; 0xd50 <.L85>

00000d22 <.Loc.437>:
     d22:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <bochtGemaakt.4>
     d26:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <bochtGemaakt.4+0x1>
     d2a:	89 2b       	or	r24, r25
     d2c:	31 f4       	brne	.+12     	; 0xd3a <.L88>

00000d2e <.Loc.438>:
                    bochtGemaakt = 1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <bochtGemaakt.4+0x1>
     d36:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <bochtGemaakt.4>

00000d3a <.L88>:
                    if(bit_is_clear(IRPIN, IRSensorLeft) || bit_is_clear(IRPIN, IRSensorRight)){
     d3a:	02 9b       	sbis	0x00, 2	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <.L87>

00000d3e <.Loc.442>:
     d3e:	03 99       	sbic	0x00, 3	; 0
     d40:	4c ce       	rjmp	.-872    	; 0x9da <.L56>

00000d42 <.L87>:
                        bochtGemaakt = 0;
     d42:	10 93 53 02 	sts	0x0253, r17	; 0x800253 <bochtGemaakt.4+0x1>
     d46:	00 93 52 02 	sts	0x0252, r16	; 0x800252 <bochtGemaakt.4>

00000d4a <.Loc.445>:
                        mode = BoomgaardRijden;
     d4a:	cc 2d       	mov	r28, r12
     d4c:	dd 2d       	mov	r29, r13
     d4e:	45 ce       	rjmp	.-886    	; 0x9da <.L56>

00000d50 <.L85>:
                if(bochtGemaakt){
     d50:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <bochtGemaakt.4>
     d54:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <bochtGemaakt.4+0x1>
     d58:	89 2b       	or	r24, r25
     d5a:	09 f4       	brne	.+2      	; 0xd5e <L0^A+0x2>

00000d5c <L0^A>:
     d5c:	3e ce       	rjmp	.-900    	; 0x9da <.L56>
     d5e:	ed cf       	rjmp	.-38     	; 0xd3a <.L88>

00000d60 <setStepperMode>:
void setBothStepperMode(int mode){
    setStepperMode(leftMotor, mode);
    setStepperMode(rightMotor, mode);
}

void setStepperMode(int motor, int mode){
     d60:	28 2f       	mov	r18, r24
     d62:	39 2f       	mov	r19, r25
     d64:	86 2f       	mov	r24, r22

00000d66 <.Loc.2>:
     d66:	97 2f       	mov	r25, r23

00000d68 <.Loc.3>:

    int state;
    if(mode == Off){
     d68:	51 e0       	ldi	r21, 0x01	; 1
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 05       	cpc	r25, r1
     d70:	69 f0       	breq	.+26     	; 0xd8c <.L8>

00000d72 <.L2>:
        state = 1;
    }


    int** motorLoop;
    switch(motor){
     d72:	2a 30       	cpi	r18, 0x0A	; 10
     d74:	31 05       	cpc	r19, r1
     d76:	61 f0       	breq	.+24     	; 0xd90 <.L3>
     d78:	2b 30       	cpi	r18, 0x0B	; 11
     d7a:	31 05       	cpc	r19, r1
     d7c:	81 f0       	breq	.+32     	; 0xd9e <.L4>

00000d7e <.L5>:
            motorLoop = &rightMotorLoop;
            rightMotorEnabled = state;
            break;
    }

    switch(mode){
     d7e:	02 97       	sbiw	r24, 0x02	; 2
     d80:	a9 f0       	breq	.+42     	; 0xdac <.L9>
     d82:	83 e2       	ldi	r24, 0x23	; 35
     d84:	92 e0       	ldi	r25, 0x02	; 2

00000d86 <.L6>:
        default:
        case ForwardStep:
            *motorLoop = &LoopForward;
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24

00000d8a <.Loc.10>:
            break;
        case BackwardStep:
            *motorLoop = &LoopBackwards;
            break;
    }
}
     d8a:	08 95       	ret

00000d8c <.L8>:
    if(mode == Off){
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	f1 cf       	rjmp	.-30     	; 0xd72 <.L2>

00000d90 <.L3>:
            leftMotorEnabled = state;
     d90:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <leftMotorEnabled>
     d94:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <leftMotorEnabled+0x1>

00000d98 <.Loc.15>:
            motorLoop = &leftMotorLoop;
     d98:	e1 e1       	ldi	r30, 0x11	; 17
     d9a:	f2 e0       	ldi	r31, 0x02	; 2

00000d9c <.Loc.17>:
            break;
     d9c:	f0 cf       	rjmp	.-32     	; 0xd7e <.L5>

00000d9e <.L4>:
            rightMotorEnabled = state;
     d9e:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <rightMotorEnabled>
     da2:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <rightMotorEnabled+0x1>

00000da6 <.Loc.21>:
            motorLoop = &rightMotorLoop;
     da6:	ef e0       	ldi	r30, 0x0F	; 15
     da8:	f2 e0       	ldi	r31, 0x02	; 2

00000daa <.Loc.23>:
            break;
     daa:	e9 cf       	rjmp	.-46     	; 0xd7e <.L5>

00000dac <.L9>:
    switch(mode){
     dac:	83 e1       	ldi	r24, 0x13	; 19
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	ea cf       	rjmp	.-44     	; 0xd86 <.L6>

00000db2 <setBothStepperMode>:
void setBothStepperMode(int mode){
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	d8 2f       	mov	r29, r24
     db8:	c9 2f       	mov	r28, r25

00000dba <.Loc.27>:
    setStepperMode(leftMotor, mode);
     dba:	68 2f       	mov	r22, r24
     dbc:	79 2f       	mov	r23, r25
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	90 e0       	ldi	r25, 0x00	; 0

00000dc2 <.Loc.28>:
     dc2:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000dc6 <.LVL10>:
    setStepperMode(rightMotor, mode);
     dc6:	6d 2f       	mov	r22, r29
     dc8:	7c 2f       	mov	r23, r28
     dca:	8b e0       	ldi	r24, 0x0B	; 11
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 b0 06 	call	0xd60	; 0xd60 <setStepperMode>

00000dd2 <.LVL11>:
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <init_timer>:

//Clockspeed = 16.000.000 / 250 / 64 = 1.000
#define Clockspeed 1000
void init_timer(){
    // Use mode 0, clkdiv = 64
    TCCR0A = 0;
     dd8:	14 bc       	out	0x24, r1	; 36

00000dda <.Loc.34>:
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	85 bd       	out	0x25, r24	; 37

00000dde <.Loc.36>:

    // Disable PWM output
    OCR0A = 0;
     dde:	17 bc       	out	0x27, r1	; 39

00000de0 <.Loc.38>:
    OCR0B = 0;
     de0:	18 bc       	out	0x28, r1	; 40

00000de2 <.Loc.40>:

    //Overflow interrupt
    TIMSK0 = (1<<TOIE0);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

00000de8 <.Loc.42>:
    TCNT0 = 6;
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	86 bd       	out	0x26, r24	; 38

00000dec <.Loc.44>:

    sei();
     dec:	78 94       	sei

00000dee <.Loc.45>:
}
     dee:	08 95       	ret

00000df0 <initMotorpins>:
}


void initMotorpins(){
    for(int i = MotorLeftStartpin; i < MotorLeftStartpin+4; i++){
        MotorLeftDDR |= (1<<i);
     df0:	80 9a       	sbi	0x10, 0	; 16

00000df2 <.Loc.52>:
     df2:	81 9a       	sbi	0x10, 1	; 16

00000df4 <.Loc.56>:
     df4:	82 9a       	sbi	0x10, 2	; 16

00000df6 <.Loc.60>:
     df6:	83 9a       	sbi	0x10, 3	; 16

00000df8 <.LBB3>:
    }

    for(int i = MotorRightStartpin; i < MotorRightStartpin+4; i++){
        MotorRightDDR |= (1<<i);
     df8:	84 9a       	sbi	0x10, 4	; 16

00000dfa <.Loc.69>:
     dfa:	85 9a       	sbi	0x10, 5	; 16

00000dfc <.Loc.73>:
     dfc:	86 9a       	sbi	0x10, 6	; 16

00000dfe <.Loc.77>:
     dfe:	87 9a       	sbi	0x10, 7	; 16

00000e00 <.LBE3>:
    }
}
     e00:	08 95       	ret

00000e02 <initSteppermotorAVRDriver>:
    initMotorpins();
     e02:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <initMotorpins>

00000e06 <.LVL21>:
    init_timer();
     e06:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <init_timer>

00000e0a <.LVL22>:
    setBothStepperMode(Off);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <setBothStepperMode>

00000e12 <.LVL23>:
}
     e12:	08 95       	ret

00000e14 <LeftStepperNextStep>:

void LeftStepperNextStep(){
    static int position = 0;
    MotorLeftPort &= ~(0b1111<< MotorLeftStartpin);
     e14:	81 b3       	in	r24, 0x11	; 17
     e16:	80 7f       	andi	r24, 0xF0	; 240
     e18:	81 bb       	out	0x11, r24	; 17

00000e1a <.Loc.93>:
    MotorLeftPort |= ((*leftMotorLoop)[position] << MotorLeftStartpin);
     e1a:	81 b3       	in	r24, 0x11	; 17

00000e1c <.Loc.94>:
     e1c:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <leftMotorLoop>
     e20:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <leftMotorLoop+0x1>
     e24:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <position.1>
     e28:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <position.1+0x1>
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	e2 0f       	add	r30, r18
     e32:	f3 1f       	adc	r31, r19

00000e34 <.Loc.95>:
     e34:	90 81       	ld	r25, Z
     e36:	89 2b       	or	r24, r25
     e38:	81 bb       	out	0x11, r24	; 17

00000e3a <.Loc.96>:
    position++;
     e3a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <position.1>
     e3e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <position.1+0x1>
     e42:	9c 01       	movw	r18, r24
     e44:	2f 5f       	subi	r18, 0xFF	; 255
     e46:	3f 4f       	sbci	r19, 0xFF	; 255

00000e48 <.Loc.98>:
    if(position == LoopLength) position = 0;
     e48:	07 97       	sbiw	r24, 0x07	; 7
     e4a:	29 f0       	breq	.+10     	; 0xe56 <.L17>

00000e4c <.L15>:
    position++;
     e4c:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <position.1+0x1>
     e50:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <position.1>

00000e54 <.Loc.101>:
}
     e54:	08 95       	ret

00000e56 <.L17>:
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	f8 cf       	rjmp	.-16     	; 0xe4c <.L15>

00000e5c <RightStepperNextStep>:

void RightStepperNextStep(){
    static int position = 0;
    MotorRightPort &= ~(0b1111<<MotorRightStartpin);
     e5c:	81 b3       	in	r24, 0x11	; 17
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	81 bb       	out	0x11, r24	; 17

00000e62 <.Loc.106>:
    MotorRightPort |= ((*rightMotorLoop)[position] << MotorRightStartpin);
     e62:	81 b3       	in	r24, 0x11	; 17

00000e64 <.Loc.107>:
     e64:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <rightMotorLoop>
     e68:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <rightMotorLoop+0x1>
     e6c:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <position.0>
     e70:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <position.0+0x1>
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	e2 0f       	add	r30, r18
     e7a:	f3 1f       	adc	r31, r19

00000e7c <.Loc.108>:
     e7c:	20 81       	ld	r18, Z
     e7e:	31 81       	ldd	r19, Z+1	; 0x01
     e80:	22 95       	swap	r18
     e82:	32 95       	swap	r19
     e84:	30 7f       	andi	r19, 0xF0	; 240
     e86:	32 27       	eor	r19, r18
     e88:	20 7f       	andi	r18, 0xF0	; 240
     e8a:	32 27       	eor	r19, r18

00000e8c <.Loc.109>:
     e8c:	82 2b       	or	r24, r18
     e8e:	81 bb       	out	0x11, r24	; 17

00000e90 <.Loc.110>:
    position++;
     e90:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <position.0>
     e94:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <position.0+0x1>
     e98:	9c 01       	movw	r18, r24
     e9a:	2f 5f       	subi	r18, 0xFF	; 255
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255

00000e9e <.Loc.112>:
    if(position == LoopLength) position = 0;
     e9e:	07 97       	sbiw	r24, 0x07	; 7
     ea0:	29 f0       	breq	.+10     	; 0xeac <.L21>

00000ea2 <.L19>:
    position++;
     ea2:	30 93 5b 02 	sts	0x025B, r19	; 0x80025b <position.0+0x1>
     ea6:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <position.0>

00000eaa <.Loc.115>:
}
     eaa:	08 95       	ret

00000eac <.L21>:
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	f8 cf       	rjmp	.-16     	; 0xea2 <.L19>

00000eb2 <__vector_23>:


ISR(TIMER0_OVF_vect){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	0b b6       	in	r0, 0x3b	; 59
     ebe:	0f 92       	push	r0
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31

00000ed8 <.Loc.117>:
    if(leftMotorEnabled) LeftStepperNextStep();
     ed8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <leftMotorEnabled>
     edc:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <leftMotorEnabled+0x1>
     ee0:	89 2b       	or	r24, r25
     ee2:	d9 f4       	brne	.+54     	; 0xf1a <.L25>

00000ee4 <.L23>:
    if(rightMotorEnabled) RightStepperNextStep();
     ee4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <rightMotorEnabled>
     ee8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <rightMotorEnabled+0x1>
     eec:	89 2b       	or	r24, r25
     eee:	c1 f4       	brne	.+48     	; 0xf20 <.L26>

00000ef0 <.L24>:

    TCNT0 = 6;
     ef0:	86 e0       	ldi	r24, 0x06	; 6
     ef2:	86 bd       	out	0x26, r24	; 38

00000ef4 <.Loc.123>:
}
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <.L25>:
    if(leftMotorEnabled) LeftStepperNextStep();
     f1a:	0e 94 0a 07 	call	0xe14	; 0xe14 <LeftStepperNextStep>

00000f1e <.LVL24>:
     f1e:	e2 cf       	rjmp	.-60     	; 0xee4 <.L23>

00000f20 <.L26>:
    if(rightMotorEnabled) RightStepperNextStep();
     f20:	0e 94 2e 07 	call	0xe5c	; 0xe5c <RightStepperNextStep>

00000f24 <.LVL25>:
     f24:	e5 cf       	rjmp	.-54     	; 0xef0 <.L24>

00000f26 <getLeftSensorValue>:
int RightSensorArray[ValueArrayLength];


#define MaxDistanceOffset 10
int getLeftSensorValue(){
    int highestValue = LeftSensorArray[0];
     f26:	e8 e6       	ldi	r30, 0x68	; 104
     f28:	f2 e0       	ldi	r31, 0x02	; 2
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01

00000f2e <.LBB2>:
    int lowestValue = LeftSensorArray[0];
    for(int i = 0; i < ValueArrayLength; i++){
        if(LeftSensorArray[i] > highestValue) highestValue = LeftSensorArray[i];
     f2e:	42 81       	ldd	r20, Z+2	; 0x02
     f30:	53 81       	ldd	r21, Z+3	; 0x03

00000f32 <.Loc.13>:
     f32:	64 81       	ldd	r22, Z+4	; 0x04
     f34:	75 81       	ldd	r23, Z+5	; 0x05

00000f36 <.Loc.18>:
        if(LeftSensorArray[i] < lowestValue) lowestValue = LeftSensorArray[i];
     f36:	f2 2f       	mov	r31, r18
     f38:	e3 2f       	mov	r30, r19
     f3a:	42 17       	cp	r20, r18
     f3c:	53 07       	cpc	r21, r19
     f3e:	14 f4       	brge	.+4      	; 0xf44 <.L2>
     f40:	f4 2f       	mov	r31, r20
     f42:	e5 2f       	mov	r30, r21

00000f44 <.L2>:
     f44:	8f 2f       	mov	r24, r31
     f46:	9e 2f       	mov	r25, r30
     f48:	68 17       	cp	r22, r24
     f4a:	79 07       	cpc	r23, r25
     f4c:	0c f4       	brge	.+2      	; 0xf50 <.L3>
     f4e:	cb 01       	movw	r24, r22

00000f50 <.L3>:
    }

    if((highestValue - lowestValue) <= MaxDistanceOffset) {
     f50:	24 17       	cp	r18, r20
     f52:	35 07       	cpc	r19, r21
     f54:	0c f4       	brge	.+2      	; 0xf58 <.L5>
     f56:	9a 01       	movw	r18, r20

00000f58 <.L5>:
     f58:	26 17       	cp	r18, r22
     f5a:	37 07       	cpc	r19, r23
     f5c:	0c f4       	brge	.+2      	; 0xf60 <.L6>
     f5e:	9b 01       	movw	r18, r22

00000f60 <.L6>:
     f60:	28 1b       	sub	r18, r24
     f62:	39 0b       	sbc	r19, r25

00000f64 <.Loc.24>:
     f64:	2b 30       	cpi	r18, 0x0B	; 11
     f66:	31 05       	cpc	r19, r1
     f68:	14 f0       	brlt	.+4      	; 0xf6e <.L1>

00000f6a <.Loc.25>:
        return lowestValue;
    }
    return 100;
     f6a:	84 e6       	ldi	r24, 0x64	; 100
     f6c:	90 e0       	ldi	r25, 0x00	; 0

00000f6e <.L1>:
}
     f6e:	08 95       	ret

00000f70 <getRightSensorValue>:

int getRightSensorValue(){
    int highestValue = RightSensorArray[0];
     f70:	e2 e6       	ldi	r30, 0x62	; 98
     f72:	f2 e0       	ldi	r31, 0x02	; 2
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01

00000f78 <.LBB3>:
    int lowestValue = RightSensorArray[0];
    for(int i = 0; i < ValueArrayLength; i++){
        if(RightSensorArray[i] > highestValue) highestValue = RightSensorArray[i];
     f78:	42 81       	ldd	r20, Z+2	; 0x02
     f7a:	53 81       	ldd	r21, Z+3	; 0x03

00000f7c <.Loc.40>:
     f7c:	64 81       	ldd	r22, Z+4	; 0x04
     f7e:	75 81       	ldd	r23, Z+5	; 0x05

00000f80 <.Loc.45>:
        if(RightSensorArray[i] < lowestValue) lowestValue = RightSensorArray[i];
     f80:	f2 2f       	mov	r31, r18
     f82:	e3 2f       	mov	r30, r19
     f84:	42 17       	cp	r20, r18
     f86:	53 07       	cpc	r21, r19
     f88:	14 f4       	brge	.+4      	; 0xf8e <.L8>
     f8a:	f4 2f       	mov	r31, r20
     f8c:	e5 2f       	mov	r30, r21

00000f8e <.L8>:
     f8e:	8f 2f       	mov	r24, r31
     f90:	9e 2f       	mov	r25, r30
     f92:	68 17       	cp	r22, r24
     f94:	79 07       	cpc	r23, r25
     f96:	0c f4       	brge	.+2      	; 0xf9a <.L9>
     f98:	cb 01       	movw	r24, r22

00000f9a <.L9>:
    }

    if((highestValue - lowestValue) <= MaxDistanceOffset) {
     f9a:	24 17       	cp	r18, r20
     f9c:	35 07       	cpc	r19, r21
     f9e:	0c f4       	brge	.+2      	; 0xfa2 <.L11>
     fa0:	9a 01       	movw	r18, r20

00000fa2 <.L11>:
     fa2:	26 17       	cp	r18, r22
     fa4:	37 07       	cpc	r19, r23
     fa6:	0c f4       	brge	.+2      	; 0xfaa <.L12>
     fa8:	9b 01       	movw	r18, r22

00000faa <.L12>:
     faa:	28 1b       	sub	r18, r24
     fac:	39 0b       	sbc	r19, r25

00000fae <.Loc.51>:
     fae:	2b 30       	cpi	r18, 0x0B	; 11
     fb0:	31 05       	cpc	r19, r1
     fb2:	14 f0       	brlt	.+4      	; 0xfb8 <.L7>

00000fb4 <.Loc.52>:
        return lowestValue;
    }
    return 100;
     fb4:	84 e6       	ldi	r24, 0x64	; 100
     fb6:	90 e0       	ldi	r25, 0x00	; 0

00000fb8 <.L7>:
}
     fb8:	08 95       	ret

00000fba <agv_ultrasoon_init>:
*/


void agv_ultrasoon_init()
{
    cli();
     fba:	f8 94       	cli

00000fbc <.Loc.56>:
    TCCR3A |= (1<<COM3A1) | (1<<WGM31);
     fbc:	e0 e9       	ldi	r30, 0x90	; 144
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z

00000fc2 <.Loc.57>:
     fc2:	82 68       	ori	r24, 0x82	; 130
     fc4:	80 83       	st	Z, r24

00000fc6 <.Loc.58>:
    TCCR3B |= (1<<WGM33) | (1<<CS31) | (1<<WGM32);//wgm33 wgm32 wgm31
     fc6:	e1 e9       	ldi	r30, 0x91	; 145
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z

00000fcc <.Loc.59>:
     fcc:	8a 61       	ori	r24, 0x1A	; 26
     fce:	80 83       	st	Z, r24

00000fd0 <.Loc.60>:
    ICR3 = 32768;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e8       	ldi	r25, 0x80	; 128
     fd4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     fd8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000fdc <.Loc.62>:
    OCR3A = 20;//10microsec
     fdc:	84 e1       	ldi	r24, 0x14	; 20
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     fe4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000fe8 <.Loc.64>:
    OCR3B = 4800;// (10microsec + 480microsec+ marge) *2
     fe8:	80 ec       	ldi	r24, 0xC0	; 192
     fea:	92 e1       	ldi	r25, 0x12	; 18
     fec:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     ff0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>

00000ff4 <.Loc.66>:
    DDRE |= (1<<PE3);
     ff4:	6b 9a       	sbi	0x0d, 3	; 13

00000ff6 <.Loc.68>:
    TIMSK3 |= (1<<ICIE3) | (1<<OCIE3B);
     ff6:	e1 e7       	ldi	r30, 0x71	; 113
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z

00000ffc <.Loc.69>:
     ffc:	84 62       	ori	r24, 0x24	; 36
     ffe:	80 83       	st	Z, r24

00001000 <.Loc.70>:
    //pin change interrupt:
    PCICR |= (1<<PCIE2);//enables pci 16 tot 23
    1000:	e8 e6       	ldi	r30, 0x68	; 104
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z

00001006 <.Loc.71>:
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	80 83       	st	Z, r24

0000100a <.Loc.72>:
    sei();
    100a:	78 94       	sei

0000100c <.Loc.73>:
}
    100c:	08 95       	ret

0000100e <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    100e:	8f 93       	push	r24
    1010:	8f b7       	in	r24, 0x3f	; 63
    1012:	8f 93       	push	r24
    1014:	8b b7       	in	r24, 0x3b	; 59
    1016:	8f 93       	push	r24
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31

0000101c <.Loc.75>:
    agv_ultrasoon_current_sensor = (agv_ultrasoon_current_sensor<<1);
    101c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>
    1020:	88 0f       	add	r24, r24

00001022 <.Loc.77>:
    1022:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <agv_ultrasoon_current_sensor>

00001026 <.Loc.78>:
    if (agv_ultrasoon_current_sensor == (1<<5))//0b00100000
    1026:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

0000102a <.Loc.80>:
    102a:	80 32       	cpi	r24, 0x20	; 32
    102c:	a9 f0       	breq	.+42     	; 0x1058 <.L17>

0000102e <.L15>:
    {
        agv_ultrasoon_current_sensor = 2;

    }
    if(agv_ultrasoon_current_sensor == (1<<3)) agv_ultrasoon_current_sensor = (1<<4);
    102e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

00001032 <.Loc.83>:
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	a9 f0       	breq	.+42     	; 0x1060 <.L18>

00001036 <.L16>:
    PCMSK2 = agv_ultrasoon_current_sensor;
    1036:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>
    103a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

0000103e <.Loc.86>:
    //PORTA = agv_ultrasoon_current_sensor;
    TIMSK3 |= (1<<OCIE3B);
    103e:	e1 e7       	ldi	r30, 0x71	; 113
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z

00001044 <.Loc.87>:
    1044:	84 60       	ori	r24, 0x04	; 4
    1046:	80 83       	st	Z, r24

00001048 <.Loc.88>:
}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	8f 91       	pop	r24
    104e:	8b bf       	out	0x3b, r24	; 59
    1050:	8f 91       	pop	r24
    1052:	8f bf       	out	0x3f, r24	; 63
    1054:	8f 91       	pop	r24
    1056:	18 95       	reti

00001058 <.L17>:
        agv_ultrasoon_current_sensor = 2;
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <agv_ultrasoon_current_sensor>
    105e:	e7 cf       	rjmp	.-50     	; 0x102e <.L15>

00001060 <.L18>:
    if(agv_ultrasoon_current_sensor == (1<<3)) agv_ultrasoon_current_sensor = (1<<4);
    1060:	80 e1       	ldi	r24, 0x10	; 16
    1062:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <agv_ultrasoon_current_sensor>
    1066:	e7 cf       	rjmp	.-50     	; 0x1036 <.L16>

00001068 <__vector_31>:

volatile int arrayPositionLeft = 0;
volatile int arrayPositionRight = 0;
ISR(TIMER3_CAPT_vect)
{
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	0b b6       	in	r0, 0x3b	; 59
    1074:	0f 92       	push	r0
    1076:	2f 93       	push	r18
    1078:	3f 93       	push	r19
    107a:	4f 93       	push	r20
    107c:	5f 93       	push	r21
    107e:	6f 93       	push	r22
    1080:	7f 93       	push	r23
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	af 93       	push	r26
    1088:	bf 93       	push	r27
    108a:	ef 93       	push	r30
    108c:	ff 93       	push	r31
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	00 d0       	rcall	.+0      	; 0x1094 <L0^A>

00001094 <L0^A>:
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62

0000109a <.Loc.94>:
    //zet max naar sensorwaarde
    if(agv_ultrasoon_current_sensor == 0b00000010)
    109a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

0000109e <.Loc.96>:
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	c9 f1       	breq	.+114    	; 0x1114 <.L25>

000010a2 <.Loc.97>:
    {
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
        if(agv_ultrasoon_boom_rechts != 0) RightSensorArray[arrayPositionRight++] = agv_ultrasoon_boom_rechts;
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
    10a2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

000010a6 <.Loc.99>:
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	09 f4       	brne	.+2      	; 0x10ac <.Loc.100>

000010aa <L0^A>:
    10aa:	85 c0       	rjmp	.+266    	; 0x11b6 <.L26>

000010ac <.Loc.100>:
    {
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
        if(agv_ultrasoon_boom_links != 0) LeftSensorArray[arrayPositionLeft++] = agv_ultrasoon_boom_links;

    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
    10ac:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

000010b0 <.Loc.102>:
    10b0:	80 31       	cpi	r24, 0x10	; 16
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <.L21>

000010b4 <L0^A>:
    10b4:	d1 c0       	rjmp	.+418    	; 0x1258 <.L27>

000010b6 <.L21>:
    {
        agv_ultrasoon_voor_midden = (ICR3 - 4454)/4*0.0343;
    }
    PCMSK2 = 0;
    10b6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

000010ba <.Loc.105>:

    if(arrayPositionLeft >= ValueArrayLength) arrayPositionLeft = 0;
    10ba:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <arrayPositionLeft>
    10be:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <arrayPositionLeft+0x1>

000010c2 <.Loc.107>:
    10c2:	03 97       	sbiw	r24, 0x03	; 3
    10c4:	24 f0       	brlt	.+8      	; 0x10ce <.L23>

000010c6 <.Loc.108>:
    10c6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <arrayPositionLeft+0x1>
    10ca:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <arrayPositionLeft>

000010ce <.L23>:
    if(arrayPositionRight >= ValueArrayLength) arrayPositionRight = 0;
    10ce:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <arrayPositionRight>
    10d2:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <arrayPositionRight+0x1>

000010d6 <.Loc.112>:
    10d6:	03 97       	sbiw	r24, 0x03	; 3
    10d8:	24 f0       	brlt	.+8      	; 0x10e2 <.L19>

000010da <.Loc.113>:
    10da:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <arrayPositionRight+0x1>
    10de:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <arrayPositionRight>

000010e2 <.L19>:

}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0b be       	out	0x3b, r0	; 59
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <.L25>:
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
    1114:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    1118:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

0000111c <.Loc.118>:
    111c:	86 56       	subi	r24, 0x66	; 102
    111e:	91 41       	sbci	r25, 0x11	; 17

00001120 <.Loc.119>:
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24

00001128 <.Loc.120>:
    1128:	9c 01       	movw	r18, r24
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	29 83       	std	Y+1, r18	; 0x01
    1130:	3a 83       	std	Y+2, r19	; 0x02
    1132:	4b 83       	std	Y+3, r20	; 0x03
    1134:	5c 83       	std	Y+4, r21	; 0x04
    1136:	ca 01       	movw	r24, r20
    1138:	b9 01       	movw	r22, r18
    113a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__floatunsisf>

0000113e <.LVL12>:
    113e:	28 e2       	ldi	r18, 0x28	; 40
    1140:	3e e7       	ldi	r19, 0x7E	; 126
    1142:	4c e0       	ldi	r20, 0x0C	; 12
    1144:	5d e3       	ldi	r21, 0x3D	; 61
    1146:	69 83       	std	Y+1, r22	; 0x01
    1148:	7a 83       	std	Y+2, r23	; 0x02
    114a:	8b 83       	std	Y+3, r24	; 0x03
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	69 81       	ldd	r22, Y+1	; 0x01
    1150:	7a 81       	ldd	r23, Y+2	; 0x02
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3>

0000115a <.LVL13>:
    115a:	69 83       	std	Y+1, r22	; 0x01
    115c:	7a 83       	std	Y+2, r23	; 0x02
    115e:	8b 83       	std	Y+3, r24	; 0x03
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	69 81       	ldd	r22, Y+1	; 0x01
    1164:	7a 81       	ldd	r23, Y+2	; 0x02
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fixunssfsi>

0000116e <.LVL14>:
    116e:	46 2f       	mov	r20, r22
    1170:	57 2f       	mov	r21, r23
    1172:	50 93 71 02 	sts	0x0271, r21	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>
    1176:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <agv_ultrasoon_boom_rechts>

0000117a <.Loc.122>:
        if(agv_ultrasoon_boom_rechts != 0) RightSensorArray[arrayPositionRight++] = agv_ultrasoon_boom_rechts;
    117a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <agv_ultrasoon_boom_rechts>
    117e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>

00001182 <.Loc.124>:
    1182:	89 2b       	or	r24, r25
    1184:	09 f4       	brne	.+2      	; 0x1188 <.Loc.125>

00001186 <L0^A>:
    1186:	97 cf       	rjmp	.-210    	; 0x10b6 <.L21>

00001188 <.Loc.125>:
    1188:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <agv_ultrasoon_boom_rechts>
    118c:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>

00001190 <.Loc.127>:
    1190:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <arrayPositionRight>
    1194:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <arrayPositionRight+0x1>
    1198:	ac 01       	movw	r20, r24
    119a:	4f 5f       	subi	r20, 0xFF	; 255
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <arrayPositionRight+0x1>
    11a2:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <arrayPositionRight>

000011a6 <.Loc.128>:
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	fc 01       	movw	r30, r24
    11ac:	ee 59       	subi	r30, 0x9E	; 158
    11ae:	fd 4f       	sbci	r31, 0xFD	; 253
    11b0:	31 83       	std	Z+1, r19	; 0x01
    11b2:	20 83       	st	Z, r18
    11b4:	80 cf       	rjmp	.-256    	; 0x10b6 <.L21>

000011b6 <.L26>:
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
    11b6:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    11ba:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

000011be <.Loc.131>:
    11be:	86 56       	subi	r24, 0x66	; 102
    11c0:	91 41       	sbci	r25, 0x11	; 17

000011c2 <.Loc.132>:
    11c2:	96 95       	lsr	r25
    11c4:	87 95       	ror	r24
    11c6:	96 95       	lsr	r25
    11c8:	87 95       	ror	r24

000011ca <.Loc.133>:
    11ca:	9c 01       	movw	r18, r24
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	29 83       	std	Y+1, r18	; 0x01
    11d2:	3a 83       	std	Y+2, r19	; 0x02
    11d4:	4b 83       	std	Y+3, r20	; 0x03
    11d6:	5c 83       	std	Y+4, r21	; 0x04
    11d8:	ca 01       	movw	r24, r20
    11da:	b9 01       	movw	r22, r18
    11dc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__floatunsisf>

000011e0 <.LVL15>:
    11e0:	28 e2       	ldi	r18, 0x28	; 40
    11e2:	3e e7       	ldi	r19, 0x7E	; 126
    11e4:	4c e0       	ldi	r20, 0x0C	; 12
    11e6:	5d e3       	ldi	r21, 0x3D	; 61
    11e8:	69 83       	std	Y+1, r22	; 0x01
    11ea:	7a 83       	std	Y+2, r23	; 0x02
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	69 81       	ldd	r22, Y+1	; 0x01
    11f2:	7a 81       	ldd	r23, Y+2	; 0x02
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3>

000011fc <.LVL16>:
    11fc:	69 83       	std	Y+1, r22	; 0x01
    11fe:	7a 83       	std	Y+2, r23	; 0x02
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	69 81       	ldd	r22, Y+1	; 0x01
    1206:	7a 81       	ldd	r23, Y+2	; 0x02
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fixunssfsi>

00001210 <.LVL17>:
    1210:	46 2f       	mov	r20, r22
    1212:	57 2f       	mov	r21, r23
    1214:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <agv_ultrasoon_boom_links+0x1>
    1218:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <agv_ultrasoon_boom_links>

0000121c <.Loc.135>:
        if(agv_ultrasoon_boom_links != 0) LeftSensorArray[arrayPositionLeft++] = agv_ultrasoon_boom_links;
    121c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <agv_ultrasoon_boom_links>
    1220:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <agv_ultrasoon_boom_links+0x1>

00001224 <.Loc.137>:
    1224:	89 2b       	or	r24, r25
    1226:	09 f4       	brne	.+2      	; 0x122a <.Loc.138>

00001228 <L0^A>:
    1228:	46 cf       	rjmp	.-372    	; 0x10b6 <.L21>

0000122a <.Loc.138>:
    122a:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <agv_ultrasoon_boom_links>
    122e:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <agv_ultrasoon_boom_links+0x1>

00001232 <.Loc.140>:
    1232:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <arrayPositionLeft>
    1236:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <arrayPositionLeft+0x1>
    123a:	ac 01       	movw	r20, r24
    123c:	4f 5f       	subi	r20, 0xFF	; 255
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
    1240:	50 93 61 02 	sts	0x0261, r21	; 0x800261 <arrayPositionLeft+0x1>
    1244:	40 93 60 02 	sts	0x0260, r20	; 0x800260 <arrayPositionLeft>

00001248 <.Loc.141>:
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	fc 01       	movw	r30, r24
    124e:	e8 59       	subi	r30, 0x98	; 152
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	31 83       	std	Z+1, r19	; 0x01
    1254:	20 83       	st	Z, r18
    1256:	2f cf       	rjmp	.-418    	; 0x10b6 <.L21>

00001258 <.L27>:
        agv_ultrasoon_voor_midden = (ICR3 - 4454)/4*0.0343;
    1258:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    125c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00001260 <.Loc.144>:
    1260:	86 56       	subi	r24, 0x66	; 102
    1262:	91 41       	sbci	r25, 0x11	; 17

00001264 <.Loc.145>:
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24

0000126c <.Loc.146>:
    126c:	9c 01       	movw	r18, r24
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	29 83       	std	Y+1, r18	; 0x01
    1274:	3a 83       	std	Y+2, r19	; 0x02
    1276:	4b 83       	std	Y+3, r20	; 0x03
    1278:	5c 83       	std	Y+4, r21	; 0x04
    127a:	ca 01       	movw	r24, r20
    127c:	b9 01       	movw	r22, r18
    127e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__floatunsisf>

00001282 <.LVL18>:
    1282:	28 e2       	ldi	r18, 0x28	; 40
    1284:	3e e7       	ldi	r19, 0x7E	; 126
    1286:	4c e0       	ldi	r20, 0x0C	; 12
    1288:	5d e3       	ldi	r21, 0x3D	; 61
    128a:	69 83       	std	Y+1, r22	; 0x01
    128c:	7a 83       	std	Y+2, r23	; 0x02
    128e:	8b 83       	std	Y+3, r24	; 0x03
    1290:	9c 83       	std	Y+4, r25	; 0x04
    1292:	69 81       	ldd	r22, Y+1	; 0x01
    1294:	7a 81       	ldd	r23, Y+2	; 0x02
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3>

0000129e <.LVL19>:
    129e:	69 83       	std	Y+1, r22	; 0x01
    12a0:	7a 83       	std	Y+2, r23	; 0x02
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	69 81       	ldd	r22, Y+1	; 0x01
    12a8:	7a 81       	ldd	r23, Y+2	; 0x02
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fixunssfsi>

000012b2 <.LVL20>:
    12b2:	46 2f       	mov	r20, r22
    12b4:	57 2f       	mov	r21, r23
    12b6:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <agv_ultrasoon_voor_midden+0x1>
    12ba:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <agv_ultrasoon_voor_midden>
    12be:	fb ce       	rjmp	.-522    	; 0x10b6 <.L21>

000012c0 <__vector_11>:

ISR(PCINT2_vect)
{
    12c0:	1f 92       	push	r1
    12c2:	0f 92       	push	r0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	0f 92       	push	r0
    12c8:	11 24       	eor	r1, r1
    12ca:	0b b6       	in	r0, 0x3b	; 59
    12cc:	0f 92       	push	r0
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <L0^A>

000012ec <L0^A>:
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62

000012f2 <.Loc.149>:
    if(agv_ultrasoon_current_sensor == 0b00000010)
    12f2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

000012f6 <.Loc.151>:
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	09 f4       	brne	.+2      	; 0x12fc <.Loc.152>

000012fa <L0^A>:
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <.L34>

000012fc <.Loc.152>:
    {
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
        if(agv_ultrasoon_boom_rechts != 0) RightSensorArray[arrayPositionRight++] = agv_ultrasoon_boom_rechts;
        PORTA &= ~(0b00000001);
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
    12fc:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

00001300 <.Loc.154>:
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	09 f4       	brne	.+2      	; 0x1306 <.Loc.155>

00001304 <L0^A>:
    1304:	aa c0       	rjmp	.+340    	; 0x145a <.L35>

00001306 <.Loc.155>:
    {
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
        if(agv_ultrasoon_boom_links != 0) LeftSensorArray[arrayPositionLeft++] = agv_ultrasoon_boom_links;
        PORTA &= ~(0b00000010);
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
    1306:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <agv_ultrasoon_current_sensor>

0000130a <.Loc.157>:
    130a:	80 31       	cpi	r24, 0x10	; 16
    130c:	09 f0       	breq	.+2      	; 0x1310 <.Loc.158>

0000130e <L0^A>:
    130e:	85 c0       	rjmp	.+266    	; 0x141a <.L31>

00001310 <.Loc.158>:
    {
        agv_ultrasoon_voor_midden = (TCNT3 - 4454)/4*0.0343;
    1310:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1314:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001318 <.Loc.160>:
    1318:	86 56       	subi	r24, 0x66	; 102
    131a:	91 41       	sbci	r25, 0x11	; 17

0000131c <.Loc.161>:
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24

00001324 <.Loc.162>:
    1324:	9c 01       	movw	r18, r24
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	29 83       	std	Y+1, r18	; 0x01
    132c:	3a 83       	std	Y+2, r19	; 0x02
    132e:	4b 83       	std	Y+3, r20	; 0x03
    1330:	5c 83       	std	Y+4, r21	; 0x04
    1332:	ca 01       	movw	r24, r20
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__floatunsisf>

0000133a <.LVL21>:
    133a:	28 e2       	ldi	r18, 0x28	; 40
    133c:	3e e7       	ldi	r19, 0x7E	; 126
    133e:	4c e0       	ldi	r20, 0x0C	; 12
    1340:	5d e3       	ldi	r21, 0x3D	; 61
    1342:	69 83       	std	Y+1, r22	; 0x01
    1344:	7a 83       	std	Y+2, r23	; 0x02
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	9c 83       	std	Y+4, r25	; 0x04
    134a:	69 81       	ldd	r22, Y+1	; 0x01
    134c:	7a 81       	ldd	r23, Y+2	; 0x02
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3>

00001356 <.LVL22>:
    1356:	69 83       	std	Y+1, r22	; 0x01
    1358:	7a 83       	std	Y+2, r23	; 0x02
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	69 81       	ldd	r22, Y+1	; 0x01
    1360:	7a 81       	ldd	r23, Y+2	; 0x02
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fixunssfsi>

0000136a <.LVL23>:
    136a:	46 2f       	mov	r20, r22
    136c:	57 2f       	mov	r21, r23
    136e:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <agv_ultrasoon_voor_midden+0x1>
    1372:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <agv_ultrasoon_voor_midden>

00001376 <.Loc.164>:
        PORTA &= ~(0b00001000);
    1376:	13 98       	cbi	0x02, 3	; 2
    1378:	50 c0       	rjmp	.+160    	; 0x141a <.L31>

0000137a <.L34>:
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
    137a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    137e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001382 <.Loc.168>:
    1382:	86 56       	subi	r24, 0x66	; 102
    1384:	91 41       	sbci	r25, 0x11	; 17

00001386 <.Loc.169>:
    1386:	96 95       	lsr	r25
    1388:	87 95       	ror	r24
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24

0000138e <.Loc.170>:
    138e:	9c 01       	movw	r18, r24
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	29 83       	std	Y+1, r18	; 0x01
    1396:	3a 83       	std	Y+2, r19	; 0x02
    1398:	4b 83       	std	Y+3, r20	; 0x03
    139a:	5c 83       	std	Y+4, r21	; 0x04
    139c:	ca 01       	movw	r24, r20
    139e:	b9 01       	movw	r22, r18
    13a0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__floatunsisf>

000013a4 <.LVL24>:
    13a4:	28 e2       	ldi	r18, 0x28	; 40
    13a6:	3e e7       	ldi	r19, 0x7E	; 126
    13a8:	4c e0       	ldi	r20, 0x0C	; 12
    13aa:	5d e3       	ldi	r21, 0x3D	; 61
    13ac:	69 83       	std	Y+1, r22	; 0x01
    13ae:	7a 83       	std	Y+2, r23	; 0x02
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	69 81       	ldd	r22, Y+1	; 0x01
    13b6:	7a 81       	ldd	r23, Y+2	; 0x02
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3>

000013c0 <.LVL25>:
    13c0:	69 83       	std	Y+1, r22	; 0x01
    13c2:	7a 83       	std	Y+2, r23	; 0x02
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	7a 81       	ldd	r23, Y+2	; 0x02
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fixunssfsi>

000013d4 <.LVL26>:
    13d4:	46 2f       	mov	r20, r22
    13d6:	57 2f       	mov	r21, r23
    13d8:	50 93 71 02 	sts	0x0271, r21	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>
    13dc:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <agv_ultrasoon_boom_rechts>

000013e0 <.Loc.172>:
        if(agv_ultrasoon_boom_rechts != 0) RightSensorArray[arrayPositionRight++] = agv_ultrasoon_boom_rechts;
    13e0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <agv_ultrasoon_boom_rechts>
    13e4:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>

000013e8 <.Loc.174>:
    13e8:	89 2b       	or	r24, r25
    13ea:	b1 f0       	breq	.+44     	; 0x1418 <.L30>

000013ec <.Loc.175>:
    13ec:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <agv_ultrasoon_boom_rechts>
    13f0:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <agv_ultrasoon_boom_rechts+0x1>

000013f4 <.Loc.177>:
    13f4:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <arrayPositionRight>
    13f8:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <arrayPositionRight+0x1>
    13fc:	ac 01       	movw	r20, r24
    13fe:	4f 5f       	subi	r20, 0xFF	; 255
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <arrayPositionRight+0x1>
    1406:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <arrayPositionRight>

0000140a <.Loc.178>:
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	fc 01       	movw	r30, r24
    1410:	ee 59       	subi	r30, 0x9E	; 158
    1412:	fd 4f       	sbci	r31, 0xFD	; 253
    1414:	31 83       	std	Z+1, r19	; 0x01
    1416:	20 83       	st	Z, r18

00001418 <.L30>:
        PORTA &= ~(0b00000001);
    1418:	10 98       	cbi	0x02, 0	; 2

0000141a <.L31>:
    }
    //check welke sensor en schrijf timer3 waarde naar sensorwaarde
    TIMSK3 &= ~(1<<ICIE3);
    141a:	e1 e7       	ldi	r30, 0x71	; 113
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7d       	andi	r24, 0xDF	; 223
    1422:	80 83       	st	Z, r24

00001424 <.Loc.183>:
    //zet timer3 overflow flag uit
    PCMSK2 = 0;
    1424:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00001428 <.Loc.185>:
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	bf 91       	pop	r27
    143a:	af 91       	pop	r26
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	7f 91       	pop	r23
    1442:	6f 91       	pop	r22
    1444:	5f 91       	pop	r21
    1446:	4f 91       	pop	r20
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	0f 90       	pop	r0
    144e:	0b be       	out	0x3b, r0	; 59
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <.L35>:
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
    145a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    145e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001462 <.Loc.188>:
    1462:	86 56       	subi	r24, 0x66	; 102
    1464:	91 41       	sbci	r25, 0x11	; 17

00001466 <.Loc.189>:
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24

0000146e <.Loc.190>:
    146e:	9c 01       	movw	r18, r24
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	29 83       	std	Y+1, r18	; 0x01
    1476:	3a 83       	std	Y+2, r19	; 0x02
    1478:	4b 83       	std	Y+3, r20	; 0x03
    147a:	5c 83       	std	Y+4, r21	; 0x04
    147c:	ca 01       	movw	r24, r20
    147e:	b9 01       	movw	r22, r18
    1480:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__floatunsisf>

00001484 <.LVL27>:
    1484:	28 e2       	ldi	r18, 0x28	; 40
    1486:	3e e7       	ldi	r19, 0x7E	; 126
    1488:	4c e0       	ldi	r20, 0x0C	; 12
    148a:	5d e3       	ldi	r21, 0x3D	; 61
    148c:	69 83       	std	Y+1, r22	; 0x01
    148e:	7a 83       	std	Y+2, r23	; 0x02
    1490:	8b 83       	std	Y+3, r24	; 0x03
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	7a 81       	ldd	r23, Y+2	; 0x02
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3>

000014a0 <.LVL28>:
    14a0:	69 83       	std	Y+1, r22	; 0x01
    14a2:	7a 83       	std	Y+2, r23	; 0x02
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	69 81       	ldd	r22, Y+1	; 0x01
    14aa:	7a 81       	ldd	r23, Y+2	; 0x02
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fixunssfsi>

000014b4 <.LVL29>:
    14b4:	46 2f       	mov	r20, r22
    14b6:	57 2f       	mov	r21, r23
    14b8:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <agv_ultrasoon_boom_links+0x1>
    14bc:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <agv_ultrasoon_boom_links>

000014c0 <.Loc.192>:
        if(agv_ultrasoon_boom_links != 0) LeftSensorArray[arrayPositionLeft++] = agv_ultrasoon_boom_links;
    14c0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <agv_ultrasoon_boom_links>
    14c4:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <agv_ultrasoon_boom_links+0x1>

000014c8 <.Loc.194>:
    14c8:	89 2b       	or	r24, r25
    14ca:	b1 f0       	breq	.+44     	; 0x14f8 <.L33>

000014cc <.Loc.195>:
    14cc:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <agv_ultrasoon_boom_links>
    14d0:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <agv_ultrasoon_boom_links+0x1>

000014d4 <.Loc.197>:
    14d4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <arrayPositionLeft>
    14d8:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <arrayPositionLeft+0x1>
    14dc:	ac 01       	movw	r20, r24
    14de:	4f 5f       	subi	r20, 0xFF	; 255
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	50 93 61 02 	sts	0x0261, r21	; 0x800261 <arrayPositionLeft+0x1>
    14e6:	40 93 60 02 	sts	0x0260, r20	; 0x800260 <arrayPositionLeft>

000014ea <.Loc.198>:
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	fc 01       	movw	r30, r24
    14f0:	e8 59       	subi	r30, 0x98	; 152
    14f2:	fd 4f       	sbci	r31, 0xFD	; 253
    14f4:	31 83       	std	Z+1, r19	; 0x01
    14f6:	20 83       	st	Z, r18

000014f8 <.L33>:
        PORTA &= ~(0b00000010);
    14f8:	11 98       	cbi	0x02, 1	; 2
    14fa:	8f cf       	rjmp	.-226    	; 0x141a <.L31>

000014fc <__divmodhi4>:
    14fc:	97 fb       	bst	r25, 7

000014fe <.Loc.1>:
    14fe:	07 2e       	mov	r0, r23

00001500 <.Loc.2>:
    1500:	16 f4       	brtc	.+4      	; 0x1506 <.L^B1>

00001502 <.Loc.3>:
    1502:	00 94       	com	r0

00001504 <.Loc.4>:
    1504:	07 d0       	rcall	.+14     	; 0x1514 <__divmodhi4_neg1>

00001506 <.L^B1>:
    1506:	77 fd       	sbrc	r23, 7

00001508 <.Loc.6>:
    1508:	09 d0       	rcall	.+18     	; 0x151c <__divmodhi4_neg2>

0000150a <.Loc.7>:
    150a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__udivmodhi4>

0000150e <.Loc.8>:
    150e:	07 fc       	sbrc	r0, 7

00001510 <.Loc.9>:
    1510:	05 d0       	rcall	.+10     	; 0x151c <__divmodhi4_neg2>

00001512 <.Loc.10>:
    1512:	3e f4       	brtc	.+14     	; 0x1522 <__divmodhi4_exit>

00001514 <__divmodhi4_neg1>:
    1514:	90 95       	com	r25

00001516 <.Loc.12>:
    1516:	81 95       	neg	r24

00001518 <.Loc.13>:
    1518:	9f 4f       	sbci	r25, 0xFF	; 255

0000151a <.Loc.14>:
    151a:	08 95       	ret

0000151c <__divmodhi4_neg2>:
    151c:	70 95       	com	r23

0000151e <.Loc.16>:
    151e:	61 95       	neg	r22

00001520 <.Loc.17>:
    1520:	7f 4f       	sbci	r23, 0xFF	; 255

00001522 <__divmodhi4_exit>:
    1522:	08 95       	ret

00001524 <__udivmodhi4>:
    1524:	aa 1b       	sub	r26, r26

00001526 <.Loc.1>:
    1526:	bb 1b       	sub	r27, r27

00001528 <.Loc.2>:
    1528:	51 e1       	ldi	r21, 0x11	; 17

0000152a <.Loc.3>:
    152a:	07 c0       	rjmp	.+14     	; 0x153a <__udivmodhi4_ep>

0000152c <__udivmodhi4_loop>:
    152c:	aa 1f       	adc	r26, r26

0000152e <.Loc.5>:
    152e:	bb 1f       	adc	r27, r27

00001530 <.Loc.6>:
    1530:	a6 17       	cp	r26, r22

00001532 <.Loc.7>:
    1532:	b7 07       	cpc	r27, r23

00001534 <.Loc.8>:
    1534:	10 f0       	brcs	.+4      	; 0x153a <__udivmodhi4_ep>

00001536 <.Loc.9>:
    1536:	a6 1b       	sub	r26, r22

00001538 <.Loc.10>:
    1538:	b7 0b       	sbc	r27, r23

0000153a <__udivmodhi4_ep>:
    153a:	88 1f       	adc	r24, r24

0000153c <.Loc.12>:
    153c:	99 1f       	adc	r25, r25

0000153e <.Loc.13>:
    153e:	5a 95       	dec	r21

00001540 <.Loc.14>:
    1540:	a9 f7       	brne	.-22     	; 0x152c <__udivmodhi4_loop>

00001542 <.Loc.15>:
    1542:	80 95       	com	r24

00001544 <.Loc.16>:
    1544:	90 95       	com	r25

00001546 <.Loc.17>:
    1546:	bc 01       	movw	r22, r24

00001548 <.Loc.18>:
    1548:	cd 01       	movw	r24, r26

0000154a <.Loc.19>:
    154a:	08 95       	ret

0000154c <__fixunssfsi>:
    154c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fp_splitA>
    1550:	88 f0       	brcs	.+34     	; 0x1574 <.L_err>
    1552:	9f 57       	subi	r25, 0x7F	; 127
    1554:	98 f0       	brcs	.+38     	; 0x157c <.L_zr>
    1556:	b9 2f       	mov	r27, r25
    1558:	99 27       	eor	r25, r25
    155a:	b7 51       	subi	r27, 0x17	; 23
    155c:	b0 f0       	brcs	.+44     	; 0x158a <.L4^B1>
    155e:	e1 f0       	breq	.+56     	; 0x1598 <.L_sign>

00001560 <.L1^B1>:
    1560:	66 0f       	add	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	88 1f       	adc	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	1a f0       	brmi	.+6      	; 0x1570 <.L2^B1>
    156a:	ba 95       	dec	r27
    156c:	c9 f7       	brne	.-14     	; 0x1560 <.L1^B1>
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <.L_sign>

00001570 <.L2^B1>:
    1570:	b1 30       	cpi	r27, 0x01	; 1
    1572:	91 f0       	breq	.+36     	; 0x1598 <.L_sign>

00001574 <.L_err>:
    1574:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_zero>
    1578:	b1 e0       	ldi	r27, 0x01	; 1
    157a:	08 95       	ret

0000157c <.L_zr>:
    157c:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_zero>

00001580 <.L3^B1>:
    1580:	67 2f       	mov	r22, r23
    1582:	78 2f       	mov	r23, r24
    1584:	88 27       	eor	r24, r24
    1586:	b8 5f       	subi	r27, 0xF8	; 248
    1588:	39 f0       	breq	.+14     	; 0x1598 <.L_sign>

0000158a <.L4^B1>:
    158a:	b9 3f       	cpi	r27, 0xF9	; 249
    158c:	cc f3       	brlt	.-14     	; 0x1580 <.L3^B1>

0000158e <.L5^B1>:
    158e:	86 95       	lsr	r24
    1590:	77 95       	ror	r23
    1592:	67 95       	ror	r22
    1594:	b3 95       	inc	r27
    1596:	d9 f7       	brne	.-10     	; 0x158e <.L5^B1>

00001598 <.L_sign>:
    1598:	3e f4       	brtc	.+14     	; 0x15a8 <.L6^B1>
    159a:	90 95       	com	r25
    159c:	80 95       	com	r24
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255

000015a8 <.L6^B1>:
    15a8:	08 95       	ret

000015aa <__floatunsisf>:
    15aa:	e8 94       	clt
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <.L1^B1>

000015ae <__floatsisf>:
    15ae:	97 fb       	bst	r25, 7
    15b0:	3e f4       	brtc	.+14     	; 0x15c0 <.L1^B1>
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255

000015c0 <.L1^B1>:
    15c0:	99 23       	and	r25, r25
    15c2:	a9 f0       	breq	.+42     	; 0x15ee <.L4^B1>
    15c4:	f9 2f       	mov	r31, r25
    15c6:	96 e9       	ldi	r25, 0x96	; 150
    15c8:	bb 27       	eor	r27, r27

000015ca <.L2^B1>:
    15ca:	93 95       	inc	r25
    15cc:	f6 95       	lsr	r31
    15ce:	87 95       	ror	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	b7 95       	ror	r27
    15d6:	f1 11       	cpse	r31, r1
    15d8:	f8 cf       	rjmp	.-16     	; 0x15ca <.L2^B1>
    15da:	fa f4       	brpl	.+62     	; 0x161a <.L_pack>
    15dc:	bb 0f       	add	r27, r27
    15de:	11 f4       	brne	.+4      	; 0x15e4 <.L3^B1>
    15e0:	60 ff       	sbrs	r22, 0
    15e2:	1b c0       	rjmp	.+54     	; 0x161a <.L_pack>

000015e4 <.L3^B1>:
    15e4:	6f 5f       	subi	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	16 c0       	rjmp	.+44     	; 0x161a <.L_pack>

000015ee <.L4^B1>:
    15ee:	88 23       	and	r24, r24
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <.L5^B1>
    15f2:	96 e9       	ldi	r25, 0x96	; 150
    15f4:	11 c0       	rjmp	.+34     	; 0x1618 <.L8^B1>

000015f6 <.L5^B1>:
    15f6:	77 23       	and	r23, r23
    15f8:	21 f0       	breq	.+8      	; 0x1602 <.L6^B1>
    15fa:	9e e8       	ldi	r25, 0x8E	; 142
    15fc:	87 2f       	mov	r24, r23
    15fe:	76 2f       	mov	r23, r22
    1600:	05 c0       	rjmp	.+10     	; 0x160c <.L7^B1>

00001602 <.L6^B1>:
    1602:	66 23       	and	r22, r22
    1604:	71 f0       	breq	.+28     	; 0x1622 <.L9^B1>
    1606:	96 e8       	ldi	r25, 0x86	; 134
    1608:	86 2f       	mov	r24, r22
    160a:	70 e0       	ldi	r23, 0x00	; 0

0000160c <.L7^B1>:
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	2a f0       	brmi	.+10     	; 0x161a <.L_pack>

00001610 <.L10^B1>:
    1610:	9a 95       	dec	r25
    1612:	66 0f       	add	r22, r22
    1614:	77 1f       	adc	r23, r23
    1616:	88 1f       	adc	r24, r24

00001618 <.L8^B1>:
    1618:	da f7       	brpl	.-10     	; 0x1610 <.L10^B1>

0000161a <.L_pack>:
    161a:	88 0f       	add	r24, r24
    161c:	96 95       	lsr	r25
    161e:	87 95       	ror	r24
    1620:	97 f9       	bld	r25, 7

00001622 <.L9^B1>:
    1622:	08 95       	ret

00001624 <__fp_split3>:
    1624:	57 fd       	sbrc	r21, 7
    1626:	90 58       	subi	r25, 0x80	; 128
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	59 f0       	breq	.+22     	; 0x1644 <.L4^B1>
    162e:	5f 3f       	cpi	r21, 0xFF	; 255
    1630:	71 f0       	breq	.+28     	; 0x164e <.L5^B1>

00001632 <.L1^B1>:
    1632:	47 95       	ror	r20

00001634 <__fp_splitA>:
    1634:	88 0f       	add	r24, r24
    1636:	97 fb       	bst	r25, 7
    1638:	99 1f       	adc	r25, r25
    163a:	61 f0       	breq	.+24     	; 0x1654 <.L6^B1>
    163c:	9f 3f       	cpi	r25, 0xFF	; 255
    163e:	79 f0       	breq	.+30     	; 0x165e <.L7^B1>

00001640 <.L3^B1>:
    1640:	87 95       	ror	r24
    1642:	08 95       	ret

00001644 <.L4^B1>:
    1644:	12 16       	cp	r1, r18
    1646:	13 06       	cpc	r1, r19
    1648:	14 06       	cpc	r1, r20
    164a:	55 1f       	adc	r21, r21
    164c:	f2 cf       	rjmp	.-28     	; 0x1632 <.L1^B1>

0000164e <.L5^B1>:
    164e:	46 95       	lsr	r20
    1650:	f1 df       	rcall	.-30     	; 0x1634 <__fp_splitA>
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <.L8^B1>

00001654 <.L6^B1>:
    1654:	16 16       	cp	r1, r22
    1656:	17 06       	cpc	r1, r23
    1658:	18 06       	cpc	r1, r24
    165a:	99 1f       	adc	r25, r25
    165c:	f1 cf       	rjmp	.-30     	; 0x1640 <.L3^B1>

0000165e <.L7^B1>:
    165e:	86 95       	lsr	r24
    1660:	71 05       	cpc	r23, r1
    1662:	61 05       	cpc	r22, r1

00001664 <.L8^B1>:
    1664:	08 94       	sec
    1666:	08 95       	ret

00001668 <__fp_zero>:
    1668:	e8 94       	clt

0000166a <__fp_szero>:
    166a:	bb 27       	eor	r27, r27
    166c:	66 27       	eor	r22, r22
    166e:	77 27       	eor	r23, r23
    1670:	cb 01       	movw	r24, r22
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret

00001676 <__mulsf3>:
    1676:	0e 94 4e 0b 	call	0x169c	; 0x169c <__mulsf3x>
    167a:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_round>

0000167e <.L^B1>:
    167e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fp_pscA>
    1682:	38 f0       	brcs	.+14     	; 0x1692 <.L1^B1>
    1684:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fp_pscB>
    1688:	20 f0       	brcs	.+8      	; 0x1692 <.L1^B1>
    168a:	95 23       	and	r25, r21
    168c:	11 f0       	breq	.+4      	; 0x1692 <.L1^B1>
    168e:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>

00001692 <.L1^B1>:
    1692:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>

00001696 <.L2^B1>:
    1696:	11 24       	eor	r1, r1
    1698:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_szero>

0000169c <__mulsf3x>:
    169c:	0e 94 12 0b 	call	0x1624	; 0x1624 <__fp_split3>
    16a0:	70 f3       	brcs	.-36     	; 0x167e <.L^B1>

000016a2 <__mulsf3_pse>:
    16a2:	95 9f       	mul	r25, r21
    16a4:	c1 f3       	breq	.-16     	; 0x1696 <.L2^B1>
    16a6:	95 0f       	add	r25, r21
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	55 1f       	adc	r21, r21
    16ac:	62 9f       	mul	r22, r18
    16ae:	f0 01       	movw	r30, r0
    16b0:	72 9f       	mul	r23, r18
    16b2:	bb 27       	eor	r27, r27
    16b4:	f0 0d       	add	r31, r0
    16b6:	b1 1d       	adc	r27, r1
    16b8:	63 9f       	mul	r22, r19
    16ba:	aa 27       	eor	r26, r26
    16bc:	f0 0d       	add	r31, r0
    16be:	b1 1d       	adc	r27, r1
    16c0:	aa 1f       	adc	r26, r26
    16c2:	64 9f       	mul	r22, r20
    16c4:	66 27       	eor	r22, r22
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	66 1f       	adc	r22, r22
    16cc:	82 9f       	mul	r24, r18
    16ce:	22 27       	eor	r18, r18
    16d0:	b0 0d       	add	r27, r0
    16d2:	a1 1d       	adc	r26, r1
    16d4:	62 1f       	adc	r22, r18
    16d6:	73 9f       	mul	r23, r19
    16d8:	b0 0d       	add	r27, r0
    16da:	a1 1d       	adc	r26, r1
    16dc:	62 1f       	adc	r22, r18
    16de:	83 9f       	mul	r24, r19
    16e0:	a0 0d       	add	r26, r0
    16e2:	61 1d       	adc	r22, r1
    16e4:	22 1f       	adc	r18, r18
    16e6:	74 9f       	mul	r23, r20
    16e8:	33 27       	eor	r19, r19
    16ea:	a0 0d       	add	r26, r0
    16ec:	61 1d       	adc	r22, r1
    16ee:	23 1f       	adc	r18, r19
    16f0:	84 9f       	mul	r24, r20
    16f2:	60 0d       	add	r22, r0
    16f4:	21 1d       	adc	r18, r1
    16f6:	82 2f       	mov	r24, r18
    16f8:	76 2f       	mov	r23, r22
    16fa:	6a 2f       	mov	r22, r26
    16fc:	11 24       	eor	r1, r1
    16fe:	9f 57       	subi	r25, 0x7F	; 127
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	9a f0       	brmi	.+38     	; 0x172a <.L13^B1>
    1704:	f1 f0       	breq	.+60     	; 0x1742 <.L15^B1>

00001706 <.L10^B1>:
    1706:	88 23       	and	r24, r24
    1708:	4a f0       	brmi	.+18     	; 0x171c <.L11^B1>
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	bb 1f       	adc	r27, r27
    1710:	66 1f       	adc	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	88 1f       	adc	r24, r24
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	50 40       	sbci	r21, 0x00	; 0
    171a:	a9 f7       	brne	.-22     	; 0x1706 <.L10^B1>

0000171c <.L11^B1>:
    171c:	9e 3f       	cpi	r25, 0xFE	; 254
    171e:	51 05       	cpc	r21, r1
    1720:	80 f0       	brcs	.+32     	; 0x1742 <.L15^B1>
    1722:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>

00001726 <.L12^B1>:
    1726:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_szero>

0000172a <.L13^B1>:
    172a:	5f 3f       	cpi	r21, 0xFF	; 255
    172c:	e4 f3       	brlt	.-8      	; 0x1726 <.L12^B1>
    172e:	98 3e       	cpi	r25, 0xE8	; 232
    1730:	d4 f3       	brlt	.-12     	; 0x1726 <.L12^B1>

00001732 <.L14^B1>:
    1732:	86 95       	lsr	r24
    1734:	77 95       	ror	r23
    1736:	67 95       	ror	r22
    1738:	b7 95       	ror	r27
    173a:	f7 95       	ror	r31
    173c:	e7 95       	ror	r30
    173e:	9f 5f       	subi	r25, 0xFF	; 255
    1740:	c1 f7       	brne	.-16     	; 0x1732 <.L14^B1>

00001742 <.L15^B1>:
    1742:	fe 2b       	or	r31, r30
    1744:	88 0f       	add	r24, r24
    1746:	91 1d       	adc	r25, r1
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	97 f9       	bld	r25, 7
    174e:	08 95       	ret

00001750 <__fp_inf>:
    1750:	97 f9       	bld	r25, 7
    1752:	9f 67       	ori	r25, 0x7F	; 127
    1754:	80 e8       	ldi	r24, 0x80	; 128
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	08 95       	ret

0000175c <__fp_nan>:
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	80 ec       	ldi	r24, 0xC0	; 192
    1760:	08 95       	ret

00001762 <__fp_pscA>:
    1762:	00 24       	eor	r0, r0
    1764:	0a 94       	dec	r0
    1766:	16 16       	cp	r1, r22
    1768:	17 06       	cpc	r1, r23
    176a:	18 06       	cpc	r1, r24
    176c:	09 06       	cpc	r0, r25
    176e:	08 95       	ret

00001770 <__fp_pscB>:
    1770:	00 24       	eor	r0, r0
    1772:	0a 94       	dec	r0
    1774:	12 16       	cp	r1, r18
    1776:	13 06       	cpc	r1, r19
    1778:	14 06       	cpc	r1, r20
    177a:	05 06       	cpc	r0, r21
    177c:	08 95       	ret

0000177e <__fp_round>:
    177e:	09 2e       	mov	r0, r25
    1780:	03 94       	inc	r0
    1782:	00 0c       	add	r0, r0
    1784:	11 f4       	brne	.+4      	; 0x178a <.L1^B1>
    1786:	88 23       	and	r24, r24
    1788:	52 f0       	brmi	.+20     	; 0x179e <.L3^B1>

0000178a <.L1^B1>:
    178a:	bb 0f       	add	r27, r27
    178c:	40 f4       	brcc	.+16     	; 0x179e <.L3^B1>
    178e:	bf 2b       	or	r27, r31
    1790:	11 f4       	brne	.+4      	; 0x1796 <.L2^B1>
    1792:	60 ff       	sbrs	r22, 0
    1794:	04 c0       	rjmp	.+8      	; 0x179e <.L3^B1>

00001796 <.L2^B1>:
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255

0000179e <.L3^B1>:
    179e:	08 95       	ret

000017a0 <_exit>:
    17a0:	f8 94       	cli

000017a2 <__stop_program>:
    17a2:	ff cf       	rjmp	.-2      	; 0x17a2 <__stop_program>
