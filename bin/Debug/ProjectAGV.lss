
bin\Debug\ProjectAGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  000010cc  00001180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080022a  0080022a  000011aa  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000011aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000118  00000000  00000000  00001200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001e17  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000013c5  00000000  00000000  0000312f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001971  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000004d4  00000000  00000000  00005e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000a55  00000000  00000000  0000633c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001ef  00000000  00000000  00006d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000040c  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000021  00000000  00000000  0000738c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	ec ec       	ldi	r30, 0xCC	; 204

000000fc <.Loc.4>:
      fc:	f0 e1       	ldi	r31, 0x10	; 16

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	aa 32       	cpi	r26, 0x2A	; 42

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	aa e2       	ldi	r26, 0x2A	; 42

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	a0 35       	cpi	r26, 0x50	; 80

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <main>
     122:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_Leds>:
#include <avr/interrupt.h>

#include "AGV_Leds.h"

void init_Leds(void){
    PORTL = 0xff;
     12a:	8f ef       	ldi	r24, 0xFF	; 255
     12c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

00000130 <.Loc.3>:
    PORTB |= (1 << PB2) | (1 << PB3);
     130:	85 b1       	in	r24, 0x05	; 5

00000132 <.Loc.4>:
     132:	8c 60       	ori	r24, 0x0C	; 12
     134:	85 b9       	out	0x05, r24	; 5

00000136 <.Loc.5>:
}
     136:	08 95       	ret

00000138 <LedTreeIndictorLeftToggle>:

void LedTreeIndictorLeftToggle(){
        PORTB ^= (1 << TreeIndicatedLEDLeft);
     138:	85 b1       	in	r24, 0x05	; 5

0000013a <.Loc.8>:
     13a:	94 e0       	ldi	r25, 0x04	; 4
     13c:	89 27       	eor	r24, r25
     13e:	85 b9       	out	0x05, r24	; 5

00000140 <.Loc.9>:
}
     140:	08 95       	ret

00000142 <LedTreeIndictorRightToggle>:
void LedTreeIndictorRightToggle(){
        PORTB ^= (1 << TreeIndicatedLEDRight);
     142:	85 b1       	in	r24, 0x05	; 5

00000144 <.Loc.12>:
     144:	98 e0       	ldi	r25, 0x08	; 8
     146:	89 27       	eor	r24, r25
     148:	85 b9       	out	0x05, r24	; 5

0000014a <.Loc.13>:
}
     14a:	08 95       	ret

0000014c <LedTurnSignalLeftToggle>:

void LedTurnSignalLeftToggle(){
    PORTL ^= (1 << TurnSignalLEDLeft);
     14c:	eb e0       	ldi	r30, 0x0B	; 11
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	80 81       	ld	r24, Z

00000152 <.Loc.16>:
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	89 27       	eor	r24, r25
     156:	80 83       	st	Z, r24

00000158 <.Loc.17>:
}
     158:	08 95       	ret

0000015a <LedTurnSignalRightToggle>:
void LedTurnSignalRightToggle(){
        PORTL ^= (1 << TurnSignalLEDRight);
     15a:	eb e0       	ldi	r30, 0x0B	; 11
     15c:	f1 e0       	ldi	r31, 0x01	; 1
     15e:	80 81       	ld	r24, Z

00000160 <.Loc.20>:
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	89 27       	eor	r24, r25
     164:	80 83       	st	Z, r24

00000166 <.Loc.21>:
}
     166:	08 95       	ret

00000168 <LedBreakLightLeft>:

void LedBreakLightLeft(int x){
    if(x){
     168:	89 2b       	or	r24, r25
     16a:	31 f0       	breq	.+12     	; 0x178 <.L7>

0000016c <.Loc.25>:
        PORTL |= (1 << BreaklightsLeft);
     16c:	eb e0       	ldi	r30, 0x0B	; 11
     16e:	f1 e0       	ldi	r31, 0x01	; 1
     170:	80 81       	ld	r24, Z

00000172 <.Loc.26>:
     172:	84 60       	ori	r24, 0x04	; 4
     174:	80 83       	st	Z, r24
     176:	08 95       	ret

00000178 <.L7>:
    }
    else{
        PORTL &= ~(1 << BreaklightsLeft);
     178:	eb e0       	ldi	r30, 0x0B	; 11
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	80 81       	ld	r24, Z

0000017e <.Loc.29>:
     17e:	8b 7f       	andi	r24, 0xFB	; 251
     180:	80 83       	st	Z, r24

00000182 <.Loc.30>:
    }
}
     182:	08 95       	ret

00000184 <LedBreakLightRight>:
void LedBreakLightRight(int x){
    if(x){
     184:	89 2b       	or	r24, r25
     186:	31 f0       	breq	.+12     	; 0x194 <.L10>

00000188 <.Loc.34>:
        PORTL |= (1 << BreaklightRight);
     188:	eb e0       	ldi	r30, 0x0B	; 11
     18a:	f1 e0       	ldi	r31, 0x01	; 1
     18c:	80 81       	ld	r24, Z

0000018e <.Loc.35>:
     18e:	88 60       	ori	r24, 0x08	; 8
     190:	80 83       	st	Z, r24
     192:	08 95       	ret

00000194 <.L10>:
    }
    else{
        PORTL &= ~(1 << BreaklightRight);
     194:	eb e0       	ldi	r30, 0x0B	; 11
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	80 81       	ld	r24, Z

0000019a <.Loc.38>:
     19a:	87 7f       	andi	r24, 0xF7	; 247
     19c:	80 83       	st	Z, r24

0000019e <.Loc.39>:
    }
}
     19e:	08 95       	ret

000001a0 <LedHeadlightLeft>:

void LedHeadlightLeft(int x){
    if(x){
     1a0:	89 2b       	or	r24, r25
     1a2:	31 f0       	breq	.+12     	; 0x1b0 <.L13>

000001a4 <.Loc.43>:
        PORTL |= (1 << HeadlightsLeft);
     1a4:	eb e0       	ldi	r30, 0x0B	; 11
     1a6:	f1 e0       	ldi	r31, 0x01	; 1
     1a8:	80 81       	ld	r24, Z

000001aa <.Loc.44>:
     1aa:	80 61       	ori	r24, 0x10	; 16
     1ac:	80 83       	st	Z, r24
     1ae:	08 95       	ret

000001b0 <.L13>:
    }
    else{
        PORTL &= ~(1 << HeadlightsLeft);
     1b0:	eb e0       	ldi	r30, 0x0B	; 11
     1b2:	f1 e0       	ldi	r31, 0x01	; 1
     1b4:	80 81       	ld	r24, Z

000001b6 <.Loc.47>:
     1b6:	8f 7e       	andi	r24, 0xEF	; 239
     1b8:	80 83       	st	Z, r24

000001ba <.Loc.48>:
    }
}
     1ba:	08 95       	ret

000001bc <LedHeadlightRight>:
void LedHeadlightRight(int x){
    if(x){
     1bc:	89 2b       	or	r24, r25
     1be:	31 f0       	breq	.+12     	; 0x1cc <.L16>

000001c0 <.Loc.52>:
        PORTL |= (1 << HeadlightsRight);
     1c0:	eb e0       	ldi	r30, 0x0B	; 11
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	80 81       	ld	r24, Z

000001c6 <.Loc.53>:
     1c6:	80 62       	ori	r24, 0x20	; 32
     1c8:	80 83       	st	Z, r24
     1ca:	08 95       	ret

000001cc <.L16>:
    }
    else{
        PORTL &= ~(1 << HeadlightsRight);
     1cc:	eb e0       	ldi	r30, 0x0B	; 11
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 81       	ld	r24, Z

000001d2 <.Loc.56>:
     1d2:	8f 7d       	andi	r24, 0xDF	; 223
     1d4:	80 83       	st	Z, r24

000001d6 <.Loc.57>:
    }
}
     1d6:	08 95       	ret

000001d8 <LedNoodstopFront>:

void LedNoodstopFront(int x){
    if(x){
     1d8:	89 2b       	or	r24, r25
     1da:	31 f0       	breq	.+12     	; 0x1e8 <.L19>

000001dc <.Loc.61>:
        PORTL |= (1 << NoodstopLEDFront);
     1dc:	eb e0       	ldi	r30, 0x0B	; 11
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	80 81       	ld	r24, Z

000001e2 <.Loc.62>:
     1e2:	80 64       	ori	r24, 0x40	; 64
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <.L19>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDFront);
     1e8:	eb e0       	ldi	r30, 0x0B	; 11
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	80 81       	ld	r24, Z

000001ee <.Loc.65>:
     1ee:	8f 7b       	andi	r24, 0xBF	; 191
     1f0:	80 83       	st	Z, r24

000001f2 <.Loc.66>:
    }
}
     1f2:	08 95       	ret

000001f4 <LedNoodstopBack>:
void LedNoodstopBack(int x){
    if(x){
     1f4:	89 2b       	or	r24, r25
     1f6:	31 f0       	breq	.+12     	; 0x204 <.L22>

000001f8 <.Loc.70>:
        PORTL |= (1 << NoodstopLEDBack);
     1f8:	eb e0       	ldi	r30, 0x0B	; 11
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	80 81       	ld	r24, Z

000001fe <.Loc.71>:
     1fe:	80 68       	ori	r24, 0x80	; 128
     200:	80 83       	st	Z, r24
     202:	08 95       	ret

00000204 <.L22>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDBack);
     204:	eb e0       	ldi	r30, 0x0B	; 11
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	80 81       	ld	r24, Z

0000020a <.Loc.74>:
     20a:	8f 77       	andi	r24, 0x7F	; 127
     20c:	80 83       	st	Z, r24

0000020e <.Loc.75>:
    }
}
     20e:	08 95       	ret

00000210 <__vector_15>:
volatile int TreeSignalLeft = 0;
volatile int TreeSignalRight = 0;

#define blinkspeed 300
volatile int counter = 0;
ISR(TIMER2_OVF_vect){
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31

00000236 <.Loc.77>:
    counter++;
     236:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <counter>
     23a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <counter+0x1>
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <counter+0x1>
     244:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <counter>

00000248 <.Loc.79>:
    if(counter == blinkspeed){
     248:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <counter>
     24c:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <counter+0x1>

00000250 <.Loc.81>:
     250:	8c 32       	cpi	r24, 0x2C	; 44
     252:	91 40       	sbci	r25, 0x01	; 1
     254:	99 f0       	breq	.+38     	; 0x27c <.L30>

00000256 <.L24>:
        if(TurnSignalRight)LedTurnSignalRightToggle();
        if(TreeSignalLeft) LedTreeIndictorLeftToggle();
        if(TreeSignalRight) LedTreeIndictorRightToggle();
        counter = 0;
    }
}
     256:	ff 91       	pop	r31
     258:	ef 91       	pop	r30
     25a:	bf 91       	pop	r27
     25c:	af 91       	pop	r26
     25e:	9f 91       	pop	r25
     260:	8f 91       	pop	r24
     262:	7f 91       	pop	r23
     264:	6f 91       	pop	r22
     266:	5f 91       	pop	r21
     268:	4f 91       	pop	r20
     26a:	3f 91       	pop	r19
     26c:	2f 91       	pop	r18
     26e:	0f 90       	pop	r0
     270:	0b be       	out	0x3b, r0	; 59
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <.L30>:
        if(TurnSignalLeft) LedTurnSignalLeftToggle();
     27c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <TurnSignalLeft>
     280:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <TurnSignalLeft+0x1>

00000284 <.Loc.85>:
     284:	89 2b       	or	r24, r25
     286:	b9 f4       	brne	.+46     	; 0x2b6 <.L31>

00000288 <.L26>:
        if(TurnSignalRight)LedTurnSignalRightToggle();
     288:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <TurnSignalRight>
     28c:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <TurnSignalRight+0x1>

00000290 <.Loc.88>:
     290:	89 2b       	or	r24, r25
     292:	a1 f4       	brne	.+40     	; 0x2bc <.L32>

00000294 <.L27>:
        if(TreeSignalLeft) LedTreeIndictorLeftToggle();
     294:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <TreeSignalLeft>
     298:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <TreeSignalLeft+0x1>

0000029c <.Loc.91>:
     29c:	89 2b       	or	r24, r25
     29e:	89 f4       	brne	.+34     	; 0x2c2 <.L33>

000002a0 <.L28>:
        if(TreeSignalRight) LedTreeIndictorRightToggle();
     2a0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <TreeSignalRight>
     2a4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <TreeSignalRight+0x1>

000002a8 <.Loc.94>:
     2a8:	89 2b       	or	r24, r25
     2aa:	71 f4       	brne	.+28     	; 0x2c8 <.L34>

000002ac <.L29>:
        counter = 0;
     2ac:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <counter+0x1>
     2b0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <counter>

000002b4 <.Loc.97>:
}
     2b4:	d0 cf       	rjmp	.-96     	; 0x256 <.L24>

000002b6 <.L31>:
        if(TurnSignalLeft) LedTurnSignalLeftToggle();
     2b6:	0e 94 a6 00 	call	0x14c	; 0x14c <LedTurnSignalLeftToggle>

000002ba <.LVL24>:
     2ba:	e6 cf       	rjmp	.-52     	; 0x288 <.L26>

000002bc <.L32>:
        if(TurnSignalRight)LedTurnSignalRightToggle();
     2bc:	0e 94 ad 00 	call	0x15a	; 0x15a <LedTurnSignalRightToggle>

000002c0 <.LVL25>:
     2c0:	e9 cf       	rjmp	.-46     	; 0x294 <.L27>

000002c2 <.L33>:
        if(TreeSignalLeft) LedTreeIndictorLeftToggle();
     2c2:	0e 94 9c 00 	call	0x138	; 0x138 <LedTreeIndictorLeftToggle>

000002c6 <.LVL26>:
     2c6:	ec cf       	rjmp	.-40     	; 0x2a0 <.L28>

000002c8 <.L34>:
        if(TreeSignalRight) LedTreeIndictorRightToggle();
     2c8:	0e 94 a1 00 	call	0x142	; 0x142 <LedTreeIndictorRightToggle>

000002cc <.LVL27>:
     2cc:	ef cf       	rjmp	.-34     	; 0x2ac <.L29>

000002ce <init_delay_led>:

void init_delay_led(){
    // Use mode 0, clkdiv = 64
    TCCR2A = 0;
     2ce:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

000002d2 <.Loc.105>:
    TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     2d2:	83 e0       	ldi	r24, 0x03	; 3
     2d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

000002d8 <.Loc.107>:

    // Disable PWM output
    OCR2A = 0;
     2d8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000002dc <.Loc.109>:
    OCR2B = 0;
     2dc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000002e0 <.Loc.111>:

    //Overflow interrupt
    TIMSK2 = (1<<TOIE2);
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

000002e6 <.Loc.113>:
    TCNT2 = 6;
     2e6:	86 e0       	ldi	r24, 0x06	; 6
     2e8:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>

000002ec <.Loc.115>:
}
     2ec:	08 95       	ret

000002ee <startTimer>:
    startTimer(); //Start de bocht
}

//Set timer aan
void startTimer(){
    AVGBochtenCounter = 0;
     2ee:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <AVGBochtenCounter+0x1>
     2f2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <AVGBochtenCounter>

000002f6 <.Loc.3>:
    TCNT4 = 0;
     2f6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     2fa:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

000002fe <.Loc.5>:
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
     2fe:	82 e0       	ldi	r24, 0x02	; 2
     300:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000304 <.Loc.7>:
}
     304:	08 95       	ret

00000306 <stopTimer>:

//Stop timer
void stopTimer(){
     TCCR4B = (0<<CS42) | (0<<CS41) | (0<<CS40);
     306:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000030a <.Loc.11>:
     turnsTaken++;
     30a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     30e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <turnsTaken+0x1>
     318:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <turnsTaken>

0000031c <.Loc.13>:
}
     31c:	08 95       	ret

0000031e <checkIfFinished>:

//Check of de bocht af is
void checkIfFinished(){
    if(turnsTaken >= 3){
     31e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     322:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     326:	03 97       	sbiw	r24, 0x03	; 3
     328:	44 f0       	brlt	.+16     	; 0x33a <.L3>

0000032a <.Loc.17>:
        turnsTaken = 0;
     32a:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <turnsTaken+0x1>
     32e:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <turnsTaken>

00000332 <.Loc.19>:
        turnStarted = 0;
     332:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <turnStarted+0x1>
     336:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <turnStarted>

0000033a <.L3>:
        return 1;
    } else return 0;
}
     33a:	08 95       	ret

0000033c <startTurn>:
    if(turnStarted == 1) { //Check of we niet al een bocht aan het maken zijn
     33c:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <turnStarted>
     340:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <turnStarted+0x1>
     344:	21 30       	cpi	r18, 0x01	; 1
     346:	31 05       	cpc	r19, r1
     348:	69 f0       	breq	.+26     	; 0x364 <.L7>

0000034a <.Loc.26>:
    turnStarted = 1;
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <turnStarted+0x1>
     352:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <turnStarted>

00000356 <.Loc.28>:
    turnDirection = direction;
     356:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <turnDirection>
     35a:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <turnDirection+0x1>

0000035e <.Loc.30>:
    startTimer(); //Start de bocht
     35e:	0e 94 77 01 	call	0x2ee	; 0x2ee <startTimer>

00000362 <.LVL1>:
}
     362:	08 95       	ret

00000364 <.L7>:
        return checkIfFinished();
     364:	0e 94 8f 01 	call	0x31e	; 0x31e <checkIfFinished>

00000368 <.LVL3>:
     368:	08 95       	ret

0000036a <init_AGVBochten_timer>:

void init_AGVBochten_timer(){
    // Use timer 4 (16bit), clkdiv = 0, 16.000.000 / (2^16) / 8 = 30(.5175
    TCCR4A = 0;
     36a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

0000036e <.Loc.38>:
    //TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);

    // Disable PWM output
    OCR4A = 0;
     36e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     372:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000376 <.Loc.40>:
    OCR4B = 0;
     376:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     37a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>

0000037e <.Loc.42>:

    //Compares

    //Overflow interrupt
    TIMSK4 = (1<<TOIE4);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

00000384 <.Loc.44>:
    //TCNT4 = 6;
}
     384:	08 95       	ret

00000386 <initAGVBochten>:
    init_AGVBochten_timer();
     386:	0e 94 b5 01 	call	0x36a	; 0x36a <init_AGVBochten_timer>

0000038a <.LVL4>:
}
     38a:	08 95       	ret

0000038c <turn>:
        turnsTaken++; //increase aantal bochten
    }
}

//Zet de wielen goed voor de bocht
void turn(int direction){
     38c:	28 2f       	mov	r18, r24
     38e:	39 2f       	mov	r19, r25

00000390 <.Loc.50>:
    switch(direction) {
     390:	21 15       	cp	r18, r1
     392:	31 05       	cpc	r19, r1
     394:	21 f0       	breq	.+8      	; 0x39e <.L11>
     396:	21 30       	cpi	r18, 0x01	; 1
     398:	31 05       	cpc	r19, r1
     39a:	71 f0       	breq	.+28     	; 0x3b8 <.L12>
     39c:	08 95       	ret

0000039e <.L11>:
    case Left:
        setStepperMode(leftMotor, Off);
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	8a e0       	ldi	r24, 0x0A	; 10
     3a4:	90 e0       	ldi	r25, 0x00	; 0

000003a6 <.Loc.52>:
     3a6:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

000003aa <.LVL7>:
        setStepperMode(rightMotor, ForwardStep);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	8b e0       	ldi	r24, 0x0B	; 11
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

000003b6 <.LVL8>:
        break;
     3b6:	08 95       	ret

000003b8 <.L12>:
    case Right:
        setStepperMode(leftMotor, ForwardStep);
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	8a e0       	ldi	r24, 0x0A	; 10
     3be:	90 e0       	ldi	r25, 0x00	; 0

000003c0 <.Loc.56>:
     3c0:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

000003c4 <.LVL11>:
        setStepperMode(rightMotor, Off);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	8b e0       	ldi	r24, 0x0B	; 11
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

000003d0 <.LVL12>:
        break;
    }
}
     3d0:	08 95       	ret

000003d2 <__vector_45>:
ISR(TIMER4_OVF_vect){
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	0b b6       	in	r0, 0x3b	; 59
     3de:	0f 92       	push	r0
     3e0:	2f 93       	push	r18
     3e2:	3f 93       	push	r19
     3e4:	4f 93       	push	r20
     3e6:	5f 93       	push	r21
     3e8:	6f 93       	push	r22
     3ea:	7f 93       	push	r23
     3ec:	8f 93       	push	r24
     3ee:	9f 93       	push	r25
     3f0:	af 93       	push	r26
     3f2:	bf 93       	push	r27
     3f4:	ef 93       	push	r30
     3f6:	ff 93       	push	r31

000003f8 <.Loc.61>:
    AVGBochtenCounter++;
     3f8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     3fc:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <AVGBochtenCounter+0x1>
     406:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <AVGBochtenCounter>

0000040a <.Loc.63>:
    if(AVGBochtenCounter == Comp_StartTurn){
     40a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     40e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>

00000412 <.Loc.65>:
     412:	8a 35       	cpi	r24, 0x5A	; 90
     414:	91 05       	cpc	r25, r1
     416:	d1 f0       	breq	.+52     	; 0x44c <.L19>

00000418 <.L15>:
    if(AVGBochtenCounter == Comp_EndTurn){
     418:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <AVGBochtenCounter>
     41c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <AVGBochtenCounter+0x1>

00000420 <.Loc.68>:
     420:	8f 3c       	cpi	r24, 0xCF	; 207
     422:	91 05       	cpc	r25, r1
     424:	19 f1       	breq	.+70     	; 0x46c <.L20>

00000426 <.L14>:
}
     426:	ff 91       	pop	r31
     428:	ef 91       	pop	r30
     42a:	bf 91       	pop	r27
     42c:	af 91       	pop	r26
     42e:	9f 91       	pop	r25
     430:	8f 91       	pop	r24
     432:	7f 91       	pop	r23
     434:	6f 91       	pop	r22
     436:	5f 91       	pop	r21
     438:	4f 91       	pop	r20
     43a:	3f 91       	pop	r19
     43c:	2f 91       	pop	r18
     43e:	0f 90       	pop	r0
     440:	0b be       	out	0x3b, r0	; 59
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <.L19>:
        if(turnsTaken == 2) { //Als we al 2 bochten hebben gemaakt stop de timer
     44c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     450:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>
     454:	02 97       	sbiw	r24, 0x02	; 2
     456:	39 f0       	breq	.+14     	; 0x466 <.L21>

00000458 <.LBB3>:
        } else turn(turnDirection); //Zoniet, maak de bocht
     458:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <turnDirection>
     45c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <turnDirection+0x1>
     460:	0e 94 c6 01 	call	0x38c	; 0x38c <turn>

00000464 <.LVL13>:
     464:	d9 cf       	rjmp	.-78     	; 0x418 <.L15>

00000466 <.L21>:
            stopTimer();
     466:	0e 94 83 01 	call	0x306	; 0x306 <stopTimer>

0000046a <.LVL14>:
     46a:	d6 cf       	rjmp	.-84     	; 0x418 <.L15>

0000046c <.L20>:
        setBothStepperMode(ForwardStep);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

00000474 <.LVL15>:
        if(turnsTaken == 0) AVGBochtenCounter = DrivingHeadstart; //Als dit het einde is van de eerste bocht, reset de timer om het te herhalen
     474:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <turnsTaken>
     478:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <turnsTaken+0x1>

0000047c <.Loc.77>:
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	31 f4       	brne	.+12     	; 0x48c <.L18>

00000480 <.Loc.78>:
     480:	2e ec       	ldi	r18, 0xCE	; 206
     482:	3f ef       	ldi	r19, 0xFF	; 255
     484:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <AVGBochtenCounter+0x1>
     488:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <AVGBochtenCounter>

0000048c <.L18>:
        turnsTaken++; //increase aantal bochten
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <turnsTaken+0x1>
     492:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <turnsTaken>

00000496 <.Loc.82>:
}
     496:	c7 cf       	rjmp	.-114    	; 0x426 <.L14>

00000498 <needCorrection>:
    2-Afwijking naar links
*/
int needCorrection(){
    int returnValue = 0;
    //Linker bit is niet geactiveerd, we hebben een afwijking naar Rechts
    if(!bit_is_clear(PINA, IRSensorLeft)){
     498:	80 b1       	in	r24, 0x00	; 0

0000049a <.Loc.4>:
        returnValue = 1;
    }
    //Rechter bit is niet geactiveerd, we hebben een afwijking naar Links
    if(!bit_is_clear(PINA, IRSensorRight)){
     49a:	03 99       	sbic	0x00, 3	; 0
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <.L3>

0000049e <.Loc.6>:
    if(!bit_is_clear(PINA, IRSensorLeft)){
     49e:	82 fb       	bst	r24, 2
     4a0:	88 27       	eor	r24, r24
     4a2:	80 f9       	bld	r24, 0

000004a4 <.Loc.7>:
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	08 95       	ret

000004a8 <.L3>:
        returnValue = 2;
     4a8:	82 e0       	ldi	r24, 0x02	; 2

000004aa <.Loc.9>:
     4aa:	90 e0       	ldi	r25, 0x00	; 0

000004ac <.Loc.10>:
    }

    return returnValue;
}
     4ac:	08 95       	ret

000004ae <checkNoodstop>:

//Check of noodstop is ingedrukt
int checkNoodstop(){
    if(bit_is_clear(PINC, NoodstopPin)){
     4ae:	86 b1       	in	r24, 0x06	; 6

000004b0 <.Loc.15>:
     4b0:	86 95       	lsr	r24
     4b2:	86 95       	lsr	r24
     4b4:	86 95       	lsr	r24
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	89 27       	eor	r24, r25

000004ba <.Loc.16>:
        return 1;
    }
    return 0;
}
     4ba:	81 70       	andi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	08 95       	ret

000004c0 <isStartButtonPressed>:

//Check of start knop is ingedrukt
int isStartButtonPressed(){
    return bit_is_clear(PINC, StartButtonPin);
     4c0:	86 b1       	in	r24, 0x06	; 6
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	89 27       	eor	r24, r25

000004c6 <.Loc.20>:
}
     4c6:	81 70       	andi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	08 95       	ret

000004cc <checkModeSwitchState>:
    0- Switch staat in het midden
    1- Volgen
    2- Rijden
*/
int checkModeSwitchState(){
    if(bit_is_clear(PINC, FollowModeSwitch)){
     4cc:	31 9b       	sbis	0x06, 1	; 6
     4ce:	0b c0       	rjmp	.+22     	; 0x4e6 <.L8>

000004d0 <.Loc.24>:
        return 1; //Switch is in follow mode.
    }
    if(bit_is_clear(PINC, DriveModeSwitch)){
     4d0:	26 b1       	in	r18, 0x06	; 6

000004d2 <.Loc.26>:
     4d2:	26 95       	lsr	r18
     4d4:	26 95       	lsr	r18
     4d6:	31 e0       	ldi	r19, 0x01	; 1
     4d8:	23 27       	eor	r18, r19
     4da:	82 2f       	mov	r24, r18
     4dc:	81 70       	andi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	08 95       	ret

000004e6 <.L8>:
        return 1; //Switch is in follow mode.
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0

000004ea <.Loc.28>:
        return 2; //Switch is in drive mode.
    }

    return 0; //Switch staat in het midden, geen van beide geactiveerd.

}
     4ea:	08 95       	ret

000004ec <initButtons>:

//Init buttons
void initButtons(){
    //Loop voor alle buttons
    for(int i = 0; i < 5; i++){
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0

000004f0 <.Loc.34>:
        DDRC &= ~(1<<i);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	70 e0       	ldi	r23, 0x00	; 0

000004f4 <.L10>:
     4f4:	37 b1       	in	r19, 0x07	; 7

000004f6 <.Loc.36>:
     4f6:	ab 01       	movw	r20, r22
     4f8:	08 2e       	mov	r0, r24
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <.L2^B1>

000004fc <.L1^B1>:
     4fc:	44 0f       	add	r20, r20
     4fe:	55 1f       	adc	r21, r21

00000500 <.L2^B1>:
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <.L1^B1>

00000504 <.Loc.37>:
     504:	24 2f       	mov	r18, r20
     506:	20 95       	com	r18
     508:	23 23       	and	r18, r19
     50a:	27 b9       	out	0x07, r18	; 7

0000050c <.Loc.38>:
        PORTC |= (1<<i);
     50c:	28 b1       	in	r18, 0x08	; 8

0000050e <.Loc.39>:
     50e:	24 2b       	or	r18, r20
     510:	28 b9       	out	0x08, r18	; 8

00000512 <.Loc.40>:
    for(int i = 0; i < 5; i++){
     512:	01 96       	adiw	r24, 0x01	; 1

00000514 <.Loc.41>:
     514:	85 30       	cpi	r24, 0x05	; 5
     516:	91 05       	cpc	r25, r1
     518:	69 f7       	brne	.-38     	; 0x4f4 <.L10>

0000051a <.LBE9>:
    }
}
     51a:	08 95       	ret

0000051c <initIRSensors>:

//Init IR sensors
void initIRSensors(){
    //Loop voor alle IR sensors
    for(int i = 0; i < 4; i++){
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0

00000520 <.Loc.48>:
        DDRA &= ~(1<<i);
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	70 e0       	ldi	r23, 0x00	; 0

00000524 <.L13>:
     524:	31 b1       	in	r19, 0x01	; 1

00000526 <.Loc.50>:
     526:	ab 01       	movw	r20, r22
     528:	08 2e       	mov	r0, r24
     52a:	02 c0       	rjmp	.+4      	; 0x530 <.L2^B2>

0000052c <.L1^B2>:
     52c:	44 0f       	add	r20, r20
     52e:	55 1f       	adc	r21, r21

00000530 <.L2^B2>:
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <.L1^B2>

00000534 <.Loc.51>:
     534:	24 2f       	mov	r18, r20
     536:	20 95       	com	r18
     538:	23 23       	and	r18, r19
     53a:	21 b9       	out	0x01, r18	; 1

0000053c <.Loc.52>:
        PORTA |= (1<<i);
     53c:	22 b1       	in	r18, 0x02	; 2

0000053e <.Loc.53>:
     53e:	24 2b       	or	r18, r20
     540:	22 b9       	out	0x02, r18	; 2

00000542 <.Loc.54>:
    for(int i = 0; i < 4; i++){
     542:	01 96       	adiw	r24, 0x01	; 1

00000544 <.Loc.55>:
     544:	84 30       	cpi	r24, 0x04	; 4
     546:	91 05       	cpc	r25, r1
     548:	69 f7       	brne	.-38     	; 0x524 <.L13>

0000054a <.LBE10>:
    }
}
     54a:	08 95       	ret

0000054c <initAGV>:
    init_Leds();
     54c:	0e 94 95 00 	call	0x12a	; 0x12a <init_Leds>

00000550 <.LVL12>:
    agv_ultrasoon_init();
     550:	0e 94 28 05 	call	0xa50	; 0xa50 <agv_ultrasoon_init>

00000554 <.LVL13>:
    initSteppermotorAVRDriver();
     554:	0e 94 94 04 	call	0x928	; 0x928 <initSteppermotorAVRDriver>

00000558 <.LVL14>:
    initIRSensors();
     558:	0e 94 8e 02 	call	0x51c	; 0x51c <initIRSensors>

0000055c <.LVL15>:
    initButtons();
     55c:	0e 94 76 02 	call	0x4ec	; 0x4ec <initButtons>

00000560 <.LVL16>:
    initAGVBochten();
     560:	0e 94 c3 01 	call	0x386	; 0x386 <initAGVBochten>

00000564 <.LVL17>:
}
     564:	08 95       	ret

00000566 <checkFrontIRState>:
    2- Rechts
    3- Geen
*/
int checkFrontIRState(){
    //Allebij detecteren iets, return 0
    if(bit_is_clear(PINA, FrontIRSensorLeftPin) && bit_is_clear(PINA, FrontIRSensorRightPin)){
     566:	00 99       	sbic	0x00, 0	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <.L17>

0000056a <.Loc.68>:
     56a:	01 9b       	sbis	0x00, 1	; 0
     56c:	07 c0       	rjmp	.+14     	; 0x57c <.L19>

0000056e <.L17>:
        return 0;
    }

    //Linker sensor detecteerd iets, return 1
    if(bit_is_clear(PINA, FrontIRSensorLeftPin)){
     56e:	00 9b       	sbis	0x00, 0	; 0
     570:	08 c0       	rjmp	.+16     	; 0x582 <.L20>

00000572 <.Loc.71>:
        return 1;
    }

    //Rechter sensor detecteert iets, return 2
    if(bit_is_clear(PINA, FrontIRSensorRightPin)){
     572:	01 9b       	sbis	0x00, 1	; 0
     574:	09 c0       	rjmp	.+18     	; 0x588 <.L21>

00000576 <.Loc.73>:
        return 2;
    }

    //Return 3
    return 3;
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	08 95       	ret

0000057c <.L19>:
        return 0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	08 95       	ret

00000582 <.L20>:
        return 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	08 95       	ret

00000588 <.L21>:
        return 2;
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	90 e0       	ldi	r25, 0x00	; 0

0000058c <.Loc.77>:
}
     58c:	08 95       	ret

0000058e <filterDistance>:
    Als er iets te ver weg van de sonic sensor is de waarde tussen de 500 & 660,
    dus verander dit naar een groot waarde, in dit geval 100.

    Anders return de originele waarde.
*/
int filterDistance(int distance){
     58e:	28 2f       	mov	r18, r24
     590:	39 2f       	mov	r19, r25

00000592 <.Loc.80>:
    //Alle waardes boven 200 zijn bs anyways
    if(distance == 561){
     592:	21 33       	cpi	r18, 0x31	; 49
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	38 07       	cpc	r19, r24

00000598 <.Loc.82>:
     598:	31 f0       	breq	.+12     	; 0x5a6 <.L24>

0000059a <.Loc.83>:
        distance = 1;
    } else if(distance > 500){
     59a:	25 3f       	cpi	r18, 0xF5	; 245
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	38 07       	cpc	r19, r24
     5a0:	2c f4       	brge	.+10     	; 0x5ac <.L25>
     5a2:	82 2f       	mov	r24, r18
     5a4:	08 95       	ret

000005a6 <.L24>:
        distance = 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	08 95       	ret

000005ac <.L25>:
        distance = 100;
     5ac:	84 e6       	ldi	r24, 0x64	; 100
     5ae:	90 e0       	ldi	r25, 0x00	; 0

000005b0 <.Loc.87>:
    }
    return distance;
}
     5b0:	08 95       	ret

000005b2 <checkSensors>:
    if(maxDistance > filterDistance(agv_ultrasoon_voor_midden)){
     5b2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <agv_ultrasoon_voor_midden>
     5b6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <agv_ultrasoon_voor_midden+0x1>
     5ba:	0e 94 c7 02 	call	0x58e	; 0x58e <filterDistance>

000005be <.LVL21>:
     5be:	0e 97       	sbiw	r24, 0x0e	; 14
     5c0:	0c f4       	brge	.+2      	; 0x5c4 <.Loc.95>

000005c2 <L0^A>:
     5c2:	57 c0       	rjmp	.+174    	; 0x672 <.L33>

000005c4 <.Loc.95>:
    if((TreeDistance > filterDistance(agv_ultrasoon_boom_links)) && !leftPreviousState){
     5c4:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <agv_ultrasoon_boom_links>
     5c8:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     5cc:	0e 94 c7 02 	call	0x58e	; 0x58e <filterDistance>

000005d0 <.LVL22>:
     5d0:	0a 97       	sbiw	r24, 0x0a	; 10
     5d2:	d4 f4       	brge	.+52     	; 0x608 <.L28>

000005d4 <.Loc.98>:
     5d4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftPreviousState.1>
     5d8:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftPreviousState.1+0x1>
     5dc:	89 2b       	or	r24, r25
     5de:	69 f0       	breq	.+26     	; 0x5fa <.L36>

000005e0 <.L29>:
    } else if(leftPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_links)) ){
     5e0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <agv_ultrasoon_boom_links>
     5e4:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     5e8:	0e 94 c7 02 	call	0x58e	; 0x58e <filterDistance>

000005ec <.LVL23>:
     5ec:	0b 97       	sbiw	r24, 0x0b	; 11
     5ee:	94 f0       	brlt	.+36     	; 0x614 <.L30>

000005f0 <.Loc.101>:
        leftPreviousState = 0;
     5f0:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <leftPreviousState.1+0x1>
     5f4:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <leftPreviousState.1>
     5f8:	0d c0       	rjmp	.+26     	; 0x614 <.L30>

000005fa <.L36>:
        leftPreviousState = 1;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <leftPreviousState.1+0x1>
     602:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <leftPreviousState.1>

00000606 <.Loc.105>:
        return 1;
     606:	08 95       	ret

00000608 <.L28>:
    } else if(leftPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_links)) ){
     608:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <leftPreviousState.1>
     60c:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <leftPreviousState.1+0x1>
     610:	89 2b       	or	r24, r25
     612:	31 f7       	brne	.-52     	; 0x5e0 <.L29>

00000614 <.L30>:
    if((TreeDistance > filterDistance(agv_ultrasoon_boom_rechts)) && !rightPreviousState){
     614:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <agv_ultrasoon_boom_rechts>
     618:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     61c:	0e 94 c7 02 	call	0x58e	; 0x58e <filterDistance>

00000620 <.LVL24>:
     620:	0a 97       	sbiw	r24, 0x0a	; 10
     622:	f4 f4       	brge	.+60     	; 0x660 <.L31>

00000624 <.Loc.112>:
     624:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rightPreviousState.0>
     628:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <rightPreviousState.0+0x1>
     62c:	89 2b       	or	r24, r25
     62e:	79 f0       	breq	.+30     	; 0x64e <.L37>

00000630 <.L32>:
    } else if(rightPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_rechts)) ){
     630:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <agv_ultrasoon_boom_rechts>
     634:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     638:	0e 94 c7 02 	call	0x58e	; 0x58e <filterDistance>

0000063c <.LVL25>:
     63c:	0b 97       	sbiw	r24, 0x0b	; 11
     63e:	e4 f0       	brlt	.+56     	; 0x678 <.L35>

00000640 <.Loc.115>:
        rightPreviousState = 0;
     640:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <rightPreviousState.0+0x1>
     644:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <rightPreviousState.0>

00000648 <.Loc.117>:
    return 3;
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	08 95       	ret

0000064e <.L37>:
        rightPreviousState = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <rightPreviousState.0+0x1>
     656:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <rightPreviousState.0>

0000065a <.Loc.120>:
        return 2;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	08 95       	ret

00000660 <.L31>:
    } else if(rightPreviousState && (TreeDistance < filterDistance(agv_ultrasoon_boom_rechts)) ){
     660:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <rightPreviousState.0>
     664:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <rightPreviousState.0+0x1>
     668:	89 2b       	or	r24, r25
     66a:	11 f7       	brne	.-60     	; 0x630 <.L32>

0000066c <.Loc.124>:
    return 3;
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	08 95       	ret

00000672 <.L33>:
        return 0;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	08 95       	ret

00000678 <.L35>:
    return 3;
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	90 e0       	ldi	r25, 0x00	; 0

0000067c <.Loc.127>:
}
     67c:	08 95       	ret

0000067e <followHand>:

//Code voor het volgen van de hand op de juiste afstand
void followHand(int distance){
     67e:	28 2f       	mov	r18, r24
     680:	39 2f       	mov	r19, r25

00000682 <.Loc.130>:

    //Check voor als er iets TE ver weg staat en te negeren.
    if(distance > distanceToCheck){
     682:	23 33       	cpi	r18, 0x33	; 51
     684:	31 05       	cpc	r19, r1
     686:	5c f4       	brge	.+22     	; 0x69e <.L43>

00000688 <.Loc.132>:
        setBothStepperMode(Off);
        return;
    }

    //Check voor juiste afstand met speelruimte
    if((distance < maxDistance) && (distance > minDistance)){
     688:	c9 01       	movw	r24, r18

0000068a <.Loc.134>:
     68a:	0b 97       	sbiw	r24, 0x0b	; 11

0000068c <.Loc.135>:
     68c:	03 97       	sbiw	r24, 0x03	; 3
     68e:	60 f0       	brcs	.+24     	; 0x6a8 <.L44>

00000690 <.Loc.136>:
            setBothStepperMode(Off);
            return;
    }

    //Check voor dichtbij
    if(distance < minDistance){
     690:	2a 30       	cpi	r18, 0x0A	; 10
     692:	31 05       	cpc	r19, r1
     694:	74 f0       	brlt	.+28     	; 0x6b2 <.L45>

00000696 <.Loc.138>:
        setBothStepperMode(BackwardStep);
        return;
    }

    //check voor verweg
    if(distance > maxDistance){
     696:	2f 30       	cpi	r18, 0x0F	; 15
     698:	31 05       	cpc	r19, r1
     69a:	84 f4       	brge	.+32     	; 0x6bc <.L46>

0000069c <.L38>:
        setBothStepperMode(ForwardStep);
    }

}
     69c:	08 95       	ret

0000069e <.L43>:
        setBothStepperMode(Off);
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0

000006a2 <.Loc.142>:
     6a2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000006a6 <.LVL30>:
        return;
     6a6:	08 95       	ret

000006a8 <.L44>:
            setBothStepperMode(Off);
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000006b0 <.LVL31>:
            return;
     6b0:	08 95       	ret

000006b2 <.L45>:
        setBothStepperMode(BackwardStep);
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000006ba <.LVL32>:
        return;
     6ba:	08 95       	ret

000006bc <.L46>:
        setBothStepperMode(ForwardStep);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000006c4 <.LVL33>:
     6c4:	eb cf       	rjmp	.-42     	; 0x69c <.L38>

000006c6 <main>:
    initAGV(); //Init
     6c6:	0e 94 a6 02 	call	0x54c	; 0x54c <initAGV>

000006ca <.LVL35>:
    setBothStepperMode(ForwardStep);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000006d2 <.LVL36>:
    int mode = ModeOff; //Active mode van de AGV
     6d2:	c0 e0       	ldi	r28, 0x00	; 0
     6d4:	d0 e0       	ldi	r29, 0x00	; 0

000006d6 <.Loc.155>:
                if(!checkNoodstop()) {
     6d6:	e1 2c       	mov	r14, r1
     6d8:	f1 2c       	mov	r15, r1
     6da:	5b c0       	rjmp	.+182    	; 0x792 <.L48>

000006dc <.L69>:
        if(mode != Noodstop && mode != ModeOff && isStartButtonPressed()){
     6dc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <isStartButtonPressed>

000006e0 <.LVL38>:
     6e0:	89 2b       	or	r24, r25
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <.Loc.159>

000006e4 <L0^A>:
     6e4:	60 c0       	rjmp	.+192    	; 0x7a6 <.L50>

000006e6 <.Loc.159>:
        switch(mode){
     6e6:	c2 30       	cpi	r28, 0x02	; 2
     6e8:	d1 05       	cpc	r29, r1
     6ea:	09 f4       	brne	.+2      	; 0x6ee <.Loc.160>

000006ec <L0^A>:
     6ec:	92 c0       	rjmp	.+292    	; 0x812 <.L51>

000006ee <.Loc.160>:
     6ee:	3c f5       	brge	.+78     	; 0x73e <.L52>
     6f0:	c1 30       	cpi	r28, 0x01	; 1
     6f2:	d1 05       	cpc	r29, r1
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <.Loc.161>

000006f6 <L0^A>:
     6f6:	4d c0       	rjmp	.+154    	; 0x792 <.L48>

000006f8 <.Loc.161>:
                FrontDistance = agv_ultrasoon_voor_midden;
     6f8:	c0 90 4a 02 	lds	r12, 0x024A	; 0x80024a <agv_ultrasoon_voor_midden>
     6fc:	d0 90 4b 02 	lds	r13, 0x024B	; 0x80024b <agv_ultrasoon_voor_midden+0x1>

00000700 <.Loc.163>:
                int IRState = checkFrontIRState();
     700:	0e 94 b3 02 	call	0x566	; 0x566 <checkFrontIRState>

00000704 <.LVL40>:
     704:	08 2f       	mov	r16, r24
     706:	19 2f       	mov	r17, r25

00000708 <.Loc.165>:
                switch(IRState){
     708:	02 30       	cpi	r16, 0x02	; 2
     70a:	11 05       	cpc	r17, r1
     70c:	09 f4       	brne	.+2      	; 0x710 <L0^A+0x2>

0000070e <L0^A>:
     70e:	74 c0       	rjmp	.+232    	; 0x7f8 <.L58>
     710:	0c f0       	brlt	.+2      	; 0x714 <L0^A+0x2>

00000712 <L0^A>:
     712:	64 c0       	rjmp	.+200    	; 0x7dc <.L59>
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	09 f4       	brne	.+2      	; 0x71c <L0^A+0x2>

0000071a <L0^A>:
     71a:	69 c0       	rjmp	.+210    	; 0x7ee <.L60>
     71c:	01 30       	cpi	r16, 0x01	; 1
     71e:	11 05       	cpc	r17, r1
     720:	c1 f5       	brne	.+112    	; 0x792 <.L48>

00000722 <.Loc.166>:
                        setStepperMode(rightMotor, BackwardStep);
     722:	62 e0       	ldi	r22, 0x02	; 2
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	8b e0       	ldi	r24, 0x0B	; 11
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

0000072e <.LVL42>:
                        setStepperMode(leftMotor, Off);
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

0000073a <.LVL43>:
                        break;
     73a:	e8 01       	movw	r28, r16

0000073c <.Loc.169>:
     73c:	2a c0       	rjmp	.+84     	; 0x792 <.L48>

0000073e <.L52>:
        switch(mode){
     73e:	c3 30       	cpi	r28, 0x03	; 3
     740:	d1 05       	cpc	r29, r1
     742:	39 f5       	brne	.+78     	; 0x792 <.L48>

00000744 <.LBB12>:
                if(startTurn(direction)){
     744:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <direction.2>
     748:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <direction.2+0x1>
     74c:	0e 94 9e 01 	call	0x33c	; 0x33c <startTurn>

00000750 <.LVL46>:
     750:	89 2b       	or	r24, r25
     752:	f9 f0       	breq	.+62     	; 0x792 <.L48>

00000754 <.Loc.176>:
                    direction = !direction;
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <direction.2>
     75c:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <direction.2+0x1>
     760:	23 2b       	or	r18, r19
     762:	11 f0       	breq	.+4      	; 0x768 <.L68>
     764:	9e 2d       	mov	r25, r14
     766:	8f 2d       	mov	r24, r15

00000768 <.L68>:
     768:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <direction.2>
     76c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <direction.2+0x1>

00000770 <.Loc.179>:
     770:	10 c0       	rjmp	.+32     	; 0x792 <.L48>

00000772 <.L49>:
                setBothStepperMode(Off);
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

0000077a <.LVL49>:
                if(!checkNoodstop()) {
     77a:	0e 94 57 02 	call	0x4ae	; 0x4ae <checkNoodstop>

0000077e <.LVL50>:
     77e:	c1 e0       	ldi	r28, 0x01	; 1
     780:	d0 e0       	ldi	r29, 0x00	; 0
     782:	89 2b       	or	r24, r25
     784:	11 f4       	brne	.+4      	; 0x78a <.L57>
     786:	ce 2d       	mov	r28, r14
     788:	df 2d       	mov	r29, r15

0000078a <.L57>:
     78a:	cc 0f       	add	r28, r28
     78c:	dd 1f       	adc	r29, r29
     78e:	cc 0f       	add	r28, r28
     790:	dd 1f       	adc	r29, r29

00000792 <.L48>:
        if(checkNoodstop()){
     792:	0e 94 57 02 	call	0x4ae	; 0x4ae <checkNoodstop>

00000796 <.LVL52>:
     796:	89 2b       	or	r24, r25
     798:	61 f7       	brne	.-40     	; 0x772 <.L49>

0000079a <.Loc.190>:
        if(mode != Noodstop && mode != ModeOff && isStartButtonPressed()){
     79a:	c4 30       	cpi	r28, 0x04	; 4
     79c:	d1 05       	cpc	r29, r1
     79e:	49 f3       	breq	.-46     	; 0x772 <.L49>

000007a0 <.Loc.192>:
     7a0:	20 97       	sbiw	r28, 0x00	; 0
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <.L50>

000007a4 <L0^A>:
     7a4:	9b cf       	rjmp	.-202    	; 0x6dc <.L69>

000007a6 <.L50>:
                setBothStepperMode(Off);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000007ae <.LVL54>:
                if(isStartButtonPressed()){
     7ae:	0e 94 60 02 	call	0x4c0	; 0x4c0 <isStartButtonPressed>

000007b2 <.LVL55>:
     7b2:	c8 2f       	mov	r28, r24
     7b4:	d9 2f       	mov	r29, r25

000007b6 <.Loc.196>:
     7b6:	20 97       	sbiw	r28, 0x00	; 0
     7b8:	61 f3       	breq	.-40     	; 0x792 <.L48>

000007ba <.LBB13>:
                    int switchState = checkModeSwitchState();
     7ba:	0e 94 66 02 	call	0x4cc	; 0x4cc <checkModeSwitchState>

000007be <.LVL56>:
     7be:	c8 2f       	mov	r28, r24
     7c0:	d9 2f       	mov	r29, r25

000007c2 <.Loc.199>:
                    switch(switchState){
     7c2:	c1 30       	cpi	r28, 0x01	; 1
     7c4:	d1 05       	cpc	r29, r1
     7c6:	29 f3       	breq	.-54     	; 0x792 <.L48>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	22 97       	sbiw	r28, 0x02	; 2
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <.L56>
     7d0:	8e 2d       	mov	r24, r14
     7d2:	9f 2d       	mov	r25, r15

000007d4 <.L56>:
     7d4:	ec 01       	movw	r28, r24

000007d6 <.Loc.200>:
     7d6:	cc 0f       	add	r28, r28
     7d8:	dd 1f       	adc	r29, r29
     7da:	db cf       	rjmp	.-74     	; 0x792 <.L48>

000007dc <.L59>:
     7dc:	03 30       	cpi	r16, 0x03	; 3
     7de:	11 05       	cpc	r17, r1
     7e0:	c1 f6       	brne	.-80     	; 0x792 <.L48>

000007e2 <.Loc.202>:
                        followHand(filterDistance(FrontDistance));
     7e2:	c6 01       	movw	r24, r12
     7e4:	0e 94 c7 02 	call	0x58e	; 0x58e <filterDistance>

000007e8 <.LVL60>:
     7e8:	0e 94 3f 03 	call	0x67e	; 0x67e <followHand>

000007ec <.LVL61>:
                        break;
     7ec:	d2 cf       	rjmp	.-92     	; 0x792 <.L48>

000007ee <.L60>:
                        setBothStepperMode(Off);
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

000007f6 <.LVL62>:
                        break;
     7f6:	cd cf       	rjmp	.-102    	; 0x792 <.L48>

000007f8 <.L58>:
                        setStepperMode(leftMotor, BackwardStep);
     7f8:	62 e0       	ldi	r22, 0x02	; 2
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	8a e0       	ldi	r24, 0x0A	; 10
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

00000804 <.LVL63>:
                        setStepperMode(rightMotor, Off);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	8b e0       	ldi	r24, 0x0B	; 11
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

00000810 <.LVL64>:
                        break;
     810:	c0 cf       	rjmp	.-128    	; 0x792 <.L48>

00000812 <.L51>:
                int WorldState = checkSensors();
     812:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <checkSensors>

00000816 <.LVL66>:
     816:	08 2f       	mov	r16, r24
     818:	19 2f       	mov	r17, r25

0000081a <.Loc.211>:
                switch(WorldState){
     81a:	02 30       	cpi	r16, 0x02	; 2
     81c:	11 05       	cpc	r17, r1
     81e:	21 f1       	breq	.+72     	; 0x868 <.L63>
     820:	ac f4       	brge	.+42     	; 0x84c <.L64>
     822:	01 15       	cp	r16, r1
     824:	11 05       	cpc	r17, r1
     826:	d9 f0       	breq	.+54     	; 0x85e <.L65>
     828:	01 30       	cpi	r16, 0x01	; 1
     82a:	11 05       	cpc	r17, r1
     82c:	09 f0       	breq	.+2      	; 0x830 <.Loc.212>

0000082e <L0^A>:
     82e:	b1 cf       	rjmp	.-158    	; 0x792 <.L48>

00000830 <.Loc.212>:
                        setBothStepperMode(Off);
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

00000838 <.LBB14>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	23 ed       	ldi	r18, 0xD3	; 211
     83c:	80 e3       	ldi	r24, 0x30	; 48

0000083e <.L1^B3>:
     83e:	91 50       	subi	r25, 0x01	; 1
     840:	20 40       	sbci	r18, 0x00	; 0
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <.L1^B3>
     846:	00 c0       	rjmp	.+0      	; 0x848 <L0^A>

00000848 <L0^A>:
	...

0000084a <.Loc.221>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     84a:	a3 cf       	rjmp	.-186    	; 0x792 <.L48>

0000084c <.L64>:
     84c:	03 30       	cpi	r16, 0x03	; 3
     84e:	11 05       	cpc	r17, r1
     850:	09 f0       	breq	.+2      	; 0x854 <.Loc.223>

00000852 <L0^A>:
     852:	9f cf       	rjmp	.-194    	; 0x792 <.L48>

00000854 <.Loc.223>:
                        setBothStepperMode(ForwardStep);
     854:	8e 2d       	mov	r24, r14
     856:	9f 2d       	mov	r25, r15
     858:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

0000085c <.LVL70>:
                        break;
     85c:	9a cf       	rjmp	.-204    	; 0x792 <.L48>

0000085e <.L65>:
                        setBothStepperMode(Off);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

00000866 <.LVL71>:
                        break;
     866:	95 cf       	rjmp	.-214    	; 0x792 <.L48>

00000868 <.L63>:
                        setBothStepperMode(Off);
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <setBothStepperMode>

00000870 <.LBB16>:
	__builtin_avr_delay_cycles(__ticks_dc);
     870:	9f ef       	ldi	r25, 0xFF	; 255
     872:	23 ed       	ldi	r18, 0xD3	; 211
     874:	80 e3       	ldi	r24, 0x30	; 48

00000876 <.L1^B4>:
     876:	91 50       	subi	r25, 0x01	; 1
     878:	20 40       	sbci	r18, 0x00	; 0
     87a:	80 40       	sbci	r24, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <.L1^B4>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <L0^A>

00000880 <L0^A>:
	...

00000882 <.Loc.236>:
}
     882:	e8 01       	movw	r28, r16

00000884 <.Loc.237>:
     884:	86 cf       	rjmp	.-244    	; 0x792 <.L48>

00000886 <setStepperMode>:
void setBothStepperMode(int mode){
    setStepperMode(leftMotor, mode);
    setStepperMode(rightMotor, mode);
}

void setStepperMode(int motor, int mode){
     886:	28 2f       	mov	r18, r24
     888:	39 2f       	mov	r19, r25
     88a:	86 2f       	mov	r24, r22

0000088c <.Loc.2>:
     88c:	97 2f       	mov	r25, r23

0000088e <.Loc.3>:

    int state;
    if(mode == Off){
     88e:	51 e0       	ldi	r21, 0x01	; 1
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	91 05       	cpc	r25, r1
     896:	69 f0       	breq	.+26     	; 0x8b2 <.L8>

00000898 <.L2>:
        state = 1;
    }


    int** motorLoop;
    switch(motor){
     898:	2a 30       	cpi	r18, 0x0A	; 10
     89a:	31 05       	cpc	r19, r1
     89c:	61 f0       	breq	.+24     	; 0x8b6 <.L3>
     89e:	2b 30       	cpi	r18, 0x0B	; 11
     8a0:	31 05       	cpc	r19, r1
     8a2:	81 f0       	breq	.+32     	; 0x8c4 <.L4>

000008a4 <.L5>:
            motorLoop = &rightMotorLoop;
            rightMotorEnabled = state;
            break;
    }

    switch(mode){
     8a4:	02 97       	sbiw	r24, 0x02	; 2
     8a6:	a9 f0       	breq	.+42     	; 0x8d2 <.L9>
     8a8:	88 e1       	ldi	r24, 0x18	; 24
     8aa:	92 e0       	ldi	r25, 0x02	; 2

000008ac <.L6>:
        default:
        case ForwardStep:
            *motorLoop = &LoopForward;
     8ac:	91 83       	std	Z+1, r25	; 0x01
     8ae:	80 83       	st	Z, r24

000008b0 <.Loc.10>:
            break;
        case BackwardStep:
            *motorLoop = &LoopBackwards;
            break;
    }
}
     8b0:	08 95       	ret

000008b2 <.L8>:
    if(mode == Off){
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	f1 cf       	rjmp	.-30     	; 0x898 <.L2>

000008b6 <.L3>:
            leftMotorEnabled = state;
     8b6:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <leftMotorEnabled>
     8ba:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <leftMotorEnabled+0x1>

000008be <.Loc.15>:
            motorLoop = &leftMotorLoop;
     8be:	e6 e0       	ldi	r30, 0x06	; 6
     8c0:	f2 e0       	ldi	r31, 0x02	; 2

000008c2 <.Loc.17>:
            break;
     8c2:	f0 cf       	rjmp	.-32     	; 0x8a4 <.L5>

000008c4 <.L4>:
            rightMotorEnabled = state;
     8c4:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <rightMotorEnabled>
     8c8:	40 93 01 02 	sts	0x0201, r20	; 0x800201 <rightMotorEnabled+0x1>

000008cc <.Loc.21>:
            motorLoop = &rightMotorLoop;
     8cc:	e4 e0       	ldi	r30, 0x04	; 4
     8ce:	f2 e0       	ldi	r31, 0x02	; 2

000008d0 <.Loc.23>:
            break;
     8d0:	e9 cf       	rjmp	.-46     	; 0x8a4 <.L5>

000008d2 <.L9>:
    switch(mode){
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	ea cf       	rjmp	.-44     	; 0x8ac <.L6>

000008d8 <setBothStepperMode>:
void setBothStepperMode(int mode){
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	d8 2f       	mov	r29, r24
     8de:	c9 2f       	mov	r28, r25

000008e0 <.Loc.27>:
    setStepperMode(leftMotor, mode);
     8e0:	68 2f       	mov	r22, r24
     8e2:	79 2f       	mov	r23, r25
     8e4:	8a e0       	ldi	r24, 0x0A	; 10
     8e6:	90 e0       	ldi	r25, 0x00	; 0

000008e8 <.Loc.28>:
     8e8:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

000008ec <.LVL10>:
    setStepperMode(rightMotor, mode);
     8ec:	6d 2f       	mov	r22, r29
     8ee:	7c 2f       	mov	r23, r28
     8f0:	8b e0       	ldi	r24, 0x0B	; 11
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

000008f8 <.LVL11>:
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <init_timer>:

//Clockspeed = 16.000.000 / 250 / 64 = 1.000
#define Clockspeed 1000
void init_timer(){
    // Use mode 0, clkdiv = 64
    TCCR0A = 0;
     8fe:	14 bc       	out	0x24, r1	; 36

00000900 <.Loc.34>:
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	85 bd       	out	0x25, r24	; 37

00000904 <.Loc.36>:

    // Disable PWM output
    OCR0A = 0;
     904:	17 bc       	out	0x27, r1	; 39

00000906 <.Loc.38>:
    OCR0B = 0;
     906:	18 bc       	out	0x28, r1	; 40

00000908 <.Loc.40>:

    //Overflow interrupt
    TIMSK0 = (1<<TOIE0);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

0000090e <.Loc.42>:
    TCNT0 = 6;
     90e:	86 e0       	ldi	r24, 0x06	; 6
     910:	86 bd       	out	0x26, r24	; 38

00000912 <.Loc.44>:

    sei();
     912:	78 94       	sei

00000914 <.Loc.45>:
}
     914:	08 95       	ret

00000916 <initMotorpins>:
}


void initMotorpins(){
    for(int i = MotorLeftStartpin; i < MotorLeftStartpin+4; i++){
        MotorLeftDDR |= (1<<i);
     916:	80 9a       	sbi	0x10, 0	; 16

00000918 <.Loc.52>:
     918:	81 9a       	sbi	0x10, 1	; 16

0000091a <.Loc.56>:
     91a:	82 9a       	sbi	0x10, 2	; 16

0000091c <.Loc.60>:
     91c:	83 9a       	sbi	0x10, 3	; 16

0000091e <.LBB3>:
    }

    for(int i = MotorRightStartpin; i < MotorRightStartpin+4; i++){
        MotorRightDDR |= (1<<i);
     91e:	84 9a       	sbi	0x10, 4	; 16

00000920 <.Loc.69>:
     920:	85 9a       	sbi	0x10, 5	; 16

00000922 <.Loc.73>:
     922:	86 9a       	sbi	0x10, 6	; 16

00000924 <.Loc.77>:
     924:	87 9a       	sbi	0x10, 7	; 16

00000926 <.LBE3>:
    }
}
     926:	08 95       	ret

00000928 <initSteppermotorAVRDriver>:
    initMotorpins();
     928:	0e 94 8b 04 	call	0x916	; 0x916 <initMotorpins>

0000092c <.LVL21>:
    setStepperMode(leftMotor, ForwardStep);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 43 04 	call	0x886	; 0x886 <setStepperMode>

00000938 <.LVL22>:
    init_timer();
     938:	0e 94 7f 04 	call	0x8fe	; 0x8fe <init_timer>

0000093c <.LVL23>:
}
     93c:	08 95       	ret

0000093e <LeftStepperNextStep>:

void LeftStepperNextStep(){
    static int position = 0;
    MotorLeftPort &= ~(0b1111<< MotorLeftStartpin);
     93e:	81 b3       	in	r24, 0x11	; 17
     940:	80 7f       	andi	r24, 0xF0	; 240
     942:	81 bb       	out	0x11, r24	; 17

00000944 <.Loc.93>:
    MotorLeftPort |= ((*leftMotorLoop)[position] << MotorLeftStartpin);
     944:	81 b3       	in	r24, 0x11	; 17

00000946 <.Loc.94>:
     946:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <leftMotorLoop>
     94a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <leftMotorLoop+0x1>
     94e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <position.1>
     952:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <position.1+0x1>
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	e2 0f       	add	r30, r18
     95c:	f3 1f       	adc	r31, r19

0000095e <.Loc.95>:
     95e:	90 81       	ld	r25, Z
     960:	89 2b       	or	r24, r25
     962:	81 bb       	out	0x11, r24	; 17

00000964 <.Loc.96>:
    position++;
     964:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <position.1>
     968:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <position.1+0x1>
     96c:	9c 01       	movw	r18, r24
     96e:	2f 5f       	subi	r18, 0xFF	; 255
     970:	3f 4f       	sbci	r19, 0xFF	; 255

00000972 <.Loc.98>:
    if(position == LoopLength) position = 0;
     972:	07 97       	sbiw	r24, 0x07	; 7
     974:	29 f0       	breq	.+10     	; 0x980 <.L17>

00000976 <.L15>:
    position++;
     976:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <position.1+0x1>
     97a:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <position.1>

0000097e <.Loc.101>:
}
     97e:	08 95       	ret

00000980 <.L17>:
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f8 cf       	rjmp	.-16     	; 0x976 <.L15>

00000986 <RightStepperNextStep>:

void RightStepperNextStep(){
    static int position = 0;
    MotorRightPort &= ~(0b1111<<MotorRightStartpin);
     986:	81 b3       	in	r24, 0x11	; 17
     988:	8f 70       	andi	r24, 0x0F	; 15
     98a:	81 bb       	out	0x11, r24	; 17

0000098c <.Loc.106>:
    MotorRightPort |= ((*rightMotorLoop)[position] << MotorRightStartpin);
     98c:	81 b3       	in	r24, 0x11	; 17

0000098e <.Loc.107>:
     98e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <rightMotorLoop>
     992:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <rightMotorLoop+0x1>
     996:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <position.0>
     99a:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <position.0+0x1>
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	e2 0f       	add	r30, r18
     9a4:	f3 1f       	adc	r31, r19

000009a6 <.Loc.108>:
     9a6:	20 81       	ld	r18, Z
     9a8:	31 81       	ldd	r19, Z+1	; 0x01
     9aa:	22 95       	swap	r18
     9ac:	32 95       	swap	r19
     9ae:	30 7f       	andi	r19, 0xF0	; 240
     9b0:	32 27       	eor	r19, r18
     9b2:	20 7f       	andi	r18, 0xF0	; 240
     9b4:	32 27       	eor	r19, r18

000009b6 <.Loc.109>:
     9b6:	82 2b       	or	r24, r18
     9b8:	81 bb       	out	0x11, r24	; 17

000009ba <.Loc.110>:
    position++;
     9ba:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <position.0>
     9be:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <position.0+0x1>
     9c2:	9c 01       	movw	r18, r24
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255

000009c8 <.Loc.112>:
    if(position == LoopLength) position = 0;
     9c8:	07 97       	sbiw	r24, 0x07	; 7
     9ca:	29 f0       	breq	.+10     	; 0x9d6 <.L21>

000009cc <.L19>:
    position++;
     9cc:	30 93 47 02 	sts	0x0247, r19	; 0x800247 <position.0+0x1>
     9d0:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <position.0>

000009d4 <.Loc.115>:
}
     9d4:	08 95       	ret

000009d6 <.L21>:
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f8 cf       	rjmp	.-16     	; 0x9cc <.L19>

000009dc <__vector_23>:


ISR(TIMER0_OVF_vect){
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	0b b6       	in	r0, 0x3b	; 59
     9e8:	0f 92       	push	r0
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31

00000a02 <.Loc.117>:
    if(leftMotorEnabled) LeftStepperNextStep();
     a02:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <leftMotorEnabled>
     a06:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <leftMotorEnabled+0x1>
     a0a:	89 2b       	or	r24, r25
     a0c:	d9 f4       	brne	.+54     	; 0xa44 <.L25>

00000a0e <.L23>:
    if(rightMotorEnabled) RightStepperNextStep();
     a0e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <rightMotorEnabled>
     a12:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <rightMotorEnabled+0x1>
     a16:	89 2b       	or	r24, r25
     a18:	c1 f4       	brne	.+48     	; 0xa4a <.L26>

00000a1a <.L24>:

    TCNT0 = 6;
     a1a:	86 e0       	ldi	r24, 0x06	; 6
     a1c:	86 bd       	out	0x26, r24	; 38

00000a1e <.Loc.123>:
}
     a1e:	ff 91       	pop	r31
     a20:	ef 91       	pop	r30
     a22:	bf 91       	pop	r27
     a24:	af 91       	pop	r26
     a26:	9f 91       	pop	r25
     a28:	8f 91       	pop	r24
     a2a:	7f 91       	pop	r23
     a2c:	6f 91       	pop	r22
     a2e:	5f 91       	pop	r21
     a30:	4f 91       	pop	r20
     a32:	3f 91       	pop	r19
     a34:	2f 91       	pop	r18
     a36:	0f 90       	pop	r0
     a38:	0b be       	out	0x3b, r0	; 59
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <.L25>:
    if(leftMotorEnabled) LeftStepperNextStep();
     a44:	0e 94 9f 04 	call	0x93e	; 0x93e <LeftStepperNextStep>

00000a48 <.LVL24>:
     a48:	e2 cf       	rjmp	.-60     	; 0xa0e <.L23>

00000a4a <.L26>:
    if(rightMotorEnabled) RightStepperNextStep();
     a4a:	0e 94 c3 04 	call	0x986	; 0x986 <RightStepperNextStep>

00000a4e <.LVL25>:
     a4e:	e5 cf       	rjmp	.-54     	; 0xa1a <.L24>

00000a50 <agv_ultrasoon_init>:
volatile uint16_t agv_ultrasoon_voor_midden = 0; //pin A12
volatile uint8_t agv_ultrasoon_current_sensor = 2;

void agv_ultrasoon_init()
{
    cli();
     a50:	f8 94       	cli

00000a52 <.Loc.2>:
    TCCR3A |= (1<<COM3A1) | (1<<WGM31);
     a52:	e0 e9       	ldi	r30, 0x90	; 144
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z

00000a58 <.Loc.3>:
     a58:	82 68       	ori	r24, 0x82	; 130
     a5a:	80 83       	st	Z, r24

00000a5c <.Loc.4>:
    TCCR3B |= (1<<WGM33) | (1<<CS31) | (1<<WGM32);//wgm33 wgm32 wgm31
     a5c:	e1 e9       	ldi	r30, 0x91	; 145
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z

00000a62 <.Loc.5>:
     a62:	8a 61       	ori	r24, 0x1A	; 26
     a64:	80 83       	st	Z, r24

00000a66 <.Loc.6>:
    ICR3 = 32768;
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e8       	ldi	r25, 0x80	; 128
     a6a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     a6e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00000a72 <.Loc.8>:
    OCR3A = 20;//10microsec
     a72:	84 e1       	ldi	r24, 0x14	; 20
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     a7a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000a7e <.Loc.10>:
    OCR3B = 5500;// (10microsec + 480microsec+ marge) *2
     a7e:	8c e7       	ldi	r24, 0x7C	; 124
     a80:	95 e1       	ldi	r25, 0x15	; 21
     a82:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     a86:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>

00000a8a <.Loc.12>:
    DDRE |= (1<<PE3);
     a8a:	6b 9a       	sbi	0x0d, 3	; 13

00000a8c <.Loc.14>:
    TIMSK3 |= (1<<ICIE3) | (1<<OCIE3B);
     a8c:	e1 e7       	ldi	r30, 0x71	; 113
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z

00000a92 <.Loc.15>:
     a92:	84 62       	ori	r24, 0x24	; 36
     a94:	80 83       	st	Z, r24

00000a96 <.Loc.16>:
    //pin change interrupt:
    PCICR |= (1<<PCIE2);//enables pci 16 tot 23
     a96:	e8 e6       	ldi	r30, 0x68	; 104
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z

00000a9c <.Loc.17>:
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	80 83       	st	Z, r24

00000aa0 <.Loc.18>:
    sei();
     aa0:	78 94       	sei

00000aa2 <.Loc.19>:
}
     aa2:	08 95       	ret

00000aa4 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     aa4:	8f 93       	push	r24
     aa6:	8f b7       	in	r24, 0x3f	; 63
     aa8:	8f 93       	push	r24
     aaa:	8b b7       	in	r24, 0x3b	; 59
     aac:	8f 93       	push	r24
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31

00000ab2 <.Loc.21>:
    agv_ultrasoon_current_sensor = (agv_ultrasoon_current_sensor<<1);
     ab2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>
     ab6:	88 0f       	add	r24, r24

00000ab8 <.Loc.23>:
     ab8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>

00000abc <.Loc.24>:
    if (agv_ultrasoon_current_sensor == (1<<6))//0b00100000
     abc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000ac0 <.Loc.26>:
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	89 f0       	breq	.+34     	; 0xae6 <.L4>

00000ac4 <.L3>:
    {
        agv_ultrasoon_current_sensor = 2;

    }
    PCMSK2 = agv_ultrasoon_current_sensor;
     ac4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>
     ac8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000acc <.Loc.29>:
    //PORTA = agv_ultrasoon_current_sensor;
    TIMSK3 |= (1<<OCIE3B);
     acc:	e1 e7       	ldi	r30, 0x71	; 113
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z

00000ad2 <.Loc.30>:
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	80 83       	st	Z, r24

00000ad6 <.Loc.31>:
}
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	8f 91       	pop	r24
     adc:	8b bf       	out	0x3b, r24	; 59
     ade:	8f 91       	pop	r24
     ae0:	8f bf       	out	0x3f, r24	; 63
     ae2:	8f 91       	pop	r24
     ae4:	18 95       	reti

00000ae6 <.L4>:
        agv_ultrasoon_current_sensor = 2;
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <agv_ultrasoon_current_sensor>
     aec:	eb cf       	rjmp	.-42     	; 0xac4 <.L3>

00000aee <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	0b b6       	in	r0, 0x3b	; 59
     afa:	0f 92       	push	r0
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <L0^A>

00000b1a <L0^A>:
     b1a:	0f 92       	push	r0
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62

00000b20 <.Loc.35>:
    //zet max naar sensorwaarde
    if(agv_ultrasoon_current_sensor == 0b00000010)
     b20:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000b24 <.Loc.37>:
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	f1 f1       	breq	.+124    	; 0xba4 <.L9>

00000b28 <.Loc.38>:
    {
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
     b28:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000b2c <.Loc.40>:
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	09 f4       	brne	.+2      	; 0xb32 <.Loc.41>

00000b30 <L0^A>:
     b30:	87 c0       	rjmp	.+270    	; 0xc40 <.L10>

00000b32 <.Loc.41>:
    {
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
     b32:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000b36 <.Loc.43>:
     b36:	80 31       	cpi	r24, 0x10	; 16
     b38:	09 f0       	breq	.+2      	; 0xb3c <.Loc.44>

00000b3a <L0^A>:
     b3a:	67 c0       	rjmp	.+206    	; 0xc0a <.L7>

00000b3c <.Loc.44>:
    {
        agv_ultrasoon_voor_midden = (ICR3 - 4454)/4*0.0343;
     b3c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     b40:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000b44 <.Loc.46>:
     b44:	86 56       	subi	r24, 0x66	; 102
     b46:	91 41       	sbci	r25, 0x11	; 17

00000b48 <.Loc.47>:
     b48:	96 95       	lsr	r25
     b4a:	87 95       	ror	r24
     b4c:	96 95       	lsr	r25
     b4e:	87 95       	ror	r24

00000b50 <.Loc.48>:
     b50:	9c 01       	movw	r18, r24
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	29 83       	std	Y+1, r18	; 0x01
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	4b 83       	std	Y+3, r20	; 0x03
     b5c:	5c 83       	std	Y+4, r21	; 0x04
     b5e:	ca 01       	movw	r24, r20
     b60:	b9 01       	movw	r22, r18
     b62:	0e 94 69 07 	call	0xed2	; 0xed2 <__floatunsisf>

00000b66 <.LVL0>:
     b66:	28 e2       	ldi	r18, 0x28	; 40
     b68:	3e e7       	ldi	r19, 0x7E	; 126
     b6a:	4c e0       	ldi	r20, 0x0C	; 12
     b6c:	5d e3       	ldi	r21, 0x3D	; 61
     b6e:	69 83       	std	Y+1, r22	; 0x01
     b70:	7a 83       	std	Y+2, r23	; 0x02
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	69 81       	ldd	r22, Y+1	; 0x01
     b78:	7a 81       	ldd	r23, Y+2	; 0x02
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3>

00000b82 <.LVL1>:
     b82:	69 83       	std	Y+1, r22	; 0x01
     b84:	7a 83       	std	Y+2, r23	; 0x02
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	9c 83       	std	Y+4, r25	; 0x04
     b8a:	69 81       	ldd	r22, Y+1	; 0x01
     b8c:	7a 81       	ldd	r23, Y+2	; 0x02
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>

00000b96 <.LVL2>:
     b96:	46 2f       	mov	r20, r22
     b98:	57 2f       	mov	r21, r23
     b9a:	50 93 4b 02 	sts	0x024B, r21	; 0x80024b <agv_ultrasoon_voor_midden+0x1>
     b9e:	40 93 4a 02 	sts	0x024A, r20	; 0x80024a <agv_ultrasoon_voor_midden>
     ba2:	33 c0       	rjmp	.+102    	; 0xc0a <.L7>

00000ba4 <.L9>:
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
     ba4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     ba8:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000bac <.Loc.52>:
     bac:	86 56       	subi	r24, 0x66	; 102
     bae:	91 41       	sbci	r25, 0x11	; 17

00000bb0 <.Loc.53>:
     bb0:	96 95       	lsr	r25
     bb2:	87 95       	ror	r24
     bb4:	96 95       	lsr	r25
     bb6:	87 95       	ror	r24

00000bb8 <.Loc.54>:
     bb8:	9c 01       	movw	r18, r24
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	29 83       	std	Y+1, r18	; 0x01
     bc0:	3a 83       	std	Y+2, r19	; 0x02
     bc2:	4b 83       	std	Y+3, r20	; 0x03
     bc4:	5c 83       	std	Y+4, r21	; 0x04
     bc6:	ca 01       	movw	r24, r20
     bc8:	b9 01       	movw	r22, r18
     bca:	0e 94 69 07 	call	0xed2	; 0xed2 <__floatunsisf>

00000bce <.LVL3>:
     bce:	28 e2       	ldi	r18, 0x28	; 40
     bd0:	3e e7       	ldi	r19, 0x7E	; 126
     bd2:	4c e0       	ldi	r20, 0x0C	; 12
     bd4:	5d e3       	ldi	r21, 0x3D	; 61
     bd6:	69 83       	std	Y+1, r22	; 0x01
     bd8:	7a 83       	std	Y+2, r23	; 0x02
     bda:	8b 83       	std	Y+3, r24	; 0x03
     bdc:	9c 83       	std	Y+4, r25	; 0x04
     bde:	69 81       	ldd	r22, Y+1	; 0x01
     be0:	7a 81       	ldd	r23, Y+2	; 0x02
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3>

00000bea <.LVL4>:
     bea:	69 83       	std	Y+1, r22	; 0x01
     bec:	7a 83       	std	Y+2, r23	; 0x02
     bee:	8b 83       	std	Y+3, r24	; 0x03
     bf0:	9c 83       	std	Y+4, r25	; 0x04
     bf2:	69 81       	ldd	r22, Y+1	; 0x01
     bf4:	7a 81       	ldd	r23, Y+2	; 0x02
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>

00000bfe <.LVL5>:
     bfe:	46 2f       	mov	r20, r22
     c00:	57 2f       	mov	r21, r23
     c02:	50 93 4d 02 	sts	0x024D, r21	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     c06:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <agv_ultrasoon_boom_rechts>

00000c0a <.L7>:
    }
    PCMSK2 = 0;
     c0a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000c0e <.Loc.58>:

}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0b be       	out	0x3b, r0	; 59
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <.L10>:
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
     c40:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     c44:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

00000c48 <.Loc.61>:
     c48:	86 56       	subi	r24, 0x66	; 102
     c4a:	91 41       	sbci	r25, 0x11	; 17

00000c4c <.Loc.62>:
     c4c:	96 95       	lsr	r25
     c4e:	87 95       	ror	r24
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24

00000c54 <.Loc.63>:
     c54:	9c 01       	movw	r18, r24
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	29 83       	std	Y+1, r18	; 0x01
     c5c:	3a 83       	std	Y+2, r19	; 0x02
     c5e:	4b 83       	std	Y+3, r20	; 0x03
     c60:	5c 83       	std	Y+4, r21	; 0x04
     c62:	ca 01       	movw	r24, r20
     c64:	b9 01       	movw	r22, r18
     c66:	0e 94 69 07 	call	0xed2	; 0xed2 <__floatunsisf>

00000c6a <.LVL6>:
     c6a:	28 e2       	ldi	r18, 0x28	; 40
     c6c:	3e e7       	ldi	r19, 0x7E	; 126
     c6e:	4c e0       	ldi	r20, 0x0C	; 12
     c70:	5d e3       	ldi	r21, 0x3D	; 61
     c72:	69 83       	std	Y+1, r22	; 0x01
     c74:	7a 83       	std	Y+2, r23	; 0x02
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	69 81       	ldd	r22, Y+1	; 0x01
     c7c:	7a 81       	ldd	r23, Y+2	; 0x02
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3>

00000c86 <.LVL7>:
     c86:	69 83       	std	Y+1, r22	; 0x01
     c88:	7a 83       	std	Y+2, r23	; 0x02
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	69 81       	ldd	r22, Y+1	; 0x01
     c90:	7a 81       	ldd	r23, Y+2	; 0x02
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>

00000c9a <.LVL8>:
     c9a:	46 2f       	mov	r20, r22
     c9c:	57 2f       	mov	r21, r23
     c9e:	50 93 4f 02 	sts	0x024F, r21	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     ca2:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <agv_ultrasoon_boom_links>
     ca6:	b1 cf       	rjmp	.-158    	; 0xc0a <.L7>

00000ca8 <__vector_11>:

ISR(PCINT2_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <L0^A>

00000cd4 <L0^A>:
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62

00000cda <.Loc.66>:
    if(agv_ultrasoon_current_sensor == 0b00000010)
     cda:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000cde <.Loc.68>:
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	09 f4       	brne	.+2      	; 0xce4 <.Loc.69>

00000ce2 <L0^A>:
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <.L15>

00000ce4 <.Loc.69>:
    {
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
        PORTA &= ~(0b00000001);
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
     ce4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000ce8 <.Loc.71>:
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	09 f4       	brne	.+2      	; 0xcee <.Loc.72>

00000cec <L0^A>:
     cec:	8e c0       	rjmp	.+284    	; 0xe0a <.L16>

00000cee <.Loc.72>:
    {
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
        PORTA &= ~(0b00000010);
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
     cee:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <agv_ultrasoon_current_sensor>

00000cf2 <.Loc.74>:
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <.Loc.75>

00000cf6 <L0^A>:
     cf6:	69 c0       	rjmp	.+210    	; 0xdca <.L13>

00000cf8 <.Loc.75>:
    {
        agv_ultrasoon_voor_midden = (TCNT3 - 4454)/4*0.0343;
     cf8:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     cfc:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00000d00 <.Loc.77>:
     d00:	86 56       	subi	r24, 0x66	; 102
     d02:	91 41       	sbci	r25, 0x11	; 17

00000d04 <.Loc.78>:
     d04:	96 95       	lsr	r25
     d06:	87 95       	ror	r24
     d08:	96 95       	lsr	r25
     d0a:	87 95       	ror	r24

00000d0c <.Loc.79>:
     d0c:	9c 01       	movw	r18, r24
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	29 83       	std	Y+1, r18	; 0x01
     d14:	3a 83       	std	Y+2, r19	; 0x02
     d16:	4b 83       	std	Y+3, r20	; 0x03
     d18:	5c 83       	std	Y+4, r21	; 0x04
     d1a:	ca 01       	movw	r24, r20
     d1c:	b9 01       	movw	r22, r18
     d1e:	0e 94 69 07 	call	0xed2	; 0xed2 <__floatunsisf>

00000d22 <.LVL9>:
     d22:	28 e2       	ldi	r18, 0x28	; 40
     d24:	3e e7       	ldi	r19, 0x7E	; 126
     d26:	4c e0       	ldi	r20, 0x0C	; 12
     d28:	5d e3       	ldi	r21, 0x3D	; 61
     d2a:	69 83       	std	Y+1, r22	; 0x01
     d2c:	7a 83       	std	Y+2, r23	; 0x02
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	69 81       	ldd	r22, Y+1	; 0x01
     d34:	7a 81       	ldd	r23, Y+2	; 0x02
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3>

00000d3e <.LVL10>:
     d3e:	69 83       	std	Y+1, r22	; 0x01
     d40:	7a 83       	std	Y+2, r23	; 0x02
     d42:	8b 83       	std	Y+3, r24	; 0x03
     d44:	9c 83       	std	Y+4, r25	; 0x04
     d46:	69 81       	ldd	r22, Y+1	; 0x01
     d48:	7a 81       	ldd	r23, Y+2	; 0x02
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>

00000d52 <.LVL11>:
     d52:	46 2f       	mov	r20, r22
     d54:	57 2f       	mov	r21, r23
     d56:	50 93 4b 02 	sts	0x024B, r21	; 0x80024b <agv_ultrasoon_voor_midden+0x1>
     d5a:	40 93 4a 02 	sts	0x024A, r20	; 0x80024a <agv_ultrasoon_voor_midden>

00000d5e <.Loc.81>:
        PORTA &= ~(0b00001000);
     d5e:	13 98       	cbi	0x02, 3	; 2
     d60:	34 c0       	rjmp	.+104    	; 0xdca <.L13>

00000d62 <.L15>:
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
     d62:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     d66:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00000d6a <.Loc.85>:
     d6a:	86 56       	subi	r24, 0x66	; 102
     d6c:	91 41       	sbci	r25, 0x11	; 17

00000d6e <.Loc.86>:
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24

00000d76 <.Loc.87>:
     d76:	9c 01       	movw	r18, r24
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	29 83       	std	Y+1, r18	; 0x01
     d7e:	3a 83       	std	Y+2, r19	; 0x02
     d80:	4b 83       	std	Y+3, r20	; 0x03
     d82:	5c 83       	std	Y+4, r21	; 0x04
     d84:	ca 01       	movw	r24, r20
     d86:	b9 01       	movw	r22, r18
     d88:	0e 94 69 07 	call	0xed2	; 0xed2 <__floatunsisf>

00000d8c <.LVL12>:
     d8c:	28 e2       	ldi	r18, 0x28	; 40
     d8e:	3e e7       	ldi	r19, 0x7E	; 126
     d90:	4c e0       	ldi	r20, 0x0C	; 12
     d92:	5d e3       	ldi	r21, 0x3D	; 61
     d94:	69 83       	std	Y+1, r22	; 0x01
     d96:	7a 83       	std	Y+2, r23	; 0x02
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	69 81       	ldd	r22, Y+1	; 0x01
     d9e:	7a 81       	ldd	r23, Y+2	; 0x02
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3>

00000da8 <.LVL13>:
     da8:	69 83       	std	Y+1, r22	; 0x01
     daa:	7a 83       	std	Y+2, r23	; 0x02
     dac:	8b 83       	std	Y+3, r24	; 0x03
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	69 81       	ldd	r22, Y+1	; 0x01
     db2:	7a 81       	ldd	r23, Y+2	; 0x02
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>

00000dbc <.LVL14>:
     dbc:	46 2f       	mov	r20, r22
     dbe:	57 2f       	mov	r21, r23
     dc0:	50 93 4d 02 	sts	0x024D, r21	; 0x80024d <agv_ultrasoon_boom_rechts+0x1>
     dc4:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <agv_ultrasoon_boom_rechts>

00000dc8 <.Loc.89>:
        PORTA &= ~(0b00000001);
     dc8:	10 98       	cbi	0x02, 0	; 2

00000dca <.L13>:
    }
    //check welke sensor en schrijf timer3 waarde naar sensorwaarde
    TIMSK3 &= ~(1<<ICIE3);
     dca:	e1 e7       	ldi	r30, 0x71	; 113
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8f 7d       	andi	r24, 0xDF	; 223
     dd2:	80 83       	st	Z, r24

00000dd4 <.Loc.93>:
    //zet timer3 overflow flag uit
    PCMSK2 = 0;
     dd4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00000dd8 <.Loc.95>:
}
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0b be       	out	0x3b, r0	; 59
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <.L16>:
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
     e0a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     e0e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00000e12 <.Loc.98>:
     e12:	86 56       	subi	r24, 0x66	; 102
     e14:	91 41       	sbci	r25, 0x11	; 17

00000e16 <.Loc.99>:
     e16:	96 95       	lsr	r25
     e18:	87 95       	ror	r24
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24

00000e1e <.Loc.100>:
     e1e:	9c 01       	movw	r18, r24
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	29 83       	std	Y+1, r18	; 0x01
     e26:	3a 83       	std	Y+2, r19	; 0x02
     e28:	4b 83       	std	Y+3, r20	; 0x03
     e2a:	5c 83       	std	Y+4, r21	; 0x04
     e2c:	ca 01       	movw	r24, r20
     e2e:	b9 01       	movw	r22, r18
     e30:	0e 94 69 07 	call	0xed2	; 0xed2 <__floatunsisf>

00000e34 <.LVL15>:
     e34:	28 e2       	ldi	r18, 0x28	; 40
     e36:	3e e7       	ldi	r19, 0x7E	; 126
     e38:	4c e0       	ldi	r20, 0x0C	; 12
     e3a:	5d e3       	ldi	r21, 0x3D	; 61
     e3c:	69 83       	std	Y+1, r22	; 0x01
     e3e:	7a 83       	std	Y+2, r23	; 0x02
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	69 81       	ldd	r22, Y+1	; 0x01
     e46:	7a 81       	ldd	r23, Y+2	; 0x02
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3>

00000e50 <.LVL16>:
     e50:	69 83       	std	Y+1, r22	; 0x01
     e52:	7a 83       	std	Y+2, r23	; 0x02
     e54:	8b 83       	std	Y+3, r24	; 0x03
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	69 81       	ldd	r22, Y+1	; 0x01
     e5a:	7a 81       	ldd	r23, Y+2	; 0x02
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fixunssfsi>

00000e64 <.LVL17>:
     e64:	46 2f       	mov	r20, r22
     e66:	57 2f       	mov	r21, r23
     e68:	50 93 4f 02 	sts	0x024F, r21	; 0x80024f <agv_ultrasoon_boom_links+0x1>
     e6c:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <agv_ultrasoon_boom_links>

00000e70 <.Loc.102>:
        PORTA &= ~(0b00000010);
     e70:	11 98       	cbi	0x02, 1	; 2
     e72:	ab cf       	rjmp	.-170    	; 0xdca <.L13>

00000e74 <__fixunssfsi>:
     e74:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_splitA>
     e78:	88 f0       	brcs	.+34     	; 0xe9c <.L_err>
     e7a:	9f 57       	subi	r25, 0x7F	; 127
     e7c:	98 f0       	brcs	.+38     	; 0xea4 <.L_zr>
     e7e:	b9 2f       	mov	r27, r25
     e80:	99 27       	eor	r25, r25
     e82:	b7 51       	subi	r27, 0x17	; 23
     e84:	b0 f0       	brcs	.+44     	; 0xeb2 <.L4^B1>
     e86:	e1 f0       	breq	.+56     	; 0xec0 <.L_sign>

00000e88 <.L1^B1>:
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	1a f0       	brmi	.+6      	; 0xe98 <.L2^B1>
     e92:	ba 95       	dec	r27
     e94:	c9 f7       	brne	.-14     	; 0xe88 <.L1^B1>
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <.L_sign>

00000e98 <.L2^B1>:
     e98:	b1 30       	cpi	r27, 0x01	; 1
     e9a:	91 f0       	breq	.+36     	; 0xec0 <.L_sign>

00000e9c <.L_err>:
     e9c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_zero>
     ea0:	b1 e0       	ldi	r27, 0x01	; 1
     ea2:	08 95       	ret

00000ea4 <.L_zr>:
     ea4:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__fp_zero>

00000ea8 <.L3^B1>:
     ea8:	67 2f       	mov	r22, r23
     eaa:	78 2f       	mov	r23, r24
     eac:	88 27       	eor	r24, r24
     eae:	b8 5f       	subi	r27, 0xF8	; 248
     eb0:	39 f0       	breq	.+14     	; 0xec0 <.L_sign>

00000eb2 <.L4^B1>:
     eb2:	b9 3f       	cpi	r27, 0xF9	; 249
     eb4:	cc f3       	brlt	.-14     	; 0xea8 <.L3^B1>

00000eb6 <.L5^B1>:
     eb6:	86 95       	lsr	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b3 95       	inc	r27
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <.L5^B1>

00000ec0 <.L_sign>:
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <.L6^B1>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255

00000ed0 <.L6^B1>:
     ed0:	08 95       	ret

00000ed2 <__floatunsisf>:
     ed2:	e8 94       	clt
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <.L1^B1>

00000ed6 <__floatsisf>:
     ed6:	97 fb       	bst	r25, 7
     ed8:	3e f4       	brtc	.+14     	; 0xee8 <.L1^B1>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255

00000ee8 <.L1^B1>:
     ee8:	99 23       	and	r25, r25
     eea:	a9 f0       	breq	.+42     	; 0xf16 <.L4^B1>
     eec:	f9 2f       	mov	r31, r25
     eee:	96 e9       	ldi	r25, 0x96	; 150
     ef0:	bb 27       	eor	r27, r27

00000ef2 <.L2^B1>:
     ef2:	93 95       	inc	r25
     ef4:	f6 95       	lsr	r31
     ef6:	87 95       	ror	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f1 11       	cpse	r31, r1
     f00:	f8 cf       	rjmp	.-16     	; 0xef2 <.L2^B1>
     f02:	fa f4       	brpl	.+62     	; 0xf42 <.L_pack>
     f04:	bb 0f       	add	r27, r27
     f06:	11 f4       	brne	.+4      	; 0xf0c <.L3^B1>
     f08:	60 ff       	sbrs	r22, 0
     f0a:	1b c0       	rjmp	.+54     	; 0xf42 <.L_pack>

00000f0c <.L3^B1>:
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <.L_pack>

00000f16 <.L4^B1>:
     f16:	88 23       	and	r24, r24
     f18:	11 f0       	breq	.+4      	; 0xf1e <.L5^B1>
     f1a:	96 e9       	ldi	r25, 0x96	; 150
     f1c:	11 c0       	rjmp	.+34     	; 0xf40 <.L8^B1>

00000f1e <.L5^B1>:
     f1e:	77 23       	and	r23, r23
     f20:	21 f0       	breq	.+8      	; 0xf2a <.L6^B1>
     f22:	9e e8       	ldi	r25, 0x8E	; 142
     f24:	87 2f       	mov	r24, r23
     f26:	76 2f       	mov	r23, r22
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <.L7^B1>

00000f2a <.L6^B1>:
     f2a:	66 23       	and	r22, r22
     f2c:	71 f0       	breq	.+28     	; 0xf4a <.L9^B1>
     f2e:	96 e8       	ldi	r25, 0x86	; 134
     f30:	86 2f       	mov	r24, r22
     f32:	70 e0       	ldi	r23, 0x00	; 0

00000f34 <.L7^B1>:
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	2a f0       	brmi	.+10     	; 0xf42 <.L_pack>

00000f38 <.L10^B1>:
     f38:	9a 95       	dec	r25
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24

00000f40 <.L8^B1>:
     f40:	da f7       	brpl	.-10     	; 0xf38 <.L10^B1>

00000f42 <.L_pack>:
     f42:	88 0f       	add	r24, r24
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7

00000f4a <.L9^B1>:
     f4a:	08 95       	ret

00000f4c <__fp_split3>:
     f4c:	57 fd       	sbrc	r21, 7
     f4e:	90 58       	subi	r25, 0x80	; 128
     f50:	44 0f       	add	r20, r20
     f52:	55 1f       	adc	r21, r21
     f54:	59 f0       	breq	.+22     	; 0xf6c <.L4^B1>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	71 f0       	breq	.+28     	; 0xf76 <.L5^B1>

00000f5a <.L1^B1>:
     f5a:	47 95       	ror	r20

00000f5c <__fp_splitA>:
     f5c:	88 0f       	add	r24, r24
     f5e:	97 fb       	bst	r25, 7
     f60:	99 1f       	adc	r25, r25
     f62:	61 f0       	breq	.+24     	; 0xf7c <.L6^B1>
     f64:	9f 3f       	cpi	r25, 0xFF	; 255
     f66:	79 f0       	breq	.+30     	; 0xf86 <.L7^B1>

00000f68 <.L3^B1>:
     f68:	87 95       	ror	r24
     f6a:	08 95       	ret

00000f6c <.L4^B1>:
     f6c:	12 16       	cp	r1, r18
     f6e:	13 06       	cpc	r1, r19
     f70:	14 06       	cpc	r1, r20
     f72:	55 1f       	adc	r21, r21
     f74:	f2 cf       	rjmp	.-28     	; 0xf5a <.L1^B1>

00000f76 <.L5^B1>:
     f76:	46 95       	lsr	r20
     f78:	f1 df       	rcall	.-30     	; 0xf5c <__fp_splitA>
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <.L8^B1>

00000f7c <.L6^B1>:
     f7c:	16 16       	cp	r1, r22
     f7e:	17 06       	cpc	r1, r23
     f80:	18 06       	cpc	r1, r24
     f82:	99 1f       	adc	r25, r25
     f84:	f1 cf       	rjmp	.-30     	; 0xf68 <.L3^B1>

00000f86 <.L7^B1>:
     f86:	86 95       	lsr	r24
     f88:	71 05       	cpc	r23, r1
     f8a:	61 05       	cpc	r22, r1

00000f8c <.L8^B1>:
     f8c:	08 94       	sec
     f8e:	08 95       	ret

00000f90 <__fp_zero>:
     f90:	e8 94       	clt

00000f92 <__fp_szero>:
     f92:	bb 27       	eor	r27, r27
     f94:	66 27       	eor	r22, r22
     f96:	77 27       	eor	r23, r23
     f98:	cb 01       	movw	r24, r22
     f9a:	97 f9       	bld	r25, 7
     f9c:	08 95       	ret

00000f9e <__mulsf3>:
     f9e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__mulsf3x>
     fa2:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_round>

00000fa6 <.L^B1>:
     fa6:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_pscA>
     faa:	38 f0       	brcs	.+14     	; 0xfba <.L1^B1>
     fac:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fp_pscB>
     fb0:	20 f0       	brcs	.+8      	; 0xfba <.L1^B1>
     fb2:	95 23       	and	r25, r21
     fb4:	11 f0       	breq	.+4      	; 0xfba <.L1^B1>
     fb6:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_inf>

00000fba <.L1^B1>:
     fba:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_nan>

00000fbe <.L2^B1>:
     fbe:	11 24       	eor	r1, r1
     fc0:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_szero>

00000fc4 <__mulsf3x>:
     fc4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_split3>
     fc8:	70 f3       	brcs	.-36     	; 0xfa6 <.L^B1>

00000fca <__mulsf3_pse>:
     fca:	95 9f       	mul	r25, r21
     fcc:	c1 f3       	breq	.-16     	; 0xfbe <.L2^B1>
     fce:	95 0f       	add	r25, r21
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	55 1f       	adc	r21, r21
     fd4:	62 9f       	mul	r22, r18
     fd6:	f0 01       	movw	r30, r0
     fd8:	72 9f       	mul	r23, r18
     fda:	bb 27       	eor	r27, r27
     fdc:	f0 0d       	add	r31, r0
     fde:	b1 1d       	adc	r27, r1
     fe0:	63 9f       	mul	r22, r19
     fe2:	aa 27       	eor	r26, r26
     fe4:	f0 0d       	add	r31, r0
     fe6:	b1 1d       	adc	r27, r1
     fe8:	aa 1f       	adc	r26, r26
     fea:	64 9f       	mul	r22, r20
     fec:	66 27       	eor	r22, r22
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	66 1f       	adc	r22, r22
     ff4:	82 9f       	mul	r24, r18
     ff6:	22 27       	eor	r18, r18
     ff8:	b0 0d       	add	r27, r0
     ffa:	a1 1d       	adc	r26, r1
     ffc:	62 1f       	adc	r22, r18
     ffe:	73 9f       	mul	r23, r19
    1000:	b0 0d       	add	r27, r0
    1002:	a1 1d       	adc	r26, r1
    1004:	62 1f       	adc	r22, r18
    1006:	83 9f       	mul	r24, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	22 1f       	adc	r18, r18
    100e:	74 9f       	mul	r23, r20
    1010:	33 27       	eor	r19, r19
    1012:	a0 0d       	add	r26, r0
    1014:	61 1d       	adc	r22, r1
    1016:	23 1f       	adc	r18, r19
    1018:	84 9f       	mul	r24, r20
    101a:	60 0d       	add	r22, r0
    101c:	21 1d       	adc	r18, r1
    101e:	82 2f       	mov	r24, r18
    1020:	76 2f       	mov	r23, r22
    1022:	6a 2f       	mov	r22, r26
    1024:	11 24       	eor	r1, r1
    1026:	9f 57       	subi	r25, 0x7F	; 127
    1028:	50 40       	sbci	r21, 0x00	; 0
    102a:	9a f0       	brmi	.+38     	; 0x1052 <.L13^B1>
    102c:	f1 f0       	breq	.+60     	; 0x106a <.L15^B1>

0000102e <.L10^B1>:
    102e:	88 23       	and	r24, r24
    1030:	4a f0       	brmi	.+18     	; 0x1044 <.L11^B1>
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	bb 1f       	adc	r27, r27
    1038:	66 1f       	adc	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	a9 f7       	brne	.-22     	; 0x102e <.L10^B1>

00001044 <.L11^B1>:
    1044:	9e 3f       	cpi	r25, 0xFE	; 254
    1046:	51 05       	cpc	r21, r1
    1048:	80 f0       	brcs	.+32     	; 0x106a <.L15^B1>
    104a:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_inf>

0000104e <.L12^B1>:
    104e:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_szero>

00001052 <.L13^B1>:
    1052:	5f 3f       	cpi	r21, 0xFF	; 255
    1054:	e4 f3       	brlt	.-8      	; 0x104e <.L12^B1>
    1056:	98 3e       	cpi	r25, 0xE8	; 232
    1058:	d4 f3       	brlt	.-12     	; 0x104e <.L12^B1>

0000105a <.L14^B1>:
    105a:	86 95       	lsr	r24
    105c:	77 95       	ror	r23
    105e:	67 95       	ror	r22
    1060:	b7 95       	ror	r27
    1062:	f7 95       	ror	r31
    1064:	e7 95       	ror	r30
    1066:	9f 5f       	subi	r25, 0xFF	; 255
    1068:	c1 f7       	brne	.-16     	; 0x105a <.L14^B1>

0000106a <.L15^B1>:
    106a:	fe 2b       	or	r31, r30
    106c:	88 0f       	add	r24, r24
    106e:	91 1d       	adc	r25, r1
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	97 f9       	bld	r25, 7
    1076:	08 95       	ret

00001078 <__fp_inf>:
    1078:	97 f9       	bld	r25, 7
    107a:	9f 67       	ori	r25, 0x7F	; 127
    107c:	80 e8       	ldi	r24, 0x80	; 128
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	08 95       	ret

00001084 <__fp_nan>:
    1084:	9f ef       	ldi	r25, 0xFF	; 255
    1086:	80 ec       	ldi	r24, 0xC0	; 192
    1088:	08 95       	ret

0000108a <__fp_pscA>:
    108a:	00 24       	eor	r0, r0
    108c:	0a 94       	dec	r0
    108e:	16 16       	cp	r1, r22
    1090:	17 06       	cpc	r1, r23
    1092:	18 06       	cpc	r1, r24
    1094:	09 06       	cpc	r0, r25
    1096:	08 95       	ret

00001098 <__fp_pscB>:
    1098:	00 24       	eor	r0, r0
    109a:	0a 94       	dec	r0
    109c:	12 16       	cp	r1, r18
    109e:	13 06       	cpc	r1, r19
    10a0:	14 06       	cpc	r1, r20
    10a2:	05 06       	cpc	r0, r21
    10a4:	08 95       	ret

000010a6 <__fp_round>:
    10a6:	09 2e       	mov	r0, r25
    10a8:	03 94       	inc	r0
    10aa:	00 0c       	add	r0, r0
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <.L1^B1>
    10ae:	88 23       	and	r24, r24
    10b0:	52 f0       	brmi	.+20     	; 0x10c6 <.L3^B1>

000010b2 <.L1^B1>:
    10b2:	bb 0f       	add	r27, r27
    10b4:	40 f4       	brcc	.+16     	; 0x10c6 <.L3^B1>
    10b6:	bf 2b       	or	r27, r31
    10b8:	11 f4       	brne	.+4      	; 0x10be <.L2^B1>
    10ba:	60 ff       	sbrs	r22, 0
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <.L3^B1>

000010be <.L2^B1>:
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8f 4f       	sbci	r24, 0xFF	; 255
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255

000010c6 <.L3^B1>:
    10c6:	08 95       	ret

000010c8 <_exit>:
    10c8:	f8 94       	cli

000010ca <__stop_program>:
    10ca:	ff cf       	rjmp	.-2      	; 0x10ca <__stop_program>
