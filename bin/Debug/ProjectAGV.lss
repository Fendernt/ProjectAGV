
bin\Debug\ProjectAGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00001802  000018b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001802  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800236  00800236  000018ec  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000178  00000000  00000000  00001948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00002a2e  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001628  00000000  00000000  000044ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00002a94  00000000  00000000  00005b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000005fc  00000000  00000000  000085ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000bc8  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000210  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000a26  00000000  00000000  00009980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000005e  00000000  00000000  0000a3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_11>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e2 e0       	ldi	r30, 0x02	; 2

000000fc <.Loc.4>:
      fc:	f8 e1       	ldi	r31, 0x18	; 24

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a6 33       	cpi	r26, 0x36	; 54

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a6 e3       	ldi	r26, 0x36	; 54

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	a6 37       	cpi	r26, 0x76	; 118

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 ca 04 	call	0x994	; 0x994 <main>
     122:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <initDisplay>:
                      0b01000001, 0b00011111, 0b00000001,
                      0b00001001, 0b11111101};

void initDisplay (void)
{
    DDRH |= BV(SFTCLK) | BV(LCHCLK);
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	f1 e0       	ldi	r31, 0x01	; 1
     12e:	80 81       	ld	r24, Z

00000130 <.Loc.2>:
     130:	80 66       	ori	r24, 0x60	; 96
     132:	80 83       	st	Z, r24

00000134 <.Loc.3>:
    DDRB |= BV(DATAIN);
     134:	24 9a       	sbi	0x04, 4	; 4

00000136 <.Loc.5>:

    disablePin(SFTPORT, SFTCLK);
     136:	e2 e0       	ldi	r30, 0x02	; 2
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	80 81       	ld	r24, Z
     13c:	8f 7b       	andi	r24, 0xBF	; 191
     13e:	80 83       	st	Z, r24

00000140 <.Loc.6>:
    disablePin(LTCHPORT, LCHCLK);
     140:	80 81       	ld	r24, Z
     142:	8f 7d       	andi	r24, 0xDF	; 223
     144:	80 83       	st	Z, r24

00000146 <.Loc.7>:
}
     146:	08 95       	ret

00000148 <send_data>:
#define LCHCLK PH5 //pin 8 (latchclk)


void send_data(char data)
{
    for(int i = 0; i < 8; i++)
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0

0000014c <.Loc.13>:
    {
        if((data & (1<<i))){
     14c:	68 2f       	mov	r22, r24
     14e:	88 0f       	add	r24, r24
     150:	77 0b       	sbc	r23, r23

00000152 <.Loc.14>:
            setPin(DataPORT, DATAIN);
        } else {
            disablePin(DataPORT, DATAIN);
        }

        setPin(SFTPORT, SFTCLK);
     152:	e2 e0       	ldi	r30, 0x02	; 2
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	0c c0       	rjmp	.+24     	; 0x170 <.L5>

00000158 <.L3>:
            disablePin(DataPORT, DATAIN);
     158:	2c 98       	cbi	0x05, 4	; 5

0000015a <.L4>:
        setPin(SFTPORT, SFTCLK);
     15a:	90 81       	ld	r25, Z
     15c:	90 64       	ori	r25, 0x40	; 64
     15e:	90 83       	st	Z, r25

00000160 <.Loc.17>:
        disablePin(SFTPORT, SFTCLK);
     160:	90 81       	ld	r25, Z
     162:	9f 7b       	andi	r25, 0xBF	; 191
     164:	90 83       	st	Z, r25

00000166 <.Loc.18>:
    for(int i = 0; i < 8; i++)
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255

0000016a <.Loc.19>:
     16a:	28 30       	cpi	r18, 0x08	; 8
     16c:	31 05       	cpc	r19, r1
     16e:	59 f0       	breq	.+22     	; 0x186 <.L7>

00000170 <.L5>:
        if((data & (1<<i))){
     170:	ab 01       	movw	r20, r22
     172:	02 2e       	mov	r0, r18
     174:	02 c0       	rjmp	.+4      	; 0x17a <.L2^B1>

00000176 <.L1^B1>:
     176:	55 95       	asr	r21
     178:	47 95       	ror	r20

0000017a <.L2^B1>:
     17a:	0a 94       	dec	r0
     17c:	e2 f7       	brpl	.-8      	; 0x176 <.L1^B1>

0000017e <.Loc.22>:
     17e:	40 ff       	sbrs	r20, 0
     180:	eb cf       	rjmp	.-42     	; 0x158 <.L3>

00000182 <.Loc.23>:
            setPin(DataPORT, DATAIN);
     182:	2c 9a       	sbi	0x05, 4	; 5
     184:	ea cf       	rjmp	.-44     	; 0x15a <.L4>

00000186 <.L7>:
    }
}
     186:	08 95       	ret

00000188 <send_enable>:

void send_enable(int num)
{
    send_data(1<<(3+num));
     188:	9c 01       	movw	r18, r24
     18a:	2d 5f       	subi	r18, 0xFD	; 253
     18c:	3f 4f       	sbci	r19, 0xFF	; 255

0000018e <.Loc.29>:
     18e:	81 e0       	ldi	r24, 0x01	; 1

00000190 <.Loc.30>:
     190:	01 c0       	rjmp	.+2      	; 0x194 <.L2^B2>

00000192 <.L1^B2>:
     192:	88 0f       	add	r24, r24

00000194 <.L2^B2>:
     194:	2a 95       	dec	r18
     196:	ea f7       	brpl	.-6      	; 0x192 <.L1^B2>
     198:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

0000019c <.LVL6>:
}
     19c:	08 95       	ret

0000019e <setLatch>:

void setLatch(void){
    setPin(LTCHPORT, LCHCLK);
     19e:	e2 e0       	ldi	r30, 0x02	; 2
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	80 81       	ld	r24, Z
     1a4:	80 62       	ori	r24, 0x20	; 32
     1a6:	80 83       	st	Z, r24

000001a8 <.Loc.34>:
    disablePin(LTCHPORT, LCHCLK);
     1a8:	80 81       	ld	r24, Z
     1aa:	8f 7d       	andi	r24, 0xDF	; 223
     1ac:	80 83       	st	Z, r24

000001ae <.Loc.35>:
}
     1ae:	08 95       	ret

000001b0 <display>:

void display(int data)
{
     1b0:	8f 92       	push	r8
     1b2:	9f 92       	push	r9
     1b4:	af 92       	push	r10
     1b6:	bf 92       	push	r11
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	c8 2f       	mov	r28, r24
     1ca:	d9 2f       	mov	r29, r25

000001cc <.Loc.38>:
    int pos = 0;
    int negative = 0;

    if(data == 0){
     1cc:	20 97       	sbiw	r28, 0x00	; 0
     1ce:	e1 f1       	breq	.+120    	; 0x248 <.L18>

000001d0 <.Loc.42>:
        send_enable(1);
        setLatch();
        return;
    }

    if(data < 0 && data > -1000){
     1d0:	c9 31       	cpi	r28, 0x19	; 25
     1d2:	8c ef       	ldi	r24, 0xFC	; 252
     1d4:	d8 07       	cpc	r29, r24

000001d6 <.Loc.44>:
     1d6:	08 f4       	brcc	.+2      	; 0x1da <.Loc.45>

000001d8 <L0^A>:
     1d8:	4d c0       	rjmp	.+154    	; 0x274 <.L13>

000001da <.Loc.45>:
        data *= -1;
     1da:	d1 95       	neg	r29
     1dc:	c1 95       	neg	r28
     1de:	d1 09       	sbc	r29, r1

000001e0 <.Loc.47>:
        negative = 1;
     1e0:	88 24       	eor	r8, r8
     1e2:	83 94       	inc	r8
     1e4:	91 2c       	mov	r9, r1

000001e6 <.L15>:
    int negative = 0;
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	10 e0       	ldi	r17, 0x00	; 0

000001ea <.Loc.51>:
    }

    while(data > 0){
        send_data(numberCodes[data%10]);
     1ea:	0f 2e       	mov	r0, r31
     1ec:	fa e0       	ldi	r31, 0x0A	; 10
     1ee:	cf 2e       	mov	r12, r31
     1f0:	d1 2c       	mov	r13, r1
     1f2:	f0 2d       	mov	r31, r0

000001f4 <.L14>:
     1f4:	ce 01       	movw	r24, r28
     1f6:	b6 01       	movw	r22, r12
     1f8:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
     1fc:	a6 2e       	mov	r10, r22
     1fe:	b7 2e       	mov	r11, r23

00000200 <.Loc.54>:
     200:	fc 01       	movw	r30, r24
     202:	e0 50       	subi	r30, 0x00	; 0
     204:	fe 4f       	sbci	r31, 0xFE	; 254
     206:	80 81       	ld	r24, Z
     208:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

0000020c <.LVL13>:
        data /= 10;
     20c:	7e 01       	movw	r14, r28

0000020e <.Loc.56>:
     20e:	ca 2d       	mov	r28, r10

00000210 <.Loc.57>:
     210:	db 2d       	mov	r29, r11

00000212 <.Loc.58>:
        send_enable(++pos);
     212:	58 01       	movw	r10, r16

00000214 <.Loc.59>:
     214:	0f 5f       	subi	r16, 0xFF	; 255
     216:	1f 4f       	sbci	r17, 0xFF	; 255

00000218 <.Loc.60>:
     218:	c8 01       	movw	r24, r16
     21a:	0e 94 c4 00 	call	0x188	; 0x188 <send_enable>

0000021e <.LVL18>:
        setLatch();
     21e:	0e 94 cf 00 	call	0x19e	; 0x19e <setLatch>

00000222 <.LVL19>:
    while(data > 0){
     222:	8a e0       	ldi	r24, 0x0A	; 10
     224:	e8 16       	cp	r14, r24
     226:	f1 04       	cpc	r15, r1
     228:	2c f7       	brge	.-54     	; 0x1f4 <.L14>

0000022a <.Loc.63>:
    }

    if(negative){
     22a:	89 28       	or	r8, r9
     22c:	c1 f4       	brne	.+48     	; 0x25e <.L19>

0000022e <.L10>:
        send_data(numberCodes[10]);
        send_enable(++pos);
        setLatch();
    }
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	bf 90       	pop	r11
     240:	af 90       	pop	r10
     242:	9f 90       	pop	r9
     244:	8f 90       	pop	r8
     246:	08 95       	ret

00000248 <.L18>:
        send_data(numberCodes[0]);
     248:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <numberCodes>

0000024c <.Loc.67>:
     24c:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

00000250 <.LVL23>:
        send_enable(1);
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 c4 00 	call	0x188	; 0x188 <send_enable>

00000258 <.LVL24>:
        setLatch();
     258:	0e 94 cf 00 	call	0x19e	; 0x19e <setLatch>

0000025c <.LVL25>:
        return;
     25c:	e8 cf       	rjmp	.-48     	; 0x22e <.L10>

0000025e <.L19>:
        send_data(numberCodes[10]);
     25e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numberCodes+0xa>
     262:	0e 94 a4 00 	call	0x148	; 0x148 <send_data>

00000266 <.LVL27>:
        send_enable(++pos);
     266:	c5 01       	movw	r24, r10
     268:	02 96       	adiw	r24, 0x02	; 2

0000026a <.Loc.74>:
     26a:	0e 94 c4 00 	call	0x188	; 0x188 <send_enable>

0000026e <.LVL29>:
        setLatch();
     26e:	0e 94 cf 00 	call	0x19e	; 0x19e <setLatch>

00000272 <.LVL30>:
     272:	dd cf       	rjmp	.-70     	; 0x22e <.L10>

00000274 <.L13>:
    int negative = 0;
     274:	81 2c       	mov	r8, r1
     276:	91 2c       	mov	r9, r1

00000278 <.Loc.78>:
    while(data > 0){
     278:	1c 16       	cp	r1, r28
     27a:	1d 06       	cpc	r1, r29
     27c:	0c f4       	brge	.+2      	; 0x280 <L0^A+0x2>

0000027e <L0^A>:
     27e:	b3 cf       	rjmp	.-154    	; 0x1e6 <.L15>
     280:	d6 cf       	rjmp	.-84     	; 0x22e <.L10>

00000282 <LedTreeIndictorLeftToggle>:
    DDRB |= (1 << PB2) | (1 << PB3);
    init_delay_led();
}

void LedTreeIndictorLeftToggle(){
        PORTB ^= (1 << TreeIndicatedLEDLeft);
     282:	85 b1       	in	r24, 0x05	; 5

00000284 <.Loc.2>:
     284:	94 e0       	ldi	r25, 0x04	; 4
     286:	89 27       	eor	r24, r25
     288:	85 b9       	out	0x05, r24	; 5

0000028a <.Loc.3>:
}
     28a:	08 95       	ret

0000028c <LedTreeIndictorRightToggle>:
void LedTreeIndictorRightToggle(){
        PORTB ^= (1 << TreeIndicatedLEDRight);
     28c:	85 b1       	in	r24, 0x05	; 5

0000028e <.Loc.6>:
     28e:	98 e0       	ldi	r25, 0x08	; 8
     290:	89 27       	eor	r24, r25
     292:	85 b9       	out	0x05, r24	; 5

00000294 <.Loc.7>:
}
     294:	08 95       	ret

00000296 <LedTurnSignalLeftToggle>:

void LedTurnSignalLeftToggle(){
    PORTL ^= (1 << TurnSignalLEDLeft);
     296:	eb e0       	ldi	r30, 0x0B	; 11
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	80 81       	ld	r24, Z

0000029c <.Loc.10>:
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	89 27       	eor	r24, r25
     2a0:	80 83       	st	Z, r24

000002a2 <.Loc.11>:
}
     2a2:	08 95       	ret

000002a4 <LedTurnSignalRightToggle>:
void LedTurnSignalRightToggle(){
        PORTL ^= (1 << TurnSignalLEDRight);
     2a4:	eb e0       	ldi	r30, 0x0B	; 11
     2a6:	f1 e0       	ldi	r31, 0x01	; 1
     2a8:	80 81       	ld	r24, Z

000002aa <.Loc.14>:
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	89 27       	eor	r24, r25
     2ae:	80 83       	st	Z, r24

000002b0 <.Loc.15>:
}
     2b0:	08 95       	ret

000002b2 <LedBreakLightLeft>:

void LedBreakLightLeft(int x){
    if(x){
     2b2:	89 2b       	or	r24, r25
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <.L6>

000002b6 <.Loc.19>:
        PORTL |= (1 << BreaklightsLeft);
     2b6:	eb e0       	ldi	r30, 0x0B	; 11
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	80 81       	ld	r24, Z

000002bc <.Loc.20>:
     2bc:	84 60       	ori	r24, 0x04	; 4
     2be:	80 83       	st	Z, r24
     2c0:	08 95       	ret

000002c2 <.L6>:
    }
    else{
        PORTL &= ~(1 << BreaklightsLeft);
     2c2:	eb e0       	ldi	r30, 0x0B	; 11
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	80 81       	ld	r24, Z

000002c8 <.Loc.23>:
     2c8:	8b 7f       	andi	r24, 0xFB	; 251
     2ca:	80 83       	st	Z, r24

000002cc <.Loc.24>:
    }
}
     2cc:	08 95       	ret

000002ce <LedBreakLightRight>:
void LedBreakLightRight(int x){
    if(x){
     2ce:	89 2b       	or	r24, r25
     2d0:	31 f0       	breq	.+12     	; 0x2de <.L9>

000002d2 <.Loc.28>:
        PORTL |= (1 << BreaklightRight);
     2d2:	eb e0       	ldi	r30, 0x0B	; 11
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	80 81       	ld	r24, Z

000002d8 <.Loc.29>:
     2d8:	88 60       	ori	r24, 0x08	; 8
     2da:	80 83       	st	Z, r24
     2dc:	08 95       	ret

000002de <.L9>:
    }
    else{
        PORTL &= ~(1 << BreaklightRight);
     2de:	eb e0       	ldi	r30, 0x0B	; 11
     2e0:	f1 e0       	ldi	r31, 0x01	; 1
     2e2:	80 81       	ld	r24, Z

000002e4 <.Loc.32>:
     2e4:	87 7f       	andi	r24, 0xF7	; 247
     2e6:	80 83       	st	Z, r24

000002e8 <.Loc.33>:
    }
}
     2e8:	08 95       	ret

000002ea <setBreaklights>:

void setBreaklights(int x){
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	d8 2f       	mov	r29, r24
     2f0:	c9 2f       	mov	r28, r25

000002f2 <.Loc.36>:
    LedBreakLightLeft(x);
     2f2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LedBreakLightLeft>

000002f6 <.LVL9>:
    LedBreakLightRight(x);
     2f6:	8d 2f       	mov	r24, r29
     2f8:	9c 2f       	mov	r25, r28
     2fa:	0e 94 67 01 	call	0x2ce	; 0x2ce <LedBreakLightRight>

000002fe <.LVL10>:
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <LedHeadlightLeft>:

void LedHeadlightLeft(int x){
    if(x){
     304:	89 2b       	or	r24, r25
     306:	31 f0       	breq	.+12     	; 0x314 <.L13>

00000308 <.Loc.42>:
        PORTL |= (1 << HeadlightsLeft);
     308:	eb e0       	ldi	r30, 0x0B	; 11
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	80 81       	ld	r24, Z

0000030e <.Loc.43>:
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	80 83       	st	Z, r24
     312:	08 95       	ret

00000314 <.L13>:
    }
    else{
        PORTL &= ~(1 << HeadlightsLeft);
     314:	eb e0       	ldi	r30, 0x0B	; 11
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	80 81       	ld	r24, Z

0000031a <.Loc.46>:
     31a:	8f 7e       	andi	r24, 0xEF	; 239
     31c:	80 83       	st	Z, r24

0000031e <.Loc.47>:
    }
}
     31e:	08 95       	ret

00000320 <LedHeadlightRight>:
void LedHeadlightRight(int x){
    if(x){
     320:	89 2b       	or	r24, r25
     322:	31 f0       	breq	.+12     	; 0x330 <.L16>

00000324 <.Loc.51>:
        PORTL |= (1 << HeadlightsRight);
     324:	eb e0       	ldi	r30, 0x0B	; 11
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z

0000032a <.Loc.52>:
     32a:	80 62       	ori	r24, 0x20	; 32
     32c:	80 83       	st	Z, r24
     32e:	08 95       	ret

00000330 <.L16>:
    }
    else{
        PORTL &= ~(1 << HeadlightsRight);
     330:	eb e0       	ldi	r30, 0x0B	; 11
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	80 81       	ld	r24, Z

00000336 <.Loc.55>:
     336:	8f 7d       	andi	r24, 0xDF	; 223
     338:	80 83       	st	Z, r24

0000033a <.Loc.56>:
    }
}
     33a:	08 95       	ret

0000033c <setHeadlights>:

void setHeadlights(int x){
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	d8 2f       	mov	r29, r24
     342:	c9 2f       	mov	r28, r25

00000344 <.Loc.59>:
    LedHeadlightLeft(x);
     344:	0e 94 82 01 	call	0x304	; 0x304 <LedHeadlightLeft>

00000348 <.LVL20>:
    LedHeadlightRight(x);
     348:	8d 2f       	mov	r24, r29
     34a:	9c 2f       	mov	r25, r28
     34c:	0e 94 90 01 	call	0x320	; 0x320 <LedHeadlightRight>

00000350 <.LVL21>:
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <LedNoodstopFront>:

void LedNoodstopFront(int x){
    if(x){
     356:	89 2b       	or	r24, r25
     358:	31 f0       	breq	.+12     	; 0x366 <.L20>

0000035a <.Loc.65>:
        PORTL |= (1 << NoodstopLEDFront);
     35a:	eb e0       	ldi	r30, 0x0B	; 11
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	80 81       	ld	r24, Z

00000360 <.Loc.66>:
     360:	80 64       	ori	r24, 0x40	; 64
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <.L20>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDFront);
     366:	eb e0       	ldi	r30, 0x0B	; 11
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	80 81       	ld	r24, Z

0000036c <.Loc.69>:
     36c:	8f 7b       	andi	r24, 0xBF	; 191
     36e:	80 83       	st	Z, r24

00000370 <.Loc.70>:
    }
}
     370:	08 95       	ret

00000372 <LedNoodstopBack>:
void LedNoodstopBack(int x){
    if(x){
     372:	89 2b       	or	r24, r25
     374:	31 f0       	breq	.+12     	; 0x382 <.L23>

00000376 <.Loc.74>:
        PORTL |= (1 << NoodstopLEDBack);
     376:	eb e0       	ldi	r30, 0x0B	; 11
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	80 81       	ld	r24, Z

0000037c <.Loc.75>:
     37c:	80 68       	ori	r24, 0x80	; 128
     37e:	80 83       	st	Z, r24
     380:	08 95       	ret

00000382 <.L23>:
    }
    else{
        PORTL &= ~(1 << NoodstopLEDBack);
     382:	eb e0       	ldi	r30, 0x0B	; 11
     384:	f1 e0       	ldi	r31, 0x01	; 1
     386:	80 81       	ld	r24, Z

00000388 <.Loc.78>:
     388:	8f 77       	andi	r24, 0x7F	; 127
     38a:	80 83       	st	Z, r24

0000038c <.Loc.79>:
    }
}
     38c:	08 95       	ret

0000038e <__vector_15>:
volatile int TreeSignalLeft = 0;
volatile int TreeSignalRight = 0;

#define blinkspeed 300
volatile int counter = 0;
ISR(TIMER2_OVF_vect){
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	0b b6       	in	r0, 0x3b	; 59
     39a:	0f 92       	push	r0
     39c:	2f 93       	push	r18
     39e:	3f 93       	push	r19
     3a0:	4f 93       	push	r20
     3a2:	5f 93       	push	r21
     3a4:	6f 93       	push	r22
     3a6:	7f 93       	push	r23
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
     3ac:	af 93       	push	r26
     3ae:	bf 93       	push	r27
     3b0:	ef 93       	push	r30
     3b2:	ff 93       	push	r31

000003b4 <.Loc.81>:
    counter++;
     3b4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <counter>
     3b8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <counter+0x1>
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <counter+0x1>
     3c2:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <counter>

000003c6 <.Loc.83>:
    if(counter == blinkspeed){
     3c6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <counter>
     3ca:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <counter+0x1>

000003ce <.Loc.85>:
     3ce:	8c 32       	cpi	r24, 0x2C	; 44
     3d0:	91 40       	sbci	r25, 0x01	; 1
     3d2:	99 f0       	breq	.+38     	; 0x3fa <.L35>

000003d4 <.L25>:
        if(TreeSignalRight) {
                LedTreeIndictorRightToggle();
        } else PORTB &= ~(1 << TreeIndicatedLEDRight);
        counter = 0;
    }
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <.L35>:
        if(TurnSignalLeft) {
     3fa:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <TurnSignalLeft>
     3fe:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <TurnSignalLeft+0x1>

00000402 <.Loc.89>:
     402:	89 2b       	or	r24, r25
     404:	19 f5       	brne	.+70     	; 0x44c <.L36>

00000406 <.Loc.90>:
        } else PORTL &= ~(1<<TurnSignalLEDLeft);
     406:	eb e0       	ldi	r30, 0x0B	; 11
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	80 83       	st	Z, r24

00000410 <.L28>:
        if(TurnSignalRight){
     410:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <TurnSignalRight>
     414:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <TurnSignalRight+0x1>

00000418 <.Loc.94>:
     418:	89 2b       	or	r24, r25
     41a:	d9 f4       	brne	.+54     	; 0x452 <.L37>

0000041c <.Loc.95>:
        } else PORTL &= ~(1 << TurnSignalLEDRight);
     41c:	eb e0       	ldi	r30, 0x0B	; 11
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	80 81       	ld	r24, Z
     422:	8d 7f       	andi	r24, 0xFD	; 253
     424:	80 83       	st	Z, r24

00000426 <.L30>:
        if(TreeSignalLeft) {
     426:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <TreeSignalLeft>
     42a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <TreeSignalLeft+0x1>

0000042e <.Loc.99>:
     42e:	89 2b       	or	r24, r25
     430:	99 f4       	brne	.+38     	; 0x458 <.L38>

00000432 <.Loc.100>:
        } else PORTB &= ~(1 << TreeIndicatedLEDLeft);
     432:	2a 98       	cbi	0x05, 2	; 5

00000434 <.L32>:
        if(TreeSignalRight) {
     434:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <TreeSignalRight>
     438:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <TreeSignalRight+0x1>

0000043c <.Loc.104>:
     43c:	89 2b       	or	r24, r25
     43e:	79 f4       	brne	.+30     	; 0x45e <.L39>

00000440 <.Loc.105>:
        } else PORTB &= ~(1 << TreeIndicatedLEDRight);
     440:	2b 98       	cbi	0x05, 3	; 5

00000442 <.L34>:
        counter = 0;
     442:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <counter+0x1>
     446:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <counter>

0000044a <.Loc.109>:
}
     44a:	c4 cf       	rjmp	.-120    	; 0x3d4 <.L25>

0000044c <.L36>:
                LedTurnSignalLeftToggle();
     44c:	0e 94 4b 01 	call	0x296	; 0x296 <LedTurnSignalLeftToggle>

00000450 <.LVL30>:
     450:	df cf       	rjmp	.-66     	; 0x410 <.L28>

00000452 <.L37>:
                LedTurnSignalRightToggle();
     452:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LedTurnSignalRightToggle>

00000456 <.LVL31>:
     456:	e7 cf       	rjmp	.-50     	; 0x426 <.L30>

00000458 <.L38>:
                LedTreeIndictorLeftToggle();
     458:	0e 94 41 01 	call	0x282	; 0x282 <LedTreeIndictorLeftToggle>

0000045c <.LVL32>:
     45c:	eb cf       	rjmp	.-42     	; 0x434 <.L32>

0000045e <.L39>:
                LedTreeIndictorRightToggle();
     45e:	0e 94 46 01 	call	0x28c	; 0x28c <LedTreeIndictorRightToggle>

00000462 <.LVL33>:
     462:	ef cf       	rjmp	.-34     	; 0x442 <.L34>

00000464 <init_delay_led>:


void init_delay_led(){
    // Use mode 0, clkdiv = 64
    TCCR2A = 0;
     464:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

00000468 <.Loc.117>:
    TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

0000046e <.Loc.119>:

    // Disable PWM output
    OCR2A = 0;
     46e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000472 <.Loc.121>:
    OCR2B = 0;
     472:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000476 <.Loc.123>:

    //Overflow interrupt
    TIMSK2 = (1<<TOIE2);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

0000047c <.Loc.125>:
    TCNT2 = 6;
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>

00000482 <.Loc.127>:
}
     482:	08 95       	ret

00000484 <init_Leds>:
    DDRL = 0xff;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>

0000048a <.Loc.131>:
    DDRB |= (1 << PB2) | (1 << PB3);
     48a:	84 b1       	in	r24, 0x04	; 4

0000048c <.Loc.132>:
     48c:	8c 60       	ori	r24, 0x0C	; 12
     48e:	84 b9       	out	0x04, r24	; 4

00000490 <.Loc.133>:
    init_delay_led();
     490:	0e 94 32 02 	call	0x464	; 0x464 <init_delay_led>

00000494 <.LVL34>:
}
     494:	08 95       	ret

00000496 <startTimer>:
    startTimer(); //Start de bocht
}

//Set timer aan
void startTimer(){
    AVGBochtenCounter = 0;
     496:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <AVGBochtenCounter+0x1>
     49a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <AVGBochtenCounter>

0000049e <.Loc.3>:
    TCNT4 = 0;
     49e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     4a2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>

000004a6 <.Loc.5>:
    TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

000004ac <.Loc.7>:
}
     4ac:	08 95       	ret

000004ae <stopTimer>:

//Stop timer
void stopTimer(){
     TCCR4B = (0<<CS42) | (0<<CS41) | (0<<CS40);
     4ae:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

000004b2 <.Loc.11>:
     turnsTaken++;
     4b2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <turnsTaken>
     4b6:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <turnsTaken+0x1>
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <turnsTaken+0x1>
     4c0:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <turnsTaken>

000004c4 <.Loc.13>:
}
     4c4:	08 95       	ret

000004c6 <checkIfFinished>:

//Check of de bocht af is
void checkIfFinished(){
    if(turnsTaken >= 3){
     4c6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <turnsTaken>
     4ca:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <turnsTaken+0x1>
     4ce:	03 97       	sbiw	r24, 0x03	; 3
     4d0:	44 f0       	brlt	.+16     	; 0x4e2 <.L3>

000004d2 <.Loc.17>:
        turnsTaken = 0;
     4d2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <turnsTaken+0x1>
     4d6:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <turnsTaken>

000004da <.Loc.19>:
        turnStarted = 0;
     4da:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <turnStarted+0x1>
     4de:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <turnStarted>

000004e2 <.L3>:
        return 1;
    } else return 0;
}
     4e2:	08 95       	ret

000004e4 <startTurn>:
int startTurn(int direction){
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	d8 2f       	mov	r29, r24
     4ea:	c9 2f       	mov	r28, r25

000004ec <.Loc.25>:
    if(turnStarted == 1) { //Check of we niet al een bocht aan het maken zijn
     4ec:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <turnStarted>
     4f0:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <turnStarted+0x1>

000004f4 <.Loc.27>:
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	99 f0       	breq	.+38     	; 0x51e <.L7>

000004f8 <.Loc.28>:
    setBothStepperMode(ForwardStep);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000500 <.LVL2>:
    turnStarted = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <turnStarted+0x1>
     508:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <turnStarted>

0000050c <.Loc.31>:
    turnDirection = direction;
     50c:	d0 93 40 02 	sts	0x0240, r29	; 0x800240 <turnDirection>
     510:	c0 93 41 02 	sts	0x0241, r28	; 0x800241 <turnDirection+0x1>

00000514 <.Loc.33>:
    startTimer(); //Start de bocht
     514:	0e 94 4b 02 	call	0x496	; 0x496 <startTimer>

00000518 <.L5>:
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <.L7>:
        return checkIfFinished();
     51e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <checkIfFinished>

00000522 <.LVL4>:
     522:	fa cf       	rjmp	.-12     	; 0x518 <.L5>

00000524 <init_AGVBochten_timer>:

void init_AGVBochten_timer(){
    // Use timer 4 (16bit), clkdiv = 0, 16.000.000 / (2^16) / 8 = 30(.5175
    TCCR4A = 0;
     524:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000528 <.Loc.40>:
    //TCCR4B = (0<<CS42) | (1<<CS41) | (0<<CS40);

    // Disable PWM output
    OCR4A = 0;
     528:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     52c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>

00000530 <.Loc.42>:
    OCR4B = 0;
     530:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     534:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>

00000538 <.Loc.44>:

    //Compares

    //Overflow interrupt
    TIMSK4 = (1<<TOIE4);
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

0000053e <.Loc.46>:
    //TCNT4 = 6;
}
     53e:	08 95       	ret

00000540 <initAGVBochten>:
    init_AGVBochten_timer();
     540:	0e 94 92 02 	call	0x524	; 0x524 <init_AGVBochten_timer>

00000544 <.LVL5>:
}
     544:	08 95       	ret

00000546 <turn>:
        turnsTaken++; //increase aantal bochten
    }
}

//Zet de wielen goed voor de bocht
void turn(int direction){
     546:	28 2f       	mov	r18, r24
     548:	39 2f       	mov	r19, r25

0000054a <.Loc.52>:
    switch(direction) {
     54a:	21 15       	cp	r18, r1
     54c:	31 05       	cpc	r19, r1
     54e:	21 f0       	breq	.+8      	; 0x558 <.L11>
     550:	21 30       	cpi	r18, 0x01	; 1
     552:	31 05       	cpc	r19, r1
     554:	71 f0       	breq	.+28     	; 0x572 <.L12>
     556:	08 95       	ret

00000558 <.L11>:
    case Left:
        setStepperMode(leftMotor, Off);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	8a e0       	ldi	r24, 0x0A	; 10
     55e:	90 e0       	ldi	r25, 0x00	; 0

00000560 <.Loc.54>:
     560:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000564 <.LVL8>:
        setStepperMode(rightMotor, ForwardStep);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	8b e0       	ldi	r24, 0x0B	; 11
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000570 <.LVL9>:
        break;
     570:	08 95       	ret

00000572 <.L12>:
    case Right:
        setStepperMode(leftMotor, ForwardStep);
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	90 e0       	ldi	r25, 0x00	; 0

0000057a <.Loc.58>:
     57a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

0000057e <.LVL12>:
        setStepperMode(rightMotor, Off);
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

0000058a <.LVL13>:
        break;
    }
}
     58a:	08 95       	ret

0000058c <__vector_45>:
ISR(TIMER4_OVF_vect){
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	0b b6       	in	r0, 0x3b	; 59
     598:	0f 92       	push	r0
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31

000005b2 <.Loc.63>:
    AVGBochtenCounter++;
     5b2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <AVGBochtenCounter>
     5b6:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <AVGBochtenCounter+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <AVGBochtenCounter+0x1>
     5c0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <AVGBochtenCounter>

000005c4 <.Loc.65>:
    if(AVGBochtenCounter == Comp_StartTurn){
     5c4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <AVGBochtenCounter>
     5c8:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <AVGBochtenCounter+0x1>

000005cc <.Loc.67>:
     5cc:	81 3e       	cpi	r24, 0xE1	; 225
     5ce:	91 05       	cpc	r25, r1
     5d0:	d1 f0       	breq	.+52     	; 0x606 <.L19>

000005d2 <.L15>:
    if(AVGBochtenCounter == Comp_EndTurn){
     5d2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <AVGBochtenCounter>
     5d6:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <AVGBochtenCounter+0x1>

000005da <.Loc.70>:
     5da:	86 35       	cpi	r24, 0x56	; 86
     5dc:	91 40       	sbci	r25, 0x01	; 1
     5de:	19 f1       	breq	.+70     	; 0x626 <.L20>

000005e0 <.L14>:
}
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	7f 91       	pop	r23
     5ee:	6f 91       	pop	r22
     5f0:	5f 91       	pop	r21
     5f2:	4f 91       	pop	r20
     5f4:	3f 91       	pop	r19
     5f6:	2f 91       	pop	r18
     5f8:	0f 90       	pop	r0
     5fa:	0b be       	out	0x3b, r0	; 59
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <.L19>:
        if(turnsTaken == 2) { //Als we al 2 bochten hebben gemaakt stop de timer
     606:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <turnsTaken>
     60a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <turnsTaken+0x1>
     60e:	02 97       	sbiw	r24, 0x02	; 2
     610:	39 f0       	breq	.+14     	; 0x620 <.L21>

00000612 <.LBB3>:
        } else turn(turnDirection); //Zoniet, maak de bocht
     612:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <turnDirection>
     616:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <turnDirection+0x1>
     61a:	0e 94 a3 02 	call	0x546	; 0x546 <turn>

0000061e <.LVL14>:
     61e:	d9 cf       	rjmp	.-78     	; 0x5d2 <.L15>

00000620 <.L21>:
            stopTimer();
     620:	0e 94 57 02 	call	0x4ae	; 0x4ae <stopTimer>

00000624 <.LVL15>:
     624:	d6 cf       	rjmp	.-84     	; 0x5d2 <.L15>

00000626 <.L20>:
        setBothStepperMode(ForwardStep);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

0000062e <.LVL16>:
        if(turnsTaken == 0) AVGBochtenCounter = DrivingHeadstart; //Als dit het einde is van de eerste bocht, reset de timer om het te herhalen
     62e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <turnsTaken>
     632:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <turnsTaken+0x1>

00000636 <.Loc.79>:
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	21 f4       	brne	.+8      	; 0x642 <.L18>

0000063a <.Loc.80>:
     63a:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <AVGBochtenCounter+0x1>
     63e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <AVGBochtenCounter>

00000642 <.L18>:
        turnsTaken++; //increase aantal bochten
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <turnsTaken+0x1>
     648:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <turnsTaken>

0000064c <.Loc.84>:
}
     64c:	c9 cf       	rjmp	.-110    	; 0x5e0 <.L14>

0000064e <nietInEenPad>:

    return 0;
}

int nietInEenPad(){
    return ((!bit_is_clear(IRPIN, IRSensorLeft)) && !bit_is_clear(IRPIN, IRSensorRight));
     64e:	02 9b       	sbis	0x00, 2	; 0
     650:	06 c0       	rjmp	.+12     	; 0x65e <.L3>

00000652 <.Loc.3>:
     652:	80 b1       	in	r24, 0x00	; 0

00000654 <.Loc.4>:
     654:	83 fb       	bst	r24, 3
     656:	88 27       	eor	r24, r24
     658:	80 f9       	bld	r24, 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	08 95       	ret

0000065e <.L3>:
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0

00000662 <.Loc.6>:
}
     662:	08 95       	ret

00000664 <needCorrection>:

#define testDelay 0
int needCorrection(){

    //Linker bit is niet geactiveerd, we hebben een afwijking naar Rechts //Bijsturen naar links
    if(!bit_is_clear(IRPIN, IRSensorLeft)){
     664:	02 99       	sbic	0x00, 2	; 0
     666:	05 c0       	rjmp	.+10     	; 0x672 <.L8>

00000668 <.Loc.10>:
        _delay_ms(testDelay);
        return 1;
    }
    //Rechter bit is niet geactiveerd, we hebben een afwijking naar Links //bijsturen naar rechts
    if(!bit_is_clear(IRPIN, IRSensorRight)){
     668:	03 99       	sbic	0x00, 3	; 0
     66a:	06 c0       	rjmp	.+12     	; 0x678 <.L9>

0000066c <.Loc.12>:
        _delay_ms(testDelay);
        return 2;
    }

    return 0;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0

00000670 <.Loc.13>:
}
     670:	08 95       	ret

00000672 <.L8>:
        return 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	08 95       	ret

00000678 <.L9>:
        return 2;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	08 95       	ret

0000067e <checkNoodstop>:

//Check of noodstop is ingedrukt
int checkNoodstop(){
    if(bit_is_clear(PINC, NoodstopPin)){
     67e:	86 b1       	in	r24, 0x06	; 6

00000680 <.Loc.39>:
     680:	86 95       	lsr	r24
     682:	86 95       	lsr	r24
     684:	86 95       	lsr	r24
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	89 27       	eor	r24, r25

0000068a <.Loc.40>:
        return 1;
    }
    return 0;
}
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	08 95       	ret

00000690 <isStartButtonPressed>:

//Check of start knop is ingedrukt
int isStartButtonPressed(){
    return bit_is_clear(PINC, StartButtonPin);
     690:	86 b1       	in	r24, 0x06	; 6
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	89 27       	eor	r24, r25

00000696 <.Loc.44>:
}
     696:	81 70       	andi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	08 95       	ret

0000069c <checkModeSwitchState>:
    0- Switch staat in het midden
    1- Volgen
    2- Rijden
*/
int checkModeSwitchState(){
    if(bit_is_clear(PINC, FollowModeSwitch)){
     69c:	32 9b       	sbis	0x06, 2	; 6
     69e:	0a c0       	rjmp	.+20     	; 0x6b4 <.L14>

000006a0 <.Loc.48>:
        return 1; //Switch is in follow mode.
    }
    if(bit_is_clear(PINC, DriveModeSwitch)){
     6a0:	26 b1       	in	r18, 0x06	; 6

000006a2 <.Loc.50>:
     6a2:	26 95       	lsr	r18
     6a4:	31 e0       	ldi	r19, 0x01	; 1
     6a6:	23 27       	eor	r18, r19
     6a8:	82 2f       	mov	r24, r18
     6aa:	81 70       	andi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	08 95       	ret

000006b4 <.L14>:
        return 1; //Switch is in follow mode.
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0

000006b8 <.Loc.52>:
        return 2; //Switch is in drive mode.
    }

    return 0; //Switch staat in het midden, geen van beide geactiveerd.

}
     6b8:	08 95       	ret

000006ba <initButtons>:

//Init buttons
void initButtons(){
    //Loop voor alle buttons
    for(int i = 0; i < 5; i++){
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0

000006be <.Loc.58>:
        DDRC &= ~(1<<i);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0

000006c2 <.L16>:
     6c2:	37 b1       	in	r19, 0x07	; 7

000006c4 <.Loc.60>:
     6c4:	ab 01       	movw	r20, r22
     6c6:	08 2e       	mov	r0, r24
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <.L2^B1>

000006ca <.L1^B1>:
     6ca:	44 0f       	add	r20, r20
     6cc:	55 1f       	adc	r21, r21

000006ce <.L2^B1>:
     6ce:	0a 94       	dec	r0
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <.L1^B1>

000006d2 <.Loc.61>:
     6d2:	24 2f       	mov	r18, r20
     6d4:	20 95       	com	r18
     6d6:	23 23       	and	r18, r19
     6d8:	27 b9       	out	0x07, r18	; 7

000006da <.Loc.62>:
        PORTC |= (1<<i);
     6da:	28 b1       	in	r18, 0x08	; 8

000006dc <.Loc.63>:
     6dc:	24 2b       	or	r18, r20
     6de:	28 b9       	out	0x08, r18	; 8

000006e0 <.Loc.64>:
    for(int i = 0; i < 5; i++){
     6e0:	01 96       	adiw	r24, 0x01	; 1

000006e2 <.Loc.65>:
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	91 05       	cpc	r25, r1
     6e6:	69 f7       	brne	.-38     	; 0x6c2 <.L16>

000006e8 <.LBE40>:
    }
}
     6e8:	08 95       	ret

000006ea <initIRSensors>:

//Init IR sensors
void initIRSensors(){
    //Loop voor alle IR sensors
    for(int i = 0; i < 4; i++){
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0

000006ee <.Loc.72>:
        DDRA &= ~(1<<i);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0

000006f2 <.L19>:
     6f2:	31 b1       	in	r19, 0x01	; 1

000006f4 <.Loc.74>:
     6f4:	ab 01       	movw	r20, r22
     6f6:	08 2e       	mov	r0, r24
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <.L2^B2>

000006fa <.L1^B2>:
     6fa:	44 0f       	add	r20, r20
     6fc:	55 1f       	adc	r21, r21

000006fe <.L2^B2>:
     6fe:	0a 94       	dec	r0
     700:	e2 f7       	brpl	.-8      	; 0x6fa <.L1^B2>

00000702 <.Loc.75>:
     702:	24 2f       	mov	r18, r20
     704:	20 95       	com	r18
     706:	23 23       	and	r18, r19
     708:	21 b9       	out	0x01, r18	; 1

0000070a <.Loc.76>:
        PORTA |= (1<<i);
     70a:	22 b1       	in	r18, 0x02	; 2

0000070c <.Loc.77>:
     70c:	24 2b       	or	r18, r20
     70e:	22 b9       	out	0x02, r18	; 2

00000710 <.Loc.78>:
    for(int i = 0; i < 4; i++){
     710:	01 96       	adiw	r24, 0x01	; 1

00000712 <.Loc.79>:
     712:	84 30       	cpi	r24, 0x04	; 4
     714:	91 05       	cpc	r25, r1
     716:	69 f7       	brne	.-38     	; 0x6f2 <.L19>

00000718 <.LBE41>:
    }
}
     718:	08 95       	ret

0000071a <initAGV>:
    init_Leds();
     71a:	0e 94 42 02 	call	0x484	; 0x484 <init_Leds>

0000071e <.LVL8>:
    agv_ultrasoon_init();
     71e:	0e 94 11 08 	call	0x1022	; 0x1022 <agv_ultrasoon_init>

00000722 <.LVL9>:
    initSteppermotorAVRDriver();
     722:	0e 94 35 07 	call	0xe6a	; 0xe6a <initSteppermotorAVRDriver>

00000726 <.LVL10>:
    initIRSensors();
     726:	0e 94 75 03 	call	0x6ea	; 0x6ea <initIRSensors>

0000072a <.LVL11>:
    initButtons();
     72a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <initButtons>

0000072e <.LVL12>:
    initAGVBochten();
     72e:	0e 94 a0 02 	call	0x540	; 0x540 <initAGVBochten>

00000732 <.LVL13>:
    initDisplay();
     732:	0e 94 95 00 	call	0x12a	; 0x12a <initDisplay>

00000736 <.LVL14>:
}
     736:	08 95       	ret

00000738 <checkFrontIRState>:
*/
int checkFrontIRState(){
    //return 3; //for testing without IR sensors

    //Allebij detecteren iets, return 0
    if(bit_is_clear(PINA, FrontIRSensorLeftPin) && bit_is_clear(PINA, FrontIRSensorRightPin)){
     738:	00 99       	sbic	0x00, 0	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <.L23>

0000073c <.Loc.93>:
     73c:	01 9b       	sbis	0x00, 1	; 0
     73e:	07 c0       	rjmp	.+14     	; 0x74e <.L25>

00000740 <.L23>:
        return 0;
    }

    //Linker sensor detecteerd iets, return 1
    if(bit_is_clear(PINA, FrontIRSensorLeftPin)){
     740:	00 9b       	sbis	0x00, 0	; 0
     742:	08 c0       	rjmp	.+16     	; 0x754 <.L26>

00000744 <.Loc.96>:
        return 1;
    }

    //Rechter sensor detecteert iets, return 2
    if(bit_is_clear(PINA, FrontIRSensorRightPin)){
     744:	01 9b       	sbis	0x00, 1	; 0
     746:	09 c0       	rjmp	.+18     	; 0x75a <.L27>

00000748 <.Loc.98>:
        return 2;
    }

    //Return 3
    return 3; //Geen IR sensor's geactiveerd
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	08 95       	ret

0000074e <.L25>:
        return 0;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 95       	ret

00000754 <.L26>:
        return 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret

0000075a <.L27>:
        return 2;
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	90 e0       	ldi	r25, 0x00	; 0

0000075e <.Loc.102>:
}
     75e:	08 95       	ret

00000760 <checkSensors>:
    2-Er is een boom rechts van de AGV
    3-Er is niks gemeten
*/


int checkSensors(){
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29

00000768 <.Loc.104>:

    #ifndef UltrasoneUseValueComparison
    int valueLeft = filterDistance(agv_ultrasoon_boom_links);
    int valueRight = filterDistance(agv_ultrasoon_boom_rechts);
    #else
    int valueLeft = getLeftSensorValue();
     768:	0e 94 c7 07 	call	0xf8e	; 0xf8e <getLeftSensorValue>

0000076c <.LVL15>:
     76c:	c8 2f       	mov	r28, r24
     76e:	d9 2f       	mov	r29, r25

00000770 <.Loc.110>:
    int valueRight = getRightSensorValue();
     770:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <getRightSensorValue>

00000774 <.LVL17>:
     774:	08 2f       	mov	r16, r24
     776:	19 2f       	mov	r17, r25

00000778 <.Loc.112>:
    #ifndef UseUltrasone
    return 3;
    #endif // UseUltrasone

    //Kijken of er iets voor de AGV staat.
    if(CheckinFrontOfAVRWhileDriving > filterDistance(agv_ultrasoon_voor_midden)){
     778:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <agv_ultrasoon_voor_midden>
     77c:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <agv_ultrasoon_voor_midden+0x1>
     780:	0e 94 3b 08 	call	0x1076	; 0x1076 <filterDistance>

00000784 <.LVL19>:
     784:	44 97       	sbiw	r24, 0x14	; 20
     786:	0c f4       	brge	.+2      	; 0x78a <.Loc.115>

00000788 <L0^A>:
     788:	c1 c0       	rjmp	.+386    	; 0x90c <.L37>

0000078a <.Loc.115>:
        return 0;
    }

    //Kijken of er iets voor de AGV staat, en er nog niks is gemeten
    if((TreeDistance > valueLeft) && !leftPreviousState){
     78a:	c5 30       	cpi	r28, 0x05	; 5
     78c:	d1 05       	cpc	r29, r1
     78e:	4c f5       	brge	.+82     	; 0x7e2 <.L30>

00000790 <.Loc.117>:
     790:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <leftPreviousState.3>
     794:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <leftPreviousState.3+0x1>
     798:	89 2b       	or	r24, r25
     79a:	49 f5       	brne	.+82     	; 0x7ee <.L31>

0000079c <.Loc.118>:
        //Variable zetten om te onthouden dat deze al is gemeten.
        #ifdef UltrasoneDoublechecking
        if(doubleCheckLeft < amountOfDoubleChecks){
     79c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <doubleCheckLeft.2>
     7a0:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <doubleCheckLeft.2+0x1>

000007a4 <.Loc.120>:
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	91 05       	cpc	r25, r1
     7a8:	5c f0       	brlt	.+22     	; 0x7c0 <.L41>

000007aa <.Loc.121>:
            doubleCheckLeft++;
            _delay_ms(doubleCheckTimeDelay);
            return 3;
        } else {
            doubleCheckLeft = 0;
     7aa:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <doubleCheckLeft.2+0x1>
     7ae:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <doubleCheckLeft.2>

000007b2 <.Loc.123>:
            leftPreviousState = 1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <leftPreviousState.3+0x1>
     7ba:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <leftPreviousState.3>

000007be <.Loc.125>:
            //display(1000);
            return 1;
     7be:	a8 c0       	rjmp	.+336    	; 0x910 <.L28>

000007c0 <.L41>:
            doubleCheckLeft++;
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <doubleCheckLeft.2+0x1>
     7c6:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <doubleCheckLeft.2>

000007ca <.LBB42>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	88 e5       	ldi	r24, 0x58	; 88
     7ce:	96 e0       	ldi	r25, 0x06	; 6

000007d0 <.L1^B3>:
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	90 40       	sbci	r25, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <.L1^B3>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <L0^A>

000007da <L0^A>:
	...

000007dc <.LBE42>:
            return 3;
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	97 c0       	rjmp	.+302    	; 0x910 <.L28>

000007e2 <.L30>:
        #else
        leftPreviousState = 1;
        return 1;
        #endif // UltrasoneDoublechecking

    } else if(leftPreviousState && (TreeDistance < valueLeft) ){
     7e2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <leftPreviousState.3>
     7e6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <leftPreviousState.3+0x1>
     7ea:	89 2b       	or	r24, r25
     7ec:	f9 f4       	brne	.+62     	; 0x82c <.L42>

000007ee <.L31>:
            _delay_ms(TimeBetweenRechecking);
        }
    }

    //Werkt hetzelfde als hierboven maar dan voor de rechterkant van de AGV
    if((TreeDistance > valueRight) && !rightPreviousState ){
     7ee:	05 30       	cpi	r16, 0x05	; 5
     7f0:	11 05       	cpc	r17, r1
     7f2:	0c f0       	brlt	.+2      	; 0x7f6 <.Loc.144>

000007f4 <L0^A>:
     7f4:	56 c0       	rjmp	.+172    	; 0x8a2 <.L34>

000007f6 <.Loc.144>:
     7f6:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rightPreviousState.1>
     7fa:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <rightPreviousState.1+0x1>
     7fe:	89 2b       	or	r24, r25
     800:	09 f0       	breq	.+2      	; 0x804 <.Loc.145>

00000802 <L0^A>:
     802:	8b c0       	rjmp	.+278    	; 0x91a <.L38>

00000804 <.Loc.145>:
        #ifdef UltrasoneDoublechecking
        if((doubleCheckRight < amountOfDoubleChecks)){
     804:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <doubleCheckRight.0>
     808:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <doubleCheckRight.0+0x1>

0000080c <.Loc.147>:
     80c:	82 30       	cpi	r24, 0x02	; 2
     80e:	91 05       	cpc	r25, r1
     810:	bc f1       	brlt	.+110    	; 0x880 <.L43>

00000812 <.Loc.148>:
            doubleCheckRight++;
            _delay_ms(doubleCheckTimeDelay);
            return 3;
        } else {
            doubleCheckRight = 0;
     812:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <doubleCheckRight.0+0x1>
     816:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <doubleCheckRight.0>

0000081a <.Loc.150>:
            rightPreviousState = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <rightPreviousState.1+0x1>
     822:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <rightPreviousState.1>

00000826 <.Loc.152>:
            //display(10);
            return 2;
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	72 c0       	rjmp	.+228    	; 0x910 <.L28>

0000082c <.L42>:
    } else if(leftPreviousState && (TreeDistance < valueLeft) ){
     82c:	26 97       	sbiw	r28, 0x06	; 6
     82e:	fc f2       	brlt	.-66     	; 0x7ee <.L31>

00000830 <.Loc.155>:
        if((doubleCheckLeft < amountOfDoubleChecks)){
     830:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <doubleCheckLeft.2>
     834:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <doubleCheckLeft.2+0x1>

00000838 <.Loc.157>:
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	91 05       	cpc	r25, r1
     83c:	94 f0       	brlt	.+36     	; 0x862 <.L44>

0000083e <.Loc.158>:
            leftPreviousState = 0;
     83e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <leftPreviousState.3+0x1>
     842:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <leftPreviousState.3>

00000846 <.Loc.160>:
            doubleCheckLeft = 0;
     846:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <doubleCheckLeft.2+0x1>
     84a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <doubleCheckLeft.2>

0000084e <.LBB44>:
     84e:	2f ef       	ldi	r18, 0xFF	; 255
     850:	83 ec       	ldi	r24, 0xC3	; 195
     852:	99 e0       	ldi	r25, 0x09	; 9

00000854 <.L1^B4>:
     854:	21 50       	subi	r18, 0x01	; 1
     856:	80 40       	sbci	r24, 0x00	; 0
     858:	90 40       	sbci	r25, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <.L1^B4>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <L0^A>

0000085e <L0^A>:
	...

00000860 <.Loc.170>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     860:	c6 cf       	rjmp	.-116    	; 0x7ee <.L31>

00000862 <.L44>:
            doubleCheckLeft++;
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <doubleCheckLeft.2+0x1>
     868:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <doubleCheckLeft.2>

0000086c <.LBB46>:
	__builtin_avr_delay_cycles(__ticks_dc);
     86c:	2f ef       	ldi	r18, 0xFF	; 255
     86e:	88 e5       	ldi	r24, 0x58	; 88
     870:	96 e0       	ldi	r25, 0x06	; 6

00000872 <.L1^B5>:
     872:	21 50       	subi	r18, 0x01	; 1
     874:	80 40       	sbci	r24, 0x00	; 0
     876:	90 40       	sbci	r25, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <.L1^B5>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <L0^A>

0000087c <L0^A>:
	...

0000087e <.Loc.182>:
}
     87e:	b7 cf       	rjmp	.-146    	; 0x7ee <.L31>

00000880 <.L43>:
            doubleCheckRight++;
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <doubleCheckRight.0+0x1>
     886:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <doubleCheckRight.0>

0000088a <.LBB48>:
	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	2f ef       	ldi	r18, 0xFF	; 255
     88c:	88 e5       	ldi	r24, 0x58	; 88
     88e:	96 e0       	ldi	r25, 0x06	; 6

00000890 <.L1^B6>:
     890:	21 50       	subi	r18, 0x01	; 1
     892:	80 40       	sbci	r24, 0x00	; 0
     894:	90 40       	sbci	r25, 0x00	; 0
     896:	e1 f7       	brne	.-8      	; 0x890 <.L1^B6>
     898:	00 c0       	rjmp	.+0      	; 0x89a <L0^A>

0000089a <L0^A>:
	...

0000089c <.LBE48>:
            return 3;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	37 c0       	rjmp	.+110    	; 0x910 <.L28>

000008a2 <.L34>:
        #else
        rightPreviousState = 1;
        return 2;
        #endif // UltrasoneDoublechecking

    } else if(rightPreviousState && (TreeDistance < valueRight) ){
     8a2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <rightPreviousState.1>
     8a6:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <rightPreviousState.1+0x1>
     8aa:	89 2b       	or	r24, r25
     8ac:	c9 f1       	breq	.+114    	; 0x920 <.L39>

000008ae <.Loc.199>:
     8ae:	06 30       	cpi	r16, 0x06	; 6
     8b0:	11 05       	cpc	r17, r1
     8b2:	cc f1       	brlt	.+114    	; 0x926 <.L40>

000008b4 <.Loc.200>:
        //_delay_ms(100);
        if((doubleCheckRight < amountOfDoubleChecks)){
     8b4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <doubleCheckRight.0>
     8b8:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <doubleCheckRight.0+0x1>

000008bc <.Loc.202>:
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	91 05       	cpc	r25, r1
     8c0:	a4 f0       	brlt	.+40     	; 0x8ea <.L45>

000008c2 <.Loc.203>:
            doubleCheckRight++;
            _delay_ms(doubleCheckTimeDelay);
        } else {
            rightPreviousState = 0;
     8c2:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <rightPreviousState.1+0x1>
     8c6:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <rightPreviousState.1>

000008ca <.Loc.205>:
            doubleCheckRight = 0;
     8ca:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <doubleCheckRight.0+0x1>
     8ce:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <doubleCheckRight.0>

000008d2 <.LBI50>:
     8d2:	2f ef       	ldi	r18, 0xFF	; 255
     8d4:	83 ec       	ldi	r24, 0xC3	; 195
     8d6:	99 e0       	ldi	r25, 0x09	; 9

000008d8 <.L1^B7>:
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	80 40       	sbci	r24, 0x00	; 0
     8dc:	90 40       	sbci	r25, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <.L1^B7>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <L0^A>

000008e2 <L0^A>:
	...

000008e4 <.Loc.215>:
            _delay_ms(TimeBetweenRechecking);
        }
    }

    //Er is niks gemeten
    return 3;
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	90 e0       	ldi	r25, 0x00	; 0

000008e8 <.Loc.216>:
}
     8e8:	13 c0       	rjmp	.+38     	; 0x910 <.L28>

000008ea <.L45>:
            doubleCheckRight++;
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <doubleCheckRight.0+0x1>
     8f0:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <doubleCheckRight.0>

000008f4 <.LBI54>:
	__builtin_avr_delay_cycles(__ticks_dc);
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
     8f6:	88 e5       	ldi	r24, 0x58	; 88
     8f8:	96 e0       	ldi	r25, 0x06	; 6

000008fa <.L1^B8>:
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	80 40       	sbci	r24, 0x00	; 0
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <.L1^B8>
     902:	00 c0       	rjmp	.+0      	; 0x904 <L0^A>

00000904 <L0^A>:
	...

00000906 <.Loc.228>:
    return 3;
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	90 e0       	ldi	r25, 0x00	; 0

0000090a <.Loc.229>:
}
     90a:	02 c0       	rjmp	.+4      	; 0x910 <.L28>

0000090c <.L37>:
        return 0;
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0

00000910 <.L28>:

}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28

00000914 <.Loc.233>:
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16

00000918 <.Loc.234>:
     918:	08 95       	ret

0000091a <.L38>:
    return 3;
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	f8 cf       	rjmp	.-16     	; 0x910 <.L28>

00000920 <.L39>:
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	f5 cf       	rjmp	.-22     	; 0x910 <.L28>

00000926 <.L40>:
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	f2 cf       	rjmp	.-28     	; 0x910 <.L28>

0000092c <followHand>:
    Anders return de originele waarde.
*/


//Code voor het volgen van de hand op de juiste afstand
void followHand(int distance){
     92c:	28 2f       	mov	r18, r24
     92e:	39 2f       	mov	r19, r25

00000930 <.Loc.239>:

    //Check voor als er iets TE ver weg staat en te negeren.
    if(distance > distanceToCheck){
     930:	25 31       	cpi	r18, 0x15	; 21
     932:	31 05       	cpc	r19, r1
     934:	5c f4       	brge	.+22     	; 0x94c <.L51>

00000936 <.Loc.241>:
        setBreaklights(0);
        return;
    }

    //Check voor juiste afstand met speelruimte
    if((distance < maxDistance) && (distance > minDistance)){
     936:	c9 01       	movw	r24, r18

00000938 <.Loc.243>:
     938:	05 97       	sbiw	r24, 0x05	; 5

0000093a <.Loc.244>:
     93a:	03 97       	sbiw	r24, 0x03	; 3
     93c:	80 f0       	brcs	.+32     	; 0x95e <.L52>

0000093e <.Loc.245>:
            setBreaklights(0);
            return;
    }

    //Check voor dichtbij
    if(distance < minDistance){
     93e:	24 30       	cpi	r18, 0x04	; 4
     940:	31 05       	cpc	r19, r1
     942:	b4 f0       	brlt	.+44     	; 0x970 <.L53>

00000944 <.Loc.247>:
        setBreaklights(1);
        return;
    }

    //check voor verweg
    if(distance > maxDistance){
     944:	29 30       	cpi	r18, 0x09	; 9
     946:	31 05       	cpc	r19, r1
     948:	e4 f4       	brge	.+56     	; 0x982 <.L54>

0000094a <.L46>:
        setBothStepperMode(ForwardStep);
        setBreaklights(0);
    }

}
     94a:	08 95       	ret

0000094c <.L51>:
        setBothStepperMode(Off);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0

00000950 <.Loc.251>:
     950:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000954 <.LVL39>:
        setBreaklights(0);
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

0000095c <.LVL40>:
        return;
     95c:	08 95       	ret

0000095e <.L52>:
            setBothStepperMode(Off);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000966 <.LVL41>:
            setBreaklights(0);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

0000096e <.LVL42>:
            return;
     96e:	08 95       	ret

00000970 <.L53>:
        setBothStepperMode(BackwardStep);
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000978 <.LVL43>:
        setBreaklights(1);
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000980 <.LVL44>:
        return;
     980:	08 95       	ret

00000982 <.L54>:
        setBothStepperMode(ForwardStep);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

0000098a <.LVL45>:
        setBreaklights(0);
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000992 <.LVL46>:
     992:	db cf       	rjmp	.-74     	; 0x94a <.L46>

00000994 <main>:
    initAGV(); //Init
     994:	0e 94 8d 03 	call	0x71a	; 0x71a <initAGV>

00000998 <.LVL48>:
    display(0);
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <display>

000009a0 <.LVL49>:
    setHeadlights(1);
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 9e 01 	call	0x33c	; 0x33c <setHeadlights>

000009a8 <.LVL50>:
    int mode = ModeOff; //Active mode van de AGV
     9a8:	c0 e0       	ldi	r28, 0x00	; 0
     9aa:	d0 e0       	ldi	r29, 0x00	; 0

000009ac <.Loc.269>:
                if(!checkNoodstop()) {
     9ac:	00 e0       	ldi	r16, 0x00	; 0
     9ae:	10 e0       	ldi	r17, 0x00	; 0

000009b0 <.Loc.270>:
                        mode = BoomgaardRijden;
     9b0:	68 94       	set
     9b2:	cc 24       	eor	r12, r12
     9b4:	c1 f8       	bld	r12, 1
     9b6:	d1 2c       	mov	r13, r1
     9b8:	32 c0       	rjmp	.+100    	; 0xa1e <.L56>

000009ba <.L59>:
        switch(mode){
     9ba:	c3 30       	cpi	r28, 0x03	; 3
     9bc:	d1 05       	cpc	r29, r1
     9be:	09 f4       	brne	.+2      	; 0x9c2 <.Loc.273>

000009c0 <L0^A>:
     9c0:	d6 c1       	rjmp	.+940    	; 0xd6e <.L63>

000009c2 <.Loc.273>:
     9c2:	c4 30       	cpi	r28, 0x04	; 4
     9c4:	d1 05       	cpc	r29, r1
     9c6:	59 f5       	brne	.+86     	; 0xa1e <.L56>

000009c8 <.L57>:
                setBothStepperMode(Off);
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

000009d0 <.LVL53>:
                LedNoodstopBack(1);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 b9 01 	call	0x372	; 0x372 <LedNoodstopBack>

000009d8 <.LVL54>:
                LedNoodstopFront(1);
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 ab 01 	call	0x356	; 0x356 <LedNoodstopFront>

000009e0 <.LVL55>:
                TurnSignalLeft = 1;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <TurnSignalLeft+0x1>
     9e8:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <TurnSignalLeft>

000009ec <.Loc.279>:
                TurnSignalRight = 1;
     9ec:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalRight+0x1>
     9f0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalRight>

000009f4 <.Loc.281>:
                TreeSignalLeft = 1;
     9f4:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TreeSignalLeft+0x1>
     9f8:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TreeSignalLeft>

000009fc <.Loc.283>:
                TreeSignalRight = 1;
     9fc:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TreeSignalRight+0x1>
     a00:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TreeSignalRight>

00000a04 <.Loc.285>:
                setBreaklights(1);
     a04:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000a08 <.LVL56>:
                if(!checkNoodstop()) {
     a08:	0e 94 3f 03 	call	0x67e	; 0x67e <checkNoodstop>

00000a0c <.LVL57>:
     a0c:	c1 e0       	ldi	r28, 0x01	; 1
     a0e:	d0 e0       	ldi	r29, 0x00	; 0
     a10:	89 2b       	or	r24, r25
     a12:	09 f4       	brne	.+2      	; 0xa16 <.L66>
     a14:	e8 01       	movw	r28, r16

00000a16 <.L66>:
     a16:	cc 0f       	add	r28, r28
     a18:	dd 1f       	adc	r29, r29
     a1a:	cc 0f       	add	r28, r28
     a1c:	dd 1f       	adc	r29, r29

00000a1e <.L56>:
        display(agv_ultrasoon_boom_rechts);
     a1e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <agv_ultrasoon_boom_rechts>
     a22:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>
     a26:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <display>

00000a2a <.LVL59>:
        if(checkNoodstop()){
     a2a:	0e 94 3f 03 	call	0x67e	; 0x67e <checkNoodstop>

00000a2e <.LVL60>:
     a2e:	89 2b       	or	r24, r25
     a30:	59 f6       	brne	.-106    	; 0x9c8 <.L57>

00000a32 <.Loc.295>:
        switch(mode){
     a32:	c2 30       	cpi	r28, 0x02	; 2
     a34:	d1 05       	cpc	r29, r1
     a36:	09 f4       	brne	.+2      	; 0xa3a <L0^A+0x2>

00000a38 <L0^A>:
     a38:	ae c0       	rjmp	.+348    	; 0xb96 <.L58>
     a3a:	0c f0       	brlt	.+2      	; 0xa3e <L0^A+0x2>

00000a3c <L0^A>:
     a3c:	be cf       	rjmp	.-132    	; 0x9ba <.L59>
     a3e:	20 97       	sbiw	r28, 0x00	; 0
     a40:	89 f1       	breq	.+98     	; 0xaa4 <.L60>
     a42:	c1 30       	cpi	r28, 0x01	; 1
     a44:	d1 05       	cpc	r29, r1
     a46:	59 f7       	brne	.-42     	; 0xa1e <.L56>

00000a48 <.Loc.296>:
                FrontDistance = agv_ultrasoon_voor_midden;
     a48:	a0 90 6c 02 	lds	r10, 0x026C	; 0x80026c <agv_ultrasoon_voor_midden>
     a4c:	b0 90 6d 02 	lds	r11, 0x026D	; 0x80026d <agv_ultrasoon_voor_midden+0x1>

00000a50 <.Loc.298>:
                int IRState = checkFrontIRState();
     a50:	0e 94 9c 03 	call	0x738	; 0x738 <checkFrontIRState>

00000a54 <.LVL62>:
     a54:	e8 2e       	mov	r14, r24
     a56:	f9 2e       	mov	r15, r25

00000a58 <.Loc.300>:
                switch(IRState){
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	e9 16       	cp	r14, r25
     a5c:	f1 04       	cpc	r15, r1
     a5e:	09 f4       	brne	.+2      	; 0xa62 <L0^A+0x2>

00000a60 <L0^A>:
     a60:	84 c0       	rjmp	.+264    	; 0xb6a <.L67>
     a62:	0c f0       	brlt	.+2      	; 0xa66 <L0^A+0x2>

00000a64 <L0^A>:
     a64:	60 c0       	rjmp	.+192    	; 0xb26 <.L68>
     a66:	e1 14       	cp	r14, r1
     a68:	f1 04       	cpc	r15, r1
     a6a:	09 f4       	brne	.+2      	; 0xa6e <L0^A+0x2>

00000a6c <L0^A>:
     a6c:	6f c0       	rjmp	.+222    	; 0xb4c <.L69>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	e8 16       	cp	r14, r24
     a72:	f1 04       	cpc	r15, r1
     a74:	a1 f6       	brne	.-88     	; 0xa1e <.L56>

00000a76 <.Loc.301>:
                        TurnSignalLeft = 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <TurnSignalLeft+0x1>
     a7e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <TurnSignalLeft>

00000a82 <.Loc.303>:
                        TurnSignalRight = 0;
     a82:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <TurnSignalRight+0x1>
     a86:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <TurnSignalRight>

00000a8a <.Loc.305>:
                        setStepperMode(rightMotor, BackwardStep);
     a8a:	6c 2d       	mov	r22, r12
     a8c:	7d 2d       	mov	r23, r13
     a8e:	8b e0       	ldi	r24, 0x0B	; 11
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000a96 <.LVL64>:
                        setStepperMode(leftMotor, ForwardStep);
     a96:	b8 01       	movw	r22, r16
     a98:	8a e0       	ldi	r24, 0x0A	; 10
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000aa0 <.LVL65>:
                        break;
     aa0:	e7 01       	movw	r28, r14

00000aa2 <.Loc.308>:
     aa2:	bd cf       	rjmp	.-134    	; 0xa1e <.L56>

00000aa4 <.L60>:
                setBothStepperMode(Off);
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000aac <.LVL68>:
                LedNoodstopBack(0);
     aac:	c8 01       	movw	r24, r16
     aae:	0e 94 b9 01 	call	0x372	; 0x372 <LedNoodstopBack>

00000ab2 <.LVL69>:
                LedNoodstopFront(0);
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 ab 01 	call	0x356	; 0x356 <LedNoodstopFront>

00000ab8 <.LVL70>:
                TurnSignalLeft = 0;
     ab8:	10 93 3f 02 	sts	0x023F, r17	; 0x80023f <TurnSignalLeft+0x1>
     abc:	00 93 3e 02 	sts	0x023E, r16	; 0x80023e <TurnSignalLeft>

00000ac0 <.Loc.314>:
                TurnSignalRight = 0;
     ac0:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <TurnSignalRight+0x1>
     ac4:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <TurnSignalRight>

00000ac8 <.Loc.316>:
                TreeSignalLeft = 0;
     ac8:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <TreeSignalLeft+0x1>
     acc:	00 93 3a 02 	sts	0x023A, r16	; 0x80023a <TreeSignalLeft>

00000ad0 <.Loc.318>:
                TreeSignalRight = 0;
     ad0:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <TreeSignalRight+0x1>
     ad4:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <TreeSignalRight>

00000ad8 <.Loc.320>:
                setBreaklights(0);
     ad8:	c8 01       	movw	r24, r16
     ada:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000ade <.LVL71>:
                if(isStartButtonPressed()){
     ade:	0e 94 48 03 	call	0x690	; 0x690 <isStartButtonPressed>

00000ae2 <.LVL72>:
     ae2:	28 2f       	mov	r18, r24
     ae4:	39 2f       	mov	r19, r25

00000ae6 <.Loc.323>:
     ae6:	21 15       	cp	r18, r1
     ae8:	31 05       	cpc	r19, r1
     aea:	11 f4       	brne	.+4      	; 0xaf0 <.L91>

00000aec <.LBB63>:
     aec:	e9 01       	movw	r28, r18
     aee:	97 cf       	rjmp	.-210    	; 0xa1e <.L56>

00000af0 <.L91>:
                    int switchState = checkModeSwitchState();
     af0:	0e 94 4e 03 	call	0x69c	; 0x69c <checkModeSwitchState>

00000af4 <.LVL73>:
     af4:	28 2f       	mov	r18, r24
     af6:	39 2f       	mov	r19, r25

00000af8 <.Loc.326>:
                    switch(switchState){
     af8:	21 30       	cpi	r18, 0x01	; 1
     afa:	31 05       	cpc	r19, r1
     afc:	61 f0       	breq	.+24     	; 0xb16 <.L64>
     afe:	22 30       	cpi	r18, 0x02	; 2
     b00:	31 05       	cpc	r19, r1
     b02:	09 f0       	breq	.+2      	; 0xb06 <.LBI64>

00000b04 <L0^A>:
     b04:	8c cf       	rjmp	.-232    	; 0xa1e <.L56>

00000b06 <.LBI64>:
	__builtin_avr_delay_cycles(__ticks_dc);
     b06:	8f e3       	ldi	r24, 0x3F	; 63
     b08:	9c e9       	ldi	r25, 0x9C	; 156

00000b0a <.L1^B9>:
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <.L1^B9>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <L0^A>

00000b10 <L0^A>:
	...

00000b12 <.Loc.336>:
                        mode = BoomgaardRijden;
     b12:	e9 01       	movw	r28, r18

00000b14 <.Loc.337>:
}
     b14:	84 cf       	rjmp	.-248    	; 0xa1e <.L56>

00000b16 <.L64>:
	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	8f e3       	ldi	r24, 0x3F	; 63
     b18:	9c e9       	ldi	r25, 0x9C	; 156

00000b1a <.L1^B10>:
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <.L1^B10>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <L0^A>

00000b20 <L0^A>:
	...

00000b22 <.Loc.348>:
                        mode = Following;
     b22:	e9 01       	movw	r28, r18

00000b24 <.Loc.349>:
}
     b24:	7c cf       	rjmp	.-264    	; 0xa1e <.L56>

00000b26 <.L68>:
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	e9 16       	cp	r14, r25
     b2a:	f1 04       	cpc	r15, r1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <.Loc.351>

00000b2e <L0^A>:
     b2e:	77 cf       	rjmp	.-274    	; 0xa1e <.L56>

00000b30 <.Loc.351>:
                        followHand(filterDistance(FrontDistance));
     b30:	c5 01       	movw	r24, r10
     b32:	0e 94 3b 08 	call	0x1076	; 0x1076 <filterDistance>

00000b36 <.LVL78>:
     b36:	0e 94 96 04 	call	0x92c	; 0x92c <followHand>

00000b3a <.LVL79>:
                        TurnSignalLeft = 0;
     b3a:	10 93 3f 02 	sts	0x023F, r17	; 0x80023f <TurnSignalLeft+0x1>
     b3e:	00 93 3e 02 	sts	0x023E, r16	; 0x80023e <TurnSignalLeft>

00000b42 <.Loc.354>:
                        TurnSignalRight = 0;
     b42:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <TurnSignalRight+0x1>
     b46:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <TurnSignalRight>

00000b4a <.Loc.356>:
                        break;
     b4a:	69 cf       	rjmp	.-302    	; 0xa1e <.L56>

00000b4c <.L69>:
                        setBothStepperMode(Off);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000b54 <.LVL80>:
                        TurnSignalLeft = 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <TurnSignalLeft+0x1>
     b5c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <TurnSignalLeft>

00000b60 <.Loc.360>:
                        TurnSignalRight = 1;
     b60:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalRight+0x1>
     b64:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalRight>

00000b68 <.Loc.362>:
                        break;
     b68:	5a cf       	rjmp	.-332    	; 0xa1e <.L56>

00000b6a <.L67>:
                        TurnSignalRight = 1;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalRight+0x1>
     b72:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalRight>

00000b76 <.Loc.365>:
                        TurnSignalLeft = 0;
     b76:	10 93 3f 02 	sts	0x023F, r17	; 0x80023f <TurnSignalLeft+0x1>
     b7a:	00 93 3e 02 	sts	0x023E, r16	; 0x80023e <TurnSignalLeft>

00000b7e <.Loc.367>:
                        setStepperMode(leftMotor, BackwardStep);
     b7e:	6c 2d       	mov	r22, r12
     b80:	7d 2d       	mov	r23, r13
     b82:	8a e0       	ldi	r24, 0x0A	; 10
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000b8a <.LVL81>:
                        setStepperMode(rightMotor, ForwardStep);
     b8a:	b8 01       	movw	r22, r16
     b8c:	8b e0       	ldi	r24, 0x0B	; 11
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000b94 <.LVL82>:
                        break;
     b94:	44 cf       	rjmp	.-376    	; 0xa1e <.L56>

00000b96 <.L58>:
                int WorldState = checkSensors();
     b96:	0e 94 b0 03 	call	0x760	; 0x760 <checkSensors>

00000b9a <.LVL84>:
     b9a:	e8 2e       	mov	r14, r24
     b9c:	f9 2e       	mov	r15, r25

00000b9e <.Loc.372>:
                if(previousWorldState != WorldState){
     b9e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <previousWorldState.7>
     ba2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <previousWorldState.7+0x1>
     ba6:	8e 15       	cp	r24, r14
     ba8:	9f 05       	cpc	r25, r15
     baa:	21 f0       	breq	.+8      	; 0xbb4 <.L72>

00000bac <.Loc.376>:
                    previousWorldState = WorldState;
     bac:	f0 92 0c 02 	sts	0x020C, r15	; 0x80020c <previousWorldState.7+0x1>
     bb0:	e0 92 0b 02 	sts	0x020B, r14	; 0x80020b <previousWorldState.7>

00000bb4 <.L72>:
                if(nietInEenPad() && !alBochtGemaakt){
     bb4:	0e 94 27 03 	call	0x64e	; 0x64e <nietInEenPad>

00000bb8 <.LVL86>:
     bb8:	89 2b       	or	r24, r25
     bba:	31 f0       	breq	.+12     	; 0xbc8 <.L73>

00000bbc <.Loc.381>:
     bbc:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <alBochtGemaakt.6>
     bc0:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <alBochtGemaakt.6+0x1>
     bc4:	89 2b       	or	r24, r25
     bc6:	71 f1       	breq	.+92     	; 0xc24 <.L92>

00000bc8 <.L73>:
                } else if(nietInEenPad()){
     bc8:	0e 94 27 03 	call	0x64e	; 0x64e <nietInEenPad>

00000bcc <.LVL87>:
     bcc:	89 2b       	or	r24, r25
     bce:	09 f0       	breq	.+2      	; 0xbd2 <.L74>

00000bd0 <L0^A>:
     bd0:	45 c0       	rjmp	.+138    	; 0xc5c <.L93>

00000bd2 <.L74>:
                switch(WorldState){
     bd2:	22 e0       	ldi	r18, 0x02	; 2
     bd4:	e2 16       	cp	r14, r18
     bd6:	f1 04       	cpc	r15, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <L0^A+0x2>

00000bda <L0^A>:
     bda:	83 c0       	rjmp	.+262    	; 0xce2 <.L76>
     bdc:	0c f0       	brlt	.+2      	; 0xbe0 <L0^A+0x2>

00000bde <L0^A>:
     bde:	51 c0       	rjmp	.+162    	; 0xc82 <.L77>
     be0:	e1 14       	cp	r14, r1
     be2:	f1 04       	cpc	r15, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <L0^A+0x2>

00000be6 <L0^A>:
     be6:	74 c0       	rjmp	.+232    	; 0xcd0 <.L78>
     be8:	ea 94       	dec	r14
     bea:	ef 28       	or	r14, r15
     bec:	09 f0       	breq	.+2      	; 0xbf0 <.Loc.387>

00000bee <L0^A>:
     bee:	17 cf       	rjmp	.-466    	; 0xa1e <.L56>

00000bf0 <.Loc.387>:
                        setBothStepperMode(Off);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000bf8 <.LVL89>:
                        TreeSignalLeft = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TreeSignalLeft+0x1>
     c00:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TreeSignalLeft>

00000c04 <.Loc.390>:
                        setBreaklights(1);
     c04:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000c08 <.LBB78>:
	__builtin_avr_delay_cycles(__ticks_dc);
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	97 e9       	ldi	r25, 0x97	; 151
     c0c:	2a e3       	ldi	r18, 0x3A	; 58

00000c0e <.L1^B11>:
     c0e:	81 50       	subi	r24, 0x01	; 1
     c10:	90 40       	sbci	r25, 0x00	; 0
     c12:	20 40       	sbci	r18, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <.L1^B11>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <L0^A>

00000c18 <L0^A>:
	...

00000c1a <.LBE78>:
                        TreeSignalLeft = 0;
     c1a:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <TreeSignalLeft+0x1>
     c1e:	00 93 3a 02 	sts	0x023A, r16	; 0x80023a <TreeSignalLeft>

00000c22 <.Loc.402>:
                         break;
     c22:	fd ce       	rjmp	.-518    	; 0xa1e <.L56>

00000c24 <.L92>:
     c24:	2f ef       	ldi	r18, 0xFF	; 255
     c26:	80 e7       	ldi	r24, 0x70	; 112
     c28:	92 e0       	ldi	r25, 0x02	; 2

00000c2a <.L1^B12>:
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	e1 f7       	brne	.-8      	; 0xc2a <.L1^B12>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <L0^A>

00000c34 <L0^A>:
	...

00000c36 <.LBE73>:
                    if(nietInEenPad() && !alBochtGemaakt){
     c36:	0e 94 27 03 	call	0x64e	; 0x64e <nietInEenPad>

00000c3a <.LVL94>:
     c3a:	89 2b       	or	r24, r25
     c3c:	51 f2       	breq	.-108    	; 0xbd2 <.L74>

00000c3e <.Loc.416>:
     c3e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <alBochtGemaakt.6>
     c42:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <alBochtGemaakt.6+0x1>
     c46:	89 2b       	or	r24, r25
     c48:	21 f6       	brne	.-120    	; 0xbd2 <.L74>

00000c4a <.Loc.417>:
                        alBochtGemaakt = 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <alBochtGemaakt.6+0x1>
     c52:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <alBochtGemaakt.6>

00000c56 <.Loc.419>:
                        mode = BoomgaardBocht;
     c56:	c3 e0       	ldi	r28, 0x03	; 3
     c58:	d0 e0       	ldi	r29, 0x00	; 0
     c5a:	bb cf       	rjmp	.-138    	; 0xbd2 <.L74>

00000c5c <.L93>:
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	83 ec       	ldi	r24, 0xC3	; 195
     c60:	99 e0       	ldi	r25, 0x09	; 9

00000c62 <.L1^B13>:
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <.L1^B13>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <L0^A>

00000c6c <L0^A>:
	...

00000c6e <.LBE75>:
                    if(nietInEenPad()){
     c6e:	0e 94 27 03 	call	0x64e	; 0x64e <nietInEenPad>

00000c72 <.LVL98>:
     c72:	c1 e0       	ldi	r28, 0x01	; 1
     c74:	d0 e0       	ldi	r29, 0x00	; 0

00000c76 <.Loc.433>:
     c76:	89 2b       	or	r24, r25
     c78:	09 f0       	breq	.+2      	; 0xc7c <.L75>
     c7a:	e8 01       	movw	r28, r16

00000c7c <.L75>:
     c7c:	cc 0f       	add	r28, r28
     c7e:	dd 1f       	adc	r29, r29
     c80:	a8 cf       	rjmp	.-176    	; 0xbd2 <.L74>

00000c82 <.L77>:
     c82:	23 e0       	ldi	r18, 0x03	; 3
     c84:	e2 16       	cp	r14, r18
     c86:	f1 04       	cpc	r15, r1
     c88:	09 f0       	breq	.+2      	; 0xc8c <.Loc.435>

00000c8a <L0^A>:
     c8a:	c9 ce       	rjmp	.-622    	; 0xa1e <.L56>

00000c8c <.Loc.435>:
                        int correction = needCorrection();
     c8c:	0e 94 32 03 	call	0x664	; 0x664 <needCorrection>

00000c90 <.LVL101>:
     c90:	e8 2e       	mov	r14, r24

00000c92 <.Loc.437>:
     c92:	f9 2e       	mov	r15, r25

00000c94 <.Loc.438>:
                        setBreaklights(0);
     c94:	c8 01       	movw	r24, r16
     c96:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000c9a <.LVL104>:
                        switch(correction){
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	e8 16       	cp	r14, r24
     c9e:	f1 04       	cpc	r15, r1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <L0^A+0x2>

00000ca2 <L0^A>:
     ca2:	58 c0       	rjmp	.+176    	; 0xd54 <.L81>
     ca4:	c4 f5       	brge	.+112    	; 0xd16 <.L82>
     ca6:	e1 14       	cp	r14, r1
     ca8:	f1 04       	cpc	r15, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <L0^A+0x2>

00000cac <L0^A>:
     cac:	4e c0       	rjmp	.+156    	; 0xd4a <.L83>
     cae:	ea 94       	dec	r14
     cb0:	ef 28       	or	r14, r15
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <.Loc.440>

00000cb4 <L0^A>:
     cb4:	b4 ce       	rjmp	.-664    	; 0xa1e <.L56>

00000cb6 <.Loc.440>:
                                setStepperMode(rightMotor, Off);
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	8b e0       	ldi	r24, 0x0B	; 11
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000cc2 <.LVL105>:
                                setStepperMode(leftMotor, ForwardStep);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000cce <.LVL106>:
                                break;
     cce:	a7 ce       	rjmp	.-690    	; 0xa1e <.L56>

00000cd0 <.L78>:
                        setBothStepperMode(Off);
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000cd8 <.LVL108>:
                        setBreaklights(1);
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000ce0 <.LVL109>:
                        break;
     ce0:	9e ce       	rjmp	.-708    	; 0xa1e <.L56>

00000ce2 <.L76>:
                        setBothStepperMode(Off);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000cea <.LVL110>:
                        TreeSignalRight = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TreeSignalRight+0x1>
     cf2:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TreeSignalRight>

00000cf6 <.Loc.449>:
                        setBreaklights(1);
     cf6:	0e 94 75 01 	call	0x2ea	; 0x2ea <setBreaklights>

00000cfa <.LBB80>:
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	97 e9       	ldi	r25, 0x97	; 151
     cfe:	2a e3       	ldi	r18, 0x3A	; 58

00000d00 <.L1^B14>:
     d00:	81 50       	subi	r24, 0x01	; 1
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	20 40       	sbci	r18, 0x00	; 0
     d06:	e1 f7       	brne	.-8      	; 0xd00 <.L1^B14>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <L0^A>

00000d0a <L0^A>:
	...

00000d0c <.LBE80>:
                        TreeSignalRight = 0;
     d0c:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <TreeSignalRight+0x1>
     d10:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <TreeSignalRight>

00000d14 <.Loc.461>:
                        break;
     d14:	84 ce       	rjmp	.-760    	; 0xa1e <.L56>

00000d16 <.L82>:
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	e8 16       	cp	r14, r24
     d1a:	f1 04       	cpc	r15, r1
     d1c:	09 f0       	breq	.+2      	; 0xd20 <.Loc.463>

00000d1e <L0^A>:
     d1e:	7f ce       	rjmp	.-770    	; 0xa1e <.L56>

00000d20 <.Loc.463>:
                                TreeSignalLeft = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TreeSignalLeft+0x1>
     d28:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TreeSignalLeft>

00000d2c <.Loc.465>:
                                TreeSignalRight = 1;
     d2c:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <TreeSignalRight+0x1>
     d30:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <TreeSignalRight>

00000d34 <.Loc.467>:
                                TurnSignalLeft = 1;
     d34:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <TurnSignalLeft+0x1>
     d38:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <TurnSignalLeft>

00000d3c <.Loc.469>:
                                TurnSignalRight = 1;
     d3c:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <TurnSignalRight+0x1>
     d40:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TurnSignalRight>

00000d44 <.Loc.471>:
                                setBothStepperMode(Off);
     d44:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000d48 <.LVL114>:
                                break;
     d48:	6a ce       	rjmp	.-812    	; 0xa1e <.L56>

00000d4a <.L83>:
                                setBothStepperMode(ForwardStep);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000d52 <.LVL115>:
                                break;
     d52:	65 ce       	rjmp	.-822    	; 0xa1e <.L56>

00000d54 <.L81>:
                                setStepperMode(leftMotor, Off);
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000d60 <.LVL116>:
                                setStepperMode(rightMotor, ForwardStep);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	8b e0       	ldi	r24, 0x0B	; 11
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000d6c <.LVL117>:
                                break;
     d6c:	58 ce       	rjmp	.-848    	; 0xa1e <.L56>

00000d6e <.L63>:
                if(startTurn(direction) && (bochtGemaakt == 0)){
     d6e:	c8 01       	movw	r24, r16
     d70:	0e 94 72 02 	call	0x4e4	; 0x4e4 <startTurn>

00000d74 <.LVL119>:
     d74:	89 2b       	or	r24, r25
     d76:	01 f1       	breq	.+64     	; 0xdb8 <.L86>

00000d78 <.Loc.484>:
     d78:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <bochtGemaakt.4>
     d7c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <bochtGemaakt.4+0x1>
     d80:	89 2b       	or	r24, r25
     d82:	31 f4       	brne	.+12     	; 0xd90 <.L89>

00000d84 <.Loc.485>:
                    bochtGemaakt = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <bochtGemaakt.4+0x1>
     d8c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <bochtGemaakt.4>

00000d90 <.L89>:
                    if(bit_is_clear(IRPIN, IRSensorLeft) || bit_is_clear(IRPIN, IRSensorRight)){
     d90:	02 9b       	sbis	0x00, 2	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <.L88>

00000d94 <.Loc.489>:
     d94:	03 99       	sbic	0x00, 3	; 0
     d96:	43 ce       	rjmp	.-890    	; 0xa1e <.L56>

00000d98 <.L88>:
                        bochtGemaakt = 0;
     d98:	10 93 55 02 	sts	0x0255, r17	; 0x800255 <bochtGemaakt.4+0x1>
     d9c:	00 93 54 02 	sts	0x0254, r16	; 0x800254 <bochtGemaakt.4>

00000da0 <.LBB84>:
     da0:	9f ef       	ldi	r25, 0xFF	; 255
     da2:	25 ea       	ldi	r18, 0xA5	; 165
     da4:	8e e0       	ldi	r24, 0x0E	; 14

00000da6 <.L1^B15>:
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	20 40       	sbci	r18, 0x00	; 0
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <.L1^B15>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <L0^A>

00000db0 <L0^A>:
	...

00000db2 <.LBE84>:
                        mode = BoomgaardRijden;
     db2:	cc 2d       	mov	r28, r12
     db4:	dd 2d       	mov	r29, r13
     db6:	33 ce       	rjmp	.-922    	; 0xa1e <.L56>

00000db8 <.L86>:
                if(bochtGemaakt){
     db8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <bochtGemaakt.4>
     dbc:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <bochtGemaakt.4+0x1>
     dc0:	89 2b       	or	r24, r25
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <L0^A+0x2>

00000dc4 <L0^A>:
     dc4:	2c ce       	rjmp	.-936    	; 0xa1e <.L56>
     dc6:	e4 cf       	rjmp	.-56     	; 0xd90 <.L89>

00000dc8 <setStepperMode>:
void setBothStepperMode(int mode){
    setStepperMode(leftMotor, mode);
    setStepperMode(rightMotor, mode);
}

void setStepperMode(int motor, int mode){
     dc8:	28 2f       	mov	r18, r24
     dca:	39 2f       	mov	r19, r25
     dcc:	86 2f       	mov	r24, r22

00000dce <.Loc.2>:
     dce:	97 2f       	mov	r25, r23

00000dd0 <.Loc.3>:

    int state;
    if(mode == Off){
     dd0:	51 e0       	ldi	r21, 0x01	; 1
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	69 f0       	breq	.+26     	; 0xdf4 <.L8>

00000dda <.L2>:
        state = 1;
    }


    int** motorLoop;
    switch(motor){
     dda:	2a 30       	cpi	r18, 0x0A	; 10
     ddc:	31 05       	cpc	r19, r1
     dde:	61 f0       	breq	.+24     	; 0xdf8 <.L3>
     de0:	2b 30       	cpi	r18, 0x0B	; 11
     de2:	31 05       	cpc	r19, r1
     de4:	81 f0       	breq	.+32     	; 0xe06 <.L4>

00000de6 <.L5>:
            motorLoop = &rightMotorLoop;
            rightMotorEnabled = state;
            break;
    }

    switch(mode){
     de6:	02 97       	sbiw	r24, 0x02	; 2
     de8:	a9 f0       	breq	.+42     	; 0xe14 <.L9>
     dea:	85 e2       	ldi	r24, 0x25	; 37
     dec:	92 e0       	ldi	r25, 0x02	; 2

00000dee <.L6>:
        default:
        case ForwardStep:
            *motorLoop = &LoopForward;
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24

00000df2 <.Loc.10>:
            break;
        case BackwardStep:
            *motorLoop = &LoopBackwards;
            break;
    }
}
     df2:	08 95       	ret

00000df4 <.L8>:
    if(mode == Off){
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	f1 cf       	rjmp	.-30     	; 0xdda <.L2>

00000df8 <.L3>:
            leftMotorEnabled = state;
     df8:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <leftMotorEnabled>
     dfc:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <leftMotorEnabled+0x1>

00000e00 <.Loc.15>:
            motorLoop = &leftMotorLoop;
     e00:	e3 e1       	ldi	r30, 0x13	; 19
     e02:	f2 e0       	ldi	r31, 0x02	; 2

00000e04 <.Loc.17>:
            break;
     e04:	f0 cf       	rjmp	.-32     	; 0xde6 <.L5>

00000e06 <.L4>:
            rightMotorEnabled = state;
     e06:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <rightMotorEnabled>
     e0a:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <rightMotorEnabled+0x1>

00000e0e <.Loc.21>:
            motorLoop = &rightMotorLoop;
     e0e:	e1 e1       	ldi	r30, 0x11	; 17
     e10:	f2 e0       	ldi	r31, 0x02	; 2

00000e12 <.Loc.23>:
            break;
     e12:	e9 cf       	rjmp	.-46     	; 0xde6 <.L5>

00000e14 <.L9>:
    switch(mode){
     e14:	85 e1       	ldi	r24, 0x15	; 21
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	ea cf       	rjmp	.-44     	; 0xdee <.L6>

00000e1a <setBothStepperMode>:
void setBothStepperMode(int mode){
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	d8 2f       	mov	r29, r24
     e20:	c9 2f       	mov	r28, r25

00000e22 <.Loc.27>:
    setStepperMode(leftMotor, mode);
     e22:	68 2f       	mov	r22, r24
     e24:	79 2f       	mov	r23, r25
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	90 e0       	ldi	r25, 0x00	; 0

00000e2a <.Loc.28>:
     e2a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000e2e <.LVL10>:
    setStepperMode(rightMotor, mode);
     e2e:	6d 2f       	mov	r22, r29
     e30:	7c 2f       	mov	r23, r28
     e32:	8b e0       	ldi	r24, 0x0B	; 11
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <setStepperMode>

00000e3a <.LVL11>:
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <init_timer>:

//Clockspeed = 16.000.000 / 250 / 64 = 1.000
#define Clockspeed 1000
void init_timer(){
    // Use mode 0, clkdiv = 64
    TCCR0A = 0;
     e40:	14 bc       	out	0x24, r1	; 36

00000e42 <.Loc.34>:
    TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	85 bd       	out	0x25, r24	; 37

00000e46 <.Loc.36>:

    // Disable PWM output
    OCR0A = 0;
     e46:	17 bc       	out	0x27, r1	; 39

00000e48 <.Loc.38>:
    OCR0B = 0;
     e48:	18 bc       	out	0x28, r1	; 40

00000e4a <.Loc.40>:

    //Overflow interrupt
    TIMSK0 = (1<<TOIE0);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

00000e50 <.Loc.42>:
    TCNT0 = 6;
     e50:	86 e0       	ldi	r24, 0x06	; 6
     e52:	86 bd       	out	0x26, r24	; 38

00000e54 <.Loc.44>:

    sei();
     e54:	78 94       	sei

00000e56 <.Loc.45>:
}
     e56:	08 95       	ret

00000e58 <initMotorpins>:
}


void initMotorpins(){
    for(int i = MotorLeftStartpin; i < MotorLeftStartpin+4; i++){
        MotorLeftDDR |= (1<<i);
     e58:	80 9a       	sbi	0x10, 0	; 16

00000e5a <.Loc.52>:
     e5a:	81 9a       	sbi	0x10, 1	; 16

00000e5c <.Loc.56>:
     e5c:	82 9a       	sbi	0x10, 2	; 16

00000e5e <.Loc.60>:
     e5e:	83 9a       	sbi	0x10, 3	; 16

00000e60 <.LBB3>:
    }

    for(int i = MotorRightStartpin; i < MotorRightStartpin+4; i++){
        MotorRightDDR |= (1<<i);
     e60:	84 9a       	sbi	0x10, 4	; 16

00000e62 <.Loc.69>:
     e62:	85 9a       	sbi	0x10, 5	; 16

00000e64 <.Loc.73>:
     e64:	86 9a       	sbi	0x10, 6	; 16

00000e66 <.Loc.77>:
     e66:	87 9a       	sbi	0x10, 7	; 16

00000e68 <.LBE3>:
    }
}
     e68:	08 95       	ret

00000e6a <initSteppermotorAVRDriver>:
    initMotorpins();
     e6a:	0e 94 2c 07 	call	0xe58	; 0xe58 <initMotorpins>

00000e6e <.LVL21>:
    init_timer();
     e6e:	0e 94 20 07 	call	0xe40	; 0xe40 <init_timer>

00000e72 <.LVL22>:
    setBothStepperMode(Off);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 0d 07 	call	0xe1a	; 0xe1a <setBothStepperMode>

00000e7a <.LVL23>:
}
     e7a:	08 95       	ret

00000e7c <LeftStepperNextStep>:

void LeftStepperNextStep(){
    static int position = 0;
    MotorLeftPort &= ~(0b1111<< MotorLeftStartpin);
     e7c:	81 b3       	in	r24, 0x11	; 17
     e7e:	80 7f       	andi	r24, 0xF0	; 240
     e80:	81 bb       	out	0x11, r24	; 17

00000e82 <.Loc.93>:
    MotorLeftPort |= ((*leftMotorLoop)[position] << MotorLeftStartpin);
     e82:	81 b3       	in	r24, 0x11	; 17

00000e84 <.Loc.94>:
     e84:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <leftMotorLoop>
     e88:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <leftMotorLoop+0x1>
     e8c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <position.1>
     e90:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <position.1+0x1>
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19

00000e9c <.Loc.95>:
     e9c:	90 81       	ld	r25, Z
     e9e:	89 2b       	or	r24, r25
     ea0:	81 bb       	out	0x11, r24	; 17

00000ea2 <.Loc.96>:
    position++;
     ea2:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <position.1>
     ea6:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <position.1+0x1>
     eaa:	9c 01       	movw	r18, r24
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255

00000eb0 <.Loc.98>:
    if(position == LoopLength) position = 0;
     eb0:	07 97       	sbiw	r24, 0x07	; 7
     eb2:	29 f0       	breq	.+10     	; 0xebe <.L17>

00000eb4 <.L15>:
    position++;
     eb4:	30 93 5f 02 	sts	0x025F, r19	; 0x80025f <position.1+0x1>
     eb8:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <position.1>

00000ebc <.Loc.101>:
}
     ebc:	08 95       	ret

00000ebe <.L17>:
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	f8 cf       	rjmp	.-16     	; 0xeb4 <.L15>

00000ec4 <RightStepperNextStep>:

void RightStepperNextStep(){
    static int position = 0;
    MotorRightPort &= ~(0b1111<<MotorRightStartpin);
     ec4:	81 b3       	in	r24, 0x11	; 17
     ec6:	8f 70       	andi	r24, 0x0F	; 15
     ec8:	81 bb       	out	0x11, r24	; 17

00000eca <.Loc.106>:
    MotorRightPort |= ((*rightMotorLoop)[position] << MotorRightStartpin);
     eca:	81 b3       	in	r24, 0x11	; 17

00000ecc <.Loc.107>:
     ecc:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <rightMotorLoop>
     ed0:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <rightMotorLoop+0x1>
     ed4:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <position.0>
     ed8:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <position.0+0x1>
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	e2 0f       	add	r30, r18
     ee2:	f3 1f       	adc	r31, r19

00000ee4 <.Loc.108>:
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
     ee8:	22 95       	swap	r18
     eea:	32 95       	swap	r19
     eec:	30 7f       	andi	r19, 0xF0	; 240
     eee:	32 27       	eor	r19, r18
     ef0:	20 7f       	andi	r18, 0xF0	; 240
     ef2:	32 27       	eor	r19, r18

00000ef4 <.Loc.109>:
     ef4:	82 2b       	or	r24, r18
     ef6:	81 bb       	out	0x11, r24	; 17

00000ef8 <.Loc.110>:
    position++;
     ef8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <position.0>
     efc:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <position.0+0x1>
     f00:	9c 01       	movw	r18, r24
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255

00000f06 <.Loc.112>:
    if(position == LoopLength) position = 0;
     f06:	07 97       	sbiw	r24, 0x07	; 7
     f08:	29 f0       	breq	.+10     	; 0xf14 <.L21>

00000f0a <.L19>:
    position++;
     f0a:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <position.0+0x1>
     f0e:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <position.0>

00000f12 <.Loc.115>:
}
     f12:	08 95       	ret

00000f14 <.L21>:
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f8 cf       	rjmp	.-16     	; 0xf0a <.L19>

00000f1a <__vector_23>:


ISR(TIMER0_OVF_vect){
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31

00000f40 <.Loc.117>:
    if(leftMotorEnabled) LeftStepperNextStep();
     f40:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <leftMotorEnabled>
     f44:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <leftMotorEnabled+0x1>
     f48:	89 2b       	or	r24, r25
     f4a:	d9 f4       	brne	.+54     	; 0xf82 <.L25>

00000f4c <.L23>:
    if(rightMotorEnabled) RightStepperNextStep();
     f4c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rightMotorEnabled>
     f50:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <rightMotorEnabled+0x1>
     f54:	89 2b       	or	r24, r25
     f56:	c1 f4       	brne	.+48     	; 0xf88 <.L26>

00000f58 <.L24>:

    TCNT0 = 6;
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	86 bd       	out	0x26, r24	; 38

00000f5c <.Loc.123>:
}
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0b be       	out	0x3b, r0	; 59
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <.L25>:
    if(leftMotorEnabled) LeftStepperNextStep();
     f82:	0e 94 3e 07 	call	0xe7c	; 0xe7c <LeftStepperNextStep>

00000f86 <.LVL24>:
     f86:	e2 cf       	rjmp	.-60     	; 0xf4c <.L23>

00000f88 <.L26>:
    if(rightMotorEnabled) RightStepperNextStep();
     f88:	0e 94 62 07 	call	0xec4	; 0xec4 <RightStepperNextStep>

00000f8c <.LVL25>:
     f8c:	e5 cf       	rjmp	.-54     	; 0xf58 <.L24>

00000f8e <getLeftSensorValue>:
int RightSensorArray[ValueArrayLength];


#define MaxDistanceOffset 4
int getLeftSensorValue(){
    int highestValue = LeftSensorArray[0];
     f8e:	e6 e6       	ldi	r30, 0x66	; 102
     f90:	f2 e0       	ldi	r31, 0x02	; 2
     f92:	20 81       	ld	r18, Z
     f94:	31 81       	ldd	r19, Z+1	; 0x01

00000f96 <.LBB2>:
    int lowestValue = LeftSensorArray[0];
    for(int i = 0; i < ValueArrayLength; i++){
        if(LeftSensorArray[i] > highestValue) highestValue = LeftSensorArray[i];
     f96:	42 81       	ldd	r20, Z+2	; 0x02
     f98:	53 81       	ldd	r21, Z+3	; 0x03

00000f9a <.Loc.13>:
     f9a:	64 81       	ldd	r22, Z+4	; 0x04
     f9c:	75 81       	ldd	r23, Z+5	; 0x05

00000f9e <.Loc.18>:
        if(LeftSensorArray[i] < lowestValue) lowestValue = LeftSensorArray[i];
     f9e:	f2 2f       	mov	r31, r18
     fa0:	e3 2f       	mov	r30, r19
     fa2:	42 17       	cp	r20, r18
     fa4:	53 07       	cpc	r21, r19
     fa6:	14 f4       	brge	.+4      	; 0xfac <.L2>
     fa8:	f4 2f       	mov	r31, r20
     faa:	e5 2f       	mov	r30, r21

00000fac <.L2>:
     fac:	8f 2f       	mov	r24, r31
     fae:	9e 2f       	mov	r25, r30
     fb0:	68 17       	cp	r22, r24
     fb2:	79 07       	cpc	r23, r25
     fb4:	0c f4       	brge	.+2      	; 0xfb8 <.L3>
     fb6:	cb 01       	movw	r24, r22

00000fb8 <.L3>:
    }

    if((highestValue - lowestValue) <= MaxDistanceOffset) {
     fb8:	24 17       	cp	r18, r20
     fba:	35 07       	cpc	r19, r21
     fbc:	0c f4       	brge	.+2      	; 0xfc0 <.L5>
     fbe:	9a 01       	movw	r18, r20

00000fc0 <.L5>:
     fc0:	26 17       	cp	r18, r22
     fc2:	37 07       	cpc	r19, r23
     fc4:	0c f4       	brge	.+2      	; 0xfc8 <.L6>
     fc6:	9b 01       	movw	r18, r22

00000fc8 <.L6>:
     fc8:	28 1b       	sub	r18, r24
     fca:	39 0b       	sbc	r19, r25

00000fcc <.Loc.24>:
     fcc:	25 30       	cpi	r18, 0x05	; 5
     fce:	31 05       	cpc	r19, r1
     fd0:	14 f0       	brlt	.+4      	; 0xfd6 <.L1>

00000fd2 <.Loc.25>:
        return lowestValue;
    }
    return 100;
     fd2:	84 e6       	ldi	r24, 0x64	; 100
     fd4:	90 e0       	ldi	r25, 0x00	; 0

00000fd6 <.L1>:
}
     fd6:	08 95       	ret

00000fd8 <getRightSensorValue>:

int getRightSensorValue(){
    int highestValue = RightSensorArray[0];
     fd8:	e0 e6       	ldi	r30, 0x60	; 96
     fda:	f2 e0       	ldi	r31, 0x02	; 2
     fdc:	20 81       	ld	r18, Z
     fde:	31 81       	ldd	r19, Z+1	; 0x01

00000fe0 <.LBB3>:
    int lowestValue = RightSensorArray[0];
    for(int i = 0; i < ValueArrayLength; i++){
        if(RightSensorArray[i] > highestValue) highestValue = RightSensorArray[i];
     fe0:	42 81       	ldd	r20, Z+2	; 0x02
     fe2:	53 81       	ldd	r21, Z+3	; 0x03

00000fe4 <.Loc.40>:
     fe4:	64 81       	ldd	r22, Z+4	; 0x04
     fe6:	75 81       	ldd	r23, Z+5	; 0x05

00000fe8 <.Loc.45>:
        if(RightSensorArray[i] < lowestValue) lowestValue = RightSensorArray[i];
     fe8:	f2 2f       	mov	r31, r18
     fea:	e3 2f       	mov	r30, r19
     fec:	42 17       	cp	r20, r18
     fee:	53 07       	cpc	r21, r19
     ff0:	14 f4       	brge	.+4      	; 0xff6 <.L8>
     ff2:	f4 2f       	mov	r31, r20
     ff4:	e5 2f       	mov	r30, r21

00000ff6 <.L8>:
     ff6:	8f 2f       	mov	r24, r31
     ff8:	9e 2f       	mov	r25, r30
     ffa:	68 17       	cp	r22, r24
     ffc:	79 07       	cpc	r23, r25
     ffe:	0c f4       	brge	.+2      	; 0x1002 <.L9>
    1000:	cb 01       	movw	r24, r22

00001002 <.L9>:
    }

    if((highestValue - lowestValue) <= MaxDistanceOffset) {
    1002:	24 17       	cp	r18, r20
    1004:	35 07       	cpc	r19, r21
    1006:	0c f4       	brge	.+2      	; 0x100a <.L11>
    1008:	9a 01       	movw	r18, r20

0000100a <.L11>:
    100a:	26 17       	cp	r18, r22
    100c:	37 07       	cpc	r19, r23
    100e:	0c f4       	brge	.+2      	; 0x1012 <.L12>
    1010:	9b 01       	movw	r18, r22

00001012 <.L12>:
    1012:	28 1b       	sub	r18, r24
    1014:	39 0b       	sbc	r19, r25

00001016 <.Loc.51>:
    1016:	25 30       	cpi	r18, 0x05	; 5
    1018:	31 05       	cpc	r19, r1
    101a:	14 f0       	brlt	.+4      	; 0x1020 <.L7>

0000101c <.Loc.52>:
        return lowestValue;
    }
    return 100;
    101c:	84 e6       	ldi	r24, 0x64	; 100
    101e:	90 e0       	ldi	r25, 0x00	; 0

00001020 <.L7>:
}
    1020:	08 95       	ret

00001022 <agv_ultrasoon_init>:

void agv_ultrasoon_init()
{
    cli();
    1022:	f8 94       	cli

00001024 <.Loc.56>:
    TCCR3A |= (1<<COM3A1) | (1<<WGM31);
    1024:	e0 e9       	ldi	r30, 0x90	; 144
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z

0000102a <.Loc.57>:
    102a:	82 68       	ori	r24, 0x82	; 130
    102c:	80 83       	st	Z, r24

0000102e <.Loc.58>:
    TCCR3B |= (1<<WGM33) | (1<<CS31) | (1<<WGM32);//wgm33 wgm32 wgm31
    102e:	e1 e9       	ldi	r30, 0x91	; 145
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z

00001034 <.Loc.59>:
    1034:	8a 61       	ori	r24, 0x1A	; 26
    1036:	80 83       	st	Z, r24

00001038 <.Loc.60>:
    ICR3 = 32768;
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e8       	ldi	r25, 0x80	; 128
    103c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
    1040:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>

00001044 <.Loc.62>:
    OCR3A = 20;//10microsec
    1044:	84 e1       	ldi	r24, 0x14	; 20
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    104c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00001050 <.Loc.64>:
    OCR3B = 4850;// (10microsec + 480microsec+ marge) *2
    1050:	82 ef       	ldi	r24, 0xF2	; 242
    1052:	92 e1       	ldi	r25, 0x12	; 18
    1054:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    1058:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>

0000105c <.Loc.66>:
    DDRE |= (1<<PE3);
    105c:	6b 9a       	sbi	0x0d, 3	; 13

0000105e <.Loc.68>:
    TIMSK3 |= (1<<ICIE3) | (1<<OCIE3B);
    105e:	e1 e7       	ldi	r30, 0x71	; 113
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z

00001064 <.Loc.69>:
    1064:	84 62       	ori	r24, 0x24	; 36
    1066:	80 83       	st	Z, r24

00001068 <.Loc.70>:
    //pin change interrupt:
    PCICR |= (1<<PCIE2);//enables pci 16 tot 23
    1068:	e8 e6       	ldi	r30, 0x68	; 104
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z

0000106e <.Loc.71>:
    106e:	84 60       	ori	r24, 0x04	; 4
    1070:	80 83       	st	Z, r24

00001072 <.Loc.72>:
    sei();
    1072:	78 94       	sei

00001074 <.Loc.73>:
}
    1074:	08 95       	ret

00001076 <filterDistance>:

int filterDistance(int distance){
    1076:	28 2f       	mov	r18, r24
    1078:	39 2f       	mov	r19, r25

0000107a <.Loc.76>:
    //Alle waardes boven 200 zijn bs anyways
    if(distance == 561){
    107a:	21 33       	cpi	r18, 0x31	; 49
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	38 07       	cpc	r19, r24

00001080 <.Loc.78>:
    1080:	31 f0       	breq	.+12     	; 0x108e <.L16>

00001082 <.Loc.79>:
        distance = 2;
    } else if(distance >= 500){
    1082:	24 3f       	cpi	r18, 0xF4	; 244
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	38 07       	cpc	r19, r24
    1088:	2c f4       	brge	.+10     	; 0x1094 <.L17>
    108a:	82 2f       	mov	r24, r18
    108c:	08 95       	ret

0000108e <.L16>:
        distance = 2;
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	08 95       	ret

00001094 <.L17>:
        distance = 100;
    1094:	84 e6       	ldi	r24, 0x64	; 100
    1096:	90 e0       	ldi	r25, 0x00	; 0

00001098 <.Loc.83>:
    }
    return distance;
}
    1098:	08 95       	ret

0000109a <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    109a:	8f 93       	push	r24
    109c:	8f b7       	in	r24, 0x3f	; 63
    109e:	8f 93       	push	r24
    10a0:	8b b7       	in	r24, 0x3b	; 59
    10a2:	8f 93       	push	r24
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31

000010a8 <.Loc.86>:
    agv_ultrasoon_current_sensor = (agv_ultrasoon_current_sensor<<1);
    10a8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>
    10ac:	88 0f       	add	r24, r24

000010ae <.Loc.88>:
    10ae:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <agv_ultrasoon_current_sensor>

000010b2 <.Loc.89>:
    if (agv_ultrasoon_current_sensor == (1<<5))//0b00100000
    10b2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

000010b6 <.Loc.91>:
    10b6:	80 32       	cpi	r24, 0x20	; 32
    10b8:	a9 f0       	breq	.+42     	; 0x10e4 <.L21>

000010ba <.L19>:
    {
        agv_ultrasoon_current_sensor = 2;

    }
    if(agv_ultrasoon_current_sensor == (1<<3)) agv_ultrasoon_current_sensor = (1<<4);
    10ba:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

000010be <.Loc.94>:
    10be:	88 30       	cpi	r24, 0x08	; 8
    10c0:	a9 f0       	breq	.+42     	; 0x10ec <.L22>

000010c2 <.L20>:
    PCMSK2 = agv_ultrasoon_current_sensor;
    10c2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>
    10c6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

000010ca <.Loc.97>:
    //PORTA = agv_ultrasoon_current_sensor;
    TIMSK3 |= (1<<OCIE3B);
    10ca:	e1 e7       	ldi	r30, 0x71	; 113
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z

000010d0 <.Loc.98>:
    10d0:	84 60       	ori	r24, 0x04	; 4
    10d2:	80 83       	st	Z, r24

000010d4 <.Loc.99>:
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	8f 91       	pop	r24
    10da:	8b bf       	out	0x3b, r24	; 59
    10dc:	8f 91       	pop	r24
    10de:	8f bf       	out	0x3f, r24	; 63
    10e0:	8f 91       	pop	r24
    10e2:	18 95       	reti

000010e4 <.L21>:
        agv_ultrasoon_current_sensor = 2;
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <agv_ultrasoon_current_sensor>
    10ea:	e7 cf       	rjmp	.-50     	; 0x10ba <.L19>

000010ec <.L22>:
    if(agv_ultrasoon_current_sensor == (1<<3)) agv_ultrasoon_current_sensor = (1<<4);
    10ec:	80 e1       	ldi	r24, 0x10	; 16
    10ee:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <agv_ultrasoon_current_sensor>
    10f2:	e7 cf       	rjmp	.-50     	; 0x10c2 <.L20>

000010f4 <__vector_31>:

volatile static int arrayPositionLeft = 0;
volatile static int arrayPositionRight = 0;
ISR(TIMER3_CAPT_vect)
{
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	0b b6       	in	r0, 0x3b	; 59
    1100:	0f 92       	push	r0
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <L0^A>

00001120 <L0^A>:
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62

00001126 <.Loc.105>:
    //zet max naar sensorwaarde
    if(agv_ultrasoon_current_sensor == 0b00000010)
    1126:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

0000112a <.Loc.107>:
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	f1 f1       	breq	.+124    	; 0x11aa <.L27>

0000112e <.Loc.108>:
    {
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
    112e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

00001132 <.Loc.110>:
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	09 f4       	brne	.+2      	; 0x1138 <.Loc.111>

00001136 <L0^A>:
    1136:	87 c0       	rjmp	.+270    	; 0x1246 <.L28>

00001138 <.Loc.111>:
    {
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;

    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
    1138:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

0000113c <.Loc.113>:
    113c:	80 31       	cpi	r24, 0x10	; 16
    113e:	09 f0       	breq	.+2      	; 0x1142 <.Loc.114>

00001140 <L0^A>:
    1140:	67 c0       	rjmp	.+206    	; 0x1210 <.L25>

00001142 <.Loc.114>:
    {
        agv_ultrasoon_voor_midden = (ICR3 - 4454)/4*0.0343;
    1142:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    1146:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

0000114a <.Loc.116>:
    114a:	86 56       	subi	r24, 0x66	; 102
    114c:	91 41       	sbci	r25, 0x11	; 17

0000114e <.Loc.117>:
    114e:	96 95       	lsr	r25
    1150:	87 95       	ror	r24
    1152:	96 95       	lsr	r25
    1154:	87 95       	ror	r24

00001156 <.Loc.118>:
    1156:	9c 01       	movw	r18, r24
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	ca 01       	movw	r24, r20
    1166:	b9 01       	movw	r22, r18
    1168:	0e 94 04 0b 	call	0x1608	; 0x1608 <__floatunsisf>

0000116c <.LVL15>:
    116c:	28 e2       	ldi	r18, 0x28	; 40
    116e:	3e e7       	ldi	r19, 0x7E	; 126
    1170:	4c e0       	ldi	r20, 0x0C	; 12
    1172:	5d e3       	ldi	r21, 0x3D	; 61
    1174:	69 83       	std	Y+1, r22	; 0x01
    1176:	7a 83       	std	Y+2, r23	; 0x02
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	69 81       	ldd	r22, Y+1	; 0x01
    117e:	7a 81       	ldd	r23, Y+2	; 0x02
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>

00001188 <.LVL16>:
    1188:	69 83       	std	Y+1, r22	; 0x01
    118a:	7a 83       	std	Y+2, r23	; 0x02
    118c:	8b 83       	std	Y+3, r24	; 0x03
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	69 81       	ldd	r22, Y+1	; 0x01
    1192:	7a 81       	ldd	r23, Y+2	; 0x02
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixunssfsi>

0000119c <.LVL17>:
    119c:	46 2f       	mov	r20, r22
    119e:	57 2f       	mov	r21, r23
    11a0:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <agv_ultrasoon_voor_midden+0x1>
    11a4:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <agv_ultrasoon_voor_midden>
    11a8:	33 c0       	rjmp	.+102    	; 0x1210 <.L25>

000011aa <.L27>:
        agv_ultrasoon_boom_rechts = (ICR3 - 4454)/4*0.0343;
    11aa:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    11ae:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

000011b2 <.Loc.122>:
    11b2:	86 56       	subi	r24, 0x66	; 102
    11b4:	91 41       	sbci	r25, 0x11	; 17

000011b6 <.Loc.123>:
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	96 95       	lsr	r25
    11bc:	87 95       	ror	r24

000011be <.Loc.124>:
    11be:	9c 01       	movw	r18, r24
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	29 83       	std	Y+1, r18	; 0x01
    11c6:	3a 83       	std	Y+2, r19	; 0x02
    11c8:	4b 83       	std	Y+3, r20	; 0x03
    11ca:	5c 83       	std	Y+4, r21	; 0x04
    11cc:	ca 01       	movw	r24, r20
    11ce:	b9 01       	movw	r22, r18
    11d0:	0e 94 04 0b 	call	0x1608	; 0x1608 <__floatunsisf>

000011d4 <.LVL18>:
    11d4:	28 e2       	ldi	r18, 0x28	; 40
    11d6:	3e e7       	ldi	r19, 0x7E	; 126
    11d8:	4c e0       	ldi	r20, 0x0C	; 12
    11da:	5d e3       	ldi	r21, 0x3D	; 61
    11dc:	69 83       	std	Y+1, r22	; 0x01
    11de:	7a 83       	std	Y+2, r23	; 0x02
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	69 81       	ldd	r22, Y+1	; 0x01
    11e6:	7a 81       	ldd	r23, Y+2	; 0x02
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>

000011f0 <.LVL19>:
    11f0:	69 83       	std	Y+1, r22	; 0x01
    11f2:	7a 83       	std	Y+2, r23	; 0x02
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	69 81       	ldd	r22, Y+1	; 0x01
    11fa:	7a 81       	ldd	r23, Y+2	; 0x02
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixunssfsi>

00001204 <.LVL20>:
    1204:	46 2f       	mov	r20, r22
    1206:	57 2f       	mov	r21, r23
    1208:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>
    120c:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <agv_ultrasoon_boom_rechts>

00001210 <.L25>:
    }
    PCMSK2 = 0;
    1210:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

00001214 <.Loc.128>:

}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0b be       	out	0x3b, r0	; 59
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <.L28>:
        agv_ultrasoon_boom_links = (ICR3 - 4454)/4*0.0343;
    1246:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
    124a:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>

0000124e <.Loc.131>:
    124e:	86 56       	subi	r24, 0x66	; 102
    1250:	91 41       	sbci	r25, 0x11	; 17

00001252 <.Loc.132>:
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24

0000125a <.Loc.133>:
    125a:	9c 01       	movw	r18, r24
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	29 83       	std	Y+1, r18	; 0x01
    1262:	3a 83       	std	Y+2, r19	; 0x02
    1264:	4b 83       	std	Y+3, r20	; 0x03
    1266:	5c 83       	std	Y+4, r21	; 0x04
    1268:	ca 01       	movw	r24, r20
    126a:	b9 01       	movw	r22, r18
    126c:	0e 94 04 0b 	call	0x1608	; 0x1608 <__floatunsisf>

00001270 <.LVL21>:
    1270:	28 e2       	ldi	r18, 0x28	; 40
    1272:	3e e7       	ldi	r19, 0x7E	; 126
    1274:	4c e0       	ldi	r20, 0x0C	; 12
    1276:	5d e3       	ldi	r21, 0x3D	; 61
    1278:	69 83       	std	Y+1, r22	; 0x01
    127a:	7a 83       	std	Y+2, r23	; 0x02
    127c:	8b 83       	std	Y+3, r24	; 0x03
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	69 81       	ldd	r22, Y+1	; 0x01
    1282:	7a 81       	ldd	r23, Y+2	; 0x02
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>

0000128c <.LVL22>:
    128c:	69 83       	std	Y+1, r22	; 0x01
    128e:	7a 83       	std	Y+2, r23	; 0x02
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	69 81       	ldd	r22, Y+1	; 0x01
    1296:	7a 81       	ldd	r23, Y+2	; 0x02
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixunssfsi>

000012a0 <.LVL23>:
    12a0:	46 2f       	mov	r20, r22
    12a2:	57 2f       	mov	r21, r23
    12a4:	50 93 71 02 	sts	0x0271, r21	; 0x800271 <agv_ultrasoon_boom_links+0x1>
    12a8:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <agv_ultrasoon_boom_links>
    12ac:	b1 cf       	rjmp	.-158    	; 0x1210 <.L25>

000012ae <__vector_11>:

ISR(PCINT2_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	0b b6       	in	r0, 0x3b	; 59
    12ba:	0f 92       	push	r0
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	00 d0       	rcall	.+0      	; 0x12da <L0^A>

000012da <L0^A>:
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62

000012e0 <.Loc.136>:
    if(agv_ultrasoon_current_sensor == 0b00000010)
    12e0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

000012e4 <.Loc.138>:
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	09 f4       	brne	.+2      	; 0x12ea <.Loc.139>

000012e8 <L0^A>:
    12e8:	4b c0       	rjmp	.+150    	; 0x1380 <.L37>

000012ea <.Loc.139>:
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
        agv_ultrasoon_boom_rechts = filterDistance(agv_ultrasoon_boom_rechts);
        if(agv_ultrasoon_boom_rechts != 0) RightSensorArray[arrayPositionRight++] = agv_ultrasoon_boom_rechts;
        PORTA &= ~(0b00000001);
    }
    else if(agv_ultrasoon_current_sensor == 0b00000100)
    12ea:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

000012ee <.Loc.141>:
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <.Loc.142>

000012f2 <L0^A>:
    12f2:	d6 c0       	rjmp	.+428    	; 0x14a0 <.L38>

000012f4 <.Loc.142>:
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
        agv_ultrasoon_boom_links = filterDistance(agv_ultrasoon_boom_links);
        if(agv_ultrasoon_boom_links != 0) LeftSensorArray[arrayPositionLeft++] = agv_ultrasoon_boom_links;
        PORTA &= ~(0b00000010);
    }
    else if(agv_ultrasoon_current_sensor == 0b00010000)
    12f4:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <agv_ultrasoon_current_sensor>

000012f8 <.Loc.144>:
    12f8:	80 31       	cpi	r24, 0x10	; 16
    12fa:	09 f0       	breq	.+2      	; 0x12fe <.Loc.145>

000012fc <L0^A>:
    12fc:	9d c0       	rjmp	.+314    	; 0x1438 <.L32>

000012fe <.Loc.145>:
    {
        agv_ultrasoon_voor_midden = (TCNT3 - 4454)/4*0.0343;
    12fe:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1302:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001306 <.Loc.147>:
    1306:	86 56       	subi	r24, 0x66	; 102
    1308:	91 41       	sbci	r25, 0x11	; 17

0000130a <.Loc.148>:
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24

00001312 <.Loc.149>:
    1312:	9c 01       	movw	r18, r24
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	29 83       	std	Y+1, r18	; 0x01
    131a:	3a 83       	std	Y+2, r19	; 0x02
    131c:	4b 83       	std	Y+3, r20	; 0x03
    131e:	5c 83       	std	Y+4, r21	; 0x04
    1320:	ca 01       	movw	r24, r20
    1322:	b9 01       	movw	r22, r18
    1324:	0e 94 04 0b 	call	0x1608	; 0x1608 <__floatunsisf>

00001328 <.LVL24>:
    1328:	28 e2       	ldi	r18, 0x28	; 40
    132a:	3e e7       	ldi	r19, 0x7E	; 126
    132c:	4c e0       	ldi	r20, 0x0C	; 12
    132e:	5d e3       	ldi	r21, 0x3D	; 61
    1330:	69 83       	std	Y+1, r22	; 0x01
    1332:	7a 83       	std	Y+2, r23	; 0x02
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	69 81       	ldd	r22, Y+1	; 0x01
    133a:	7a 81       	ldd	r23, Y+2	; 0x02
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>

00001344 <.LVL25>:
    1344:	69 83       	std	Y+1, r22	; 0x01
    1346:	7a 83       	std	Y+2, r23	; 0x02
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	69 81       	ldd	r22, Y+1	; 0x01
    134e:	7a 81       	ldd	r23, Y+2	; 0x02
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixunssfsi>

00001358 <.LVL26>:
    1358:	46 2f       	mov	r20, r22
    135a:	57 2f       	mov	r21, r23
    135c:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <agv_ultrasoon_voor_midden+0x1>
    1360:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <agv_ultrasoon_voor_midden>

00001364 <.Loc.151>:
        agv_ultrasoon_voor_midden = filterDistance(agv_ultrasoon_voor_midden);
    1364:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <agv_ultrasoon_voor_midden>
    1368:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <agv_ultrasoon_voor_midden+0x1>
    136c:	0e 94 3b 08 	call	0x1076	; 0x1076 <filterDistance>

00001370 <.LVL27>:
    1370:	28 2f       	mov	r18, r24
    1372:	39 2f       	mov	r19, r25

00001374 <.Loc.153>:
    1374:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <agv_ultrasoon_voor_midden+0x1>
    1378:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <agv_ultrasoon_voor_midden>

0000137c <.Loc.154>:
        PORTA &= ~(0b00001000);
    137c:	13 98       	cbi	0x02, 3	; 2
    137e:	5c c0       	rjmp	.+184    	; 0x1438 <.L32>

00001380 <.L37>:
        agv_ultrasoon_boom_rechts = (TCNT3 - 4454)/4*0.0343;
    1380:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    1384:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

00001388 <.Loc.158>:
    1388:	86 56       	subi	r24, 0x66	; 102
    138a:	91 41       	sbci	r25, 0x11	; 17

0000138c <.Loc.159>:
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24

00001394 <.Loc.160>:
    1394:	9c 01       	movw	r18, r24
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	29 83       	std	Y+1, r18	; 0x01
    139c:	3a 83       	std	Y+2, r19	; 0x02
    139e:	4b 83       	std	Y+3, r20	; 0x03
    13a0:	5c 83       	std	Y+4, r21	; 0x04
    13a2:	ca 01       	movw	r24, r20
    13a4:	b9 01       	movw	r22, r18
    13a6:	0e 94 04 0b 	call	0x1608	; 0x1608 <__floatunsisf>

000013aa <.LVL28>:
    13aa:	28 e2       	ldi	r18, 0x28	; 40
    13ac:	3e e7       	ldi	r19, 0x7E	; 126
    13ae:	4c e0       	ldi	r20, 0x0C	; 12
    13b0:	5d e3       	ldi	r21, 0x3D	; 61
    13b2:	69 83       	std	Y+1, r22	; 0x01
    13b4:	7a 83       	std	Y+2, r23	; 0x02
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	69 81       	ldd	r22, Y+1	; 0x01
    13bc:	7a 81       	ldd	r23, Y+2	; 0x02
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>

000013c6 <.LVL29>:
    13c6:	69 83       	std	Y+1, r22	; 0x01
    13c8:	7a 83       	std	Y+2, r23	; 0x02
    13ca:	8b 83       	std	Y+3, r24	; 0x03
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	69 81       	ldd	r22, Y+1	; 0x01
    13d0:	7a 81       	ldd	r23, Y+2	; 0x02
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixunssfsi>

000013da <.LVL30>:
    13da:	46 2f       	mov	r20, r22
    13dc:	57 2f       	mov	r21, r23
    13de:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>
    13e2:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <agv_ultrasoon_boom_rechts>

000013e6 <.Loc.162>:
        agv_ultrasoon_boom_rechts = filterDistance(agv_ultrasoon_boom_rechts);
    13e6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <agv_ultrasoon_boom_rechts>
    13ea:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>
    13ee:	0e 94 3b 08 	call	0x1076	; 0x1076 <filterDistance>

000013f2 <.LVL31>:
    13f2:	28 2f       	mov	r18, r24
    13f4:	39 2f       	mov	r19, r25

000013f6 <.Loc.164>:
    13f6:	30 93 6f 02 	sts	0x026F, r19	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>
    13fa:	20 93 6e 02 	sts	0x026E, r18	; 0x80026e <agv_ultrasoon_boom_rechts>

000013fe <.Loc.165>:
        if(agv_ultrasoon_boom_rechts != 0) RightSensorArray[arrayPositionRight++] = agv_ultrasoon_boom_rechts;
    13fe:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <agv_ultrasoon_boom_rechts>
    1402:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>

00001406 <.Loc.167>:
    1406:	89 2b       	or	r24, r25
    1408:	b1 f0       	breq	.+44     	; 0x1436 <.L31>

0000140a <.Loc.168>:
    140a:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <agv_ultrasoon_boom_rechts>
    140e:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <agv_ultrasoon_boom_rechts+0x1>

00001412 <.Loc.170>:
    1412:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <arrayPositionRight>
    1416:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <arrayPositionRight+0x1>
    141a:	ac 01       	movw	r20, r24
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <arrayPositionRight+0x1>
    1424:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <arrayPositionRight>

00001428 <.Loc.171>:
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	fc 01       	movw	r30, r24
    142e:	e0 5a       	subi	r30, 0xA0	; 160
    1430:	fd 4f       	sbci	r31, 0xFD	; 253
    1432:	31 83       	std	Z+1, r19	; 0x01
    1434:	20 83       	st	Z, r18

00001436 <.L31>:
        PORTA &= ~(0b00000001);
    1436:	10 98       	cbi	0x02, 0	; 2

00001438 <.L32>:
    }

    if(arrayPositionLeft >= ValueArrayLength) arrayPositionLeft = 0;
    1438:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <arrayPositionLeft>
    143c:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <arrayPositionLeft+0x1>

00001440 <.Loc.176>:
    1440:	03 97       	sbiw	r24, 0x03	; 3
    1442:	24 f0       	brlt	.+8      	; 0x144c <.L35>

00001444 <.Loc.177>:
    1444:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <arrayPositionLeft+0x1>
    1448:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <arrayPositionLeft>

0000144c <.L35>:
    if(arrayPositionRight >= ValueArrayLength) arrayPositionRight = 0;
    144c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <arrayPositionRight>
    1450:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <arrayPositionRight+0x1>

00001454 <.Loc.181>:
    1454:	03 97       	sbiw	r24, 0x03	; 3
    1456:	24 f0       	brlt	.+8      	; 0x1460 <.L36>

00001458 <.Loc.182>:
    1458:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <arrayPositionRight+0x1>
    145c:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <arrayPositionRight>

00001460 <.L36>:

    //check welke sensor en schrijf timer3 waarde naar sensorwaarde
    TIMSK3 &= ~(1<<ICIE3);
    1460:	e1 e7       	ldi	r30, 0x71	; 113
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	80 83       	st	Z, r24

0000146a <.Loc.186>:
    //zet timer3 overflow flag uit
    PCMSK2 = 0;
    146a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>

0000146e <.Loc.188>:
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0b be       	out	0x3b, r0	; 59
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <.L38>:
        agv_ultrasoon_boom_links = (TCNT3 - 4454)/4*0.0343;
    14a0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    14a4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>

000014a8 <.Loc.191>:
    14a8:	86 56       	subi	r24, 0x66	; 102
    14aa:	91 41       	sbci	r25, 0x11	; 17

000014ac <.Loc.192>:
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24

000014b4 <.Loc.193>:
    14b4:	9c 01       	movw	r18, r24
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	29 83       	std	Y+1, r18	; 0x01
    14bc:	3a 83       	std	Y+2, r19	; 0x02
    14be:	4b 83       	std	Y+3, r20	; 0x03
    14c0:	5c 83       	std	Y+4, r21	; 0x04
    14c2:	ca 01       	movw	r24, r20
    14c4:	b9 01       	movw	r22, r18
    14c6:	0e 94 04 0b 	call	0x1608	; 0x1608 <__floatunsisf>

000014ca <.LVL32>:
    14ca:	28 e2       	ldi	r18, 0x28	; 40
    14cc:	3e e7       	ldi	r19, 0x7E	; 126
    14ce:	4c e0       	ldi	r20, 0x0C	; 12
    14d0:	5d e3       	ldi	r21, 0x3D	; 61
    14d2:	69 83       	std	Y+1, r22	; 0x01
    14d4:	7a 83       	std	Y+2, r23	; 0x02
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	69 81       	ldd	r22, Y+1	; 0x01
    14dc:	7a 81       	ldd	r23, Y+2	; 0x02
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__mulsf3>

000014e6 <.LVL33>:
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	69 81       	ldd	r22, Y+1	; 0x01
    14f0:	7a 81       	ldd	r23, Y+2	; 0x02
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__fixunssfsi>

000014fa <.LVL34>:
    14fa:	46 2f       	mov	r20, r22
    14fc:	57 2f       	mov	r21, r23
    14fe:	50 93 71 02 	sts	0x0271, r21	; 0x800271 <agv_ultrasoon_boom_links+0x1>
    1502:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <agv_ultrasoon_boom_links>

00001506 <.Loc.195>:
        agv_ultrasoon_boom_links = filterDistance(agv_ultrasoon_boom_links);
    1506:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <agv_ultrasoon_boom_links>
    150a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <agv_ultrasoon_boom_links+0x1>
    150e:	0e 94 3b 08 	call	0x1076	; 0x1076 <filterDistance>

00001512 <.LVL35>:
    1512:	28 2f       	mov	r18, r24
    1514:	39 2f       	mov	r19, r25

00001516 <.Loc.197>:
    1516:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <agv_ultrasoon_boom_links+0x1>
    151a:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <agv_ultrasoon_boom_links>

0000151e <.Loc.198>:
        if(agv_ultrasoon_boom_links != 0) LeftSensorArray[arrayPositionLeft++] = agv_ultrasoon_boom_links;
    151e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <agv_ultrasoon_boom_links>
    1522:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <agv_ultrasoon_boom_links+0x1>

00001526 <.Loc.200>:
    1526:	89 2b       	or	r24, r25
    1528:	b1 f0       	breq	.+44     	; 0x1556 <.L34>

0000152a <.Loc.201>:
    152a:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <agv_ultrasoon_boom_links>
    152e:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <agv_ultrasoon_boom_links+0x1>

00001532 <.Loc.203>:
    1532:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <arrayPositionLeft>
    1536:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <arrayPositionLeft+0x1>
    153a:	ac 01       	movw	r20, r24
    153c:	4f 5f       	subi	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <arrayPositionLeft+0x1>
    1544:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <arrayPositionLeft>

00001548 <.Loc.204>:
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	fc 01       	movw	r30, r24
    154e:	ea 59       	subi	r30, 0x9A	; 154
    1550:	fd 4f       	sbci	r31, 0xFD	; 253
    1552:	31 83       	std	Z+1, r19	; 0x01
    1554:	20 83       	st	Z, r18

00001556 <.L34>:
        PORTA &= ~(0b00000010);
    1556:	11 98       	cbi	0x02, 1	; 2
    1558:	6f cf       	rjmp	.-290    	; 0x1438 <.L32>

0000155a <__divmodhi4>:
    155a:	97 fb       	bst	r25, 7

0000155c <.Loc.1>:
    155c:	07 2e       	mov	r0, r23

0000155e <.Loc.2>:
    155e:	16 f4       	brtc	.+4      	; 0x1564 <.L^B1>

00001560 <.Loc.3>:
    1560:	00 94       	com	r0

00001562 <.Loc.4>:
    1562:	07 d0       	rcall	.+14     	; 0x1572 <__divmodhi4_neg1>

00001564 <.L^B1>:
    1564:	77 fd       	sbrc	r23, 7

00001566 <.Loc.6>:
    1566:	09 d0       	rcall	.+18     	; 0x157a <__divmodhi4_neg2>

00001568 <.Loc.7>:
    1568:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__udivmodhi4>

0000156c <.Loc.8>:
    156c:	07 fc       	sbrc	r0, 7

0000156e <.Loc.9>:
    156e:	05 d0       	rcall	.+10     	; 0x157a <__divmodhi4_neg2>

00001570 <.Loc.10>:
    1570:	3e f4       	brtc	.+14     	; 0x1580 <__divmodhi4_exit>

00001572 <__divmodhi4_neg1>:
    1572:	90 95       	com	r25

00001574 <.Loc.12>:
    1574:	81 95       	neg	r24

00001576 <.Loc.13>:
    1576:	9f 4f       	sbci	r25, 0xFF	; 255

00001578 <.Loc.14>:
    1578:	08 95       	ret

0000157a <__divmodhi4_neg2>:
    157a:	70 95       	com	r23

0000157c <.Loc.16>:
    157c:	61 95       	neg	r22

0000157e <.Loc.17>:
    157e:	7f 4f       	sbci	r23, 0xFF	; 255

00001580 <__divmodhi4_exit>:
    1580:	08 95       	ret

00001582 <__udivmodhi4>:
    1582:	aa 1b       	sub	r26, r26

00001584 <.Loc.1>:
    1584:	bb 1b       	sub	r27, r27

00001586 <.Loc.2>:
    1586:	51 e1       	ldi	r21, 0x11	; 17

00001588 <.Loc.3>:
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <__udivmodhi4_ep>

0000158a <__udivmodhi4_loop>:
    158a:	aa 1f       	adc	r26, r26

0000158c <.Loc.5>:
    158c:	bb 1f       	adc	r27, r27

0000158e <.Loc.6>:
    158e:	a6 17       	cp	r26, r22

00001590 <.Loc.7>:
    1590:	b7 07       	cpc	r27, r23

00001592 <.Loc.8>:
    1592:	10 f0       	brcs	.+4      	; 0x1598 <__udivmodhi4_ep>

00001594 <.Loc.9>:
    1594:	a6 1b       	sub	r26, r22

00001596 <.Loc.10>:
    1596:	b7 0b       	sbc	r27, r23

00001598 <__udivmodhi4_ep>:
    1598:	88 1f       	adc	r24, r24

0000159a <.Loc.12>:
    159a:	99 1f       	adc	r25, r25

0000159c <.Loc.13>:
    159c:	5a 95       	dec	r21

0000159e <.Loc.14>:
    159e:	a9 f7       	brne	.-22     	; 0x158a <__udivmodhi4_loop>

000015a0 <.Loc.15>:
    15a0:	80 95       	com	r24

000015a2 <.Loc.16>:
    15a2:	90 95       	com	r25

000015a4 <.Loc.17>:
    15a4:	bc 01       	movw	r22, r24

000015a6 <.Loc.18>:
    15a6:	cd 01       	movw	r24, r26

000015a8 <.Loc.19>:
    15a8:	08 95       	ret

000015aa <__fixunssfsi>:
    15aa:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_splitA>
    15ae:	88 f0       	brcs	.+34     	; 0x15d2 <.L_err>
    15b0:	9f 57       	subi	r25, 0x7F	; 127
    15b2:	98 f0       	brcs	.+38     	; 0x15da <.L_zr>
    15b4:	b9 2f       	mov	r27, r25
    15b6:	99 27       	eor	r25, r25
    15b8:	b7 51       	subi	r27, 0x17	; 23
    15ba:	b0 f0       	brcs	.+44     	; 0x15e8 <.L4^B1>
    15bc:	e1 f0       	breq	.+56     	; 0x15f6 <.L_sign>

000015be <.L1^B1>:
    15be:	66 0f       	add	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	1a f0       	brmi	.+6      	; 0x15ce <.L2^B1>
    15c8:	ba 95       	dec	r27
    15ca:	c9 f7       	brne	.-14     	; 0x15be <.L1^B1>
    15cc:	14 c0       	rjmp	.+40     	; 0x15f6 <.L_sign>

000015ce <.L2^B1>:
    15ce:	b1 30       	cpi	r27, 0x01	; 1
    15d0:	91 f0       	breq	.+36     	; 0x15f6 <.L_sign>

000015d2 <.L_err>:
    15d2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_zero>
    15d6:	b1 e0       	ldi	r27, 0x01	; 1
    15d8:	08 95       	ret

000015da <.L_zr>:
    15da:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__fp_zero>

000015de <.L3^B1>:
    15de:	67 2f       	mov	r22, r23
    15e0:	78 2f       	mov	r23, r24
    15e2:	88 27       	eor	r24, r24
    15e4:	b8 5f       	subi	r27, 0xF8	; 248
    15e6:	39 f0       	breq	.+14     	; 0x15f6 <.L_sign>

000015e8 <.L4^B1>:
    15e8:	b9 3f       	cpi	r27, 0xF9	; 249
    15ea:	cc f3       	brlt	.-14     	; 0x15de <.L3^B1>

000015ec <.L5^B1>:
    15ec:	86 95       	lsr	r24
    15ee:	77 95       	ror	r23
    15f0:	67 95       	ror	r22
    15f2:	b3 95       	inc	r27
    15f4:	d9 f7       	brne	.-10     	; 0x15ec <.L5^B1>

000015f6 <.L_sign>:
    15f6:	3e f4       	brtc	.+14     	; 0x1606 <.L6^B1>
    15f8:	90 95       	com	r25
    15fa:	80 95       	com	r24
    15fc:	70 95       	com	r23
    15fe:	61 95       	neg	r22
    1600:	7f 4f       	sbci	r23, 0xFF	; 255
    1602:	8f 4f       	sbci	r24, 0xFF	; 255
    1604:	9f 4f       	sbci	r25, 0xFF	; 255

00001606 <.L6^B1>:
    1606:	08 95       	ret

00001608 <__floatunsisf>:
    1608:	e8 94       	clt
    160a:	09 c0       	rjmp	.+18     	; 0x161e <.L1^B1>

0000160c <__floatsisf>:
    160c:	97 fb       	bst	r25, 7
    160e:	3e f4       	brtc	.+14     	; 0x161e <.L1^B1>
    1610:	90 95       	com	r25
    1612:	80 95       	com	r24
    1614:	70 95       	com	r23
    1616:	61 95       	neg	r22
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255

0000161e <.L1^B1>:
    161e:	99 23       	and	r25, r25
    1620:	a9 f0       	breq	.+42     	; 0x164c <.L4^B1>
    1622:	f9 2f       	mov	r31, r25
    1624:	96 e9       	ldi	r25, 0x96	; 150
    1626:	bb 27       	eor	r27, r27

00001628 <.L2^B1>:
    1628:	93 95       	inc	r25
    162a:	f6 95       	lsr	r31
    162c:	87 95       	ror	r24
    162e:	77 95       	ror	r23
    1630:	67 95       	ror	r22
    1632:	b7 95       	ror	r27
    1634:	f1 11       	cpse	r31, r1
    1636:	f8 cf       	rjmp	.-16     	; 0x1628 <.L2^B1>
    1638:	fa f4       	brpl	.+62     	; 0x1678 <.L_pack>
    163a:	bb 0f       	add	r27, r27
    163c:	11 f4       	brne	.+4      	; 0x1642 <.L3^B1>
    163e:	60 ff       	sbrs	r22, 0
    1640:	1b c0       	rjmp	.+54     	; 0x1678 <.L_pack>

00001642 <.L3^B1>:
    1642:	6f 5f       	subi	r22, 0xFF	; 255
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	8f 4f       	sbci	r24, 0xFF	; 255
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <.L_pack>

0000164c <.L4^B1>:
    164c:	88 23       	and	r24, r24
    164e:	11 f0       	breq	.+4      	; 0x1654 <.L5^B1>
    1650:	96 e9       	ldi	r25, 0x96	; 150
    1652:	11 c0       	rjmp	.+34     	; 0x1676 <.L8^B1>

00001654 <.L5^B1>:
    1654:	77 23       	and	r23, r23
    1656:	21 f0       	breq	.+8      	; 0x1660 <.L6^B1>
    1658:	9e e8       	ldi	r25, 0x8E	; 142
    165a:	87 2f       	mov	r24, r23
    165c:	76 2f       	mov	r23, r22
    165e:	05 c0       	rjmp	.+10     	; 0x166a <.L7^B1>

00001660 <.L6^B1>:
    1660:	66 23       	and	r22, r22
    1662:	71 f0       	breq	.+28     	; 0x1680 <.L9^B1>
    1664:	96 e8       	ldi	r25, 0x86	; 134
    1666:	86 2f       	mov	r24, r22
    1668:	70 e0       	ldi	r23, 0x00	; 0

0000166a <.L7^B1>:
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	2a f0       	brmi	.+10     	; 0x1678 <.L_pack>

0000166e <.L10^B1>:
    166e:	9a 95       	dec	r25
    1670:	66 0f       	add	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24

00001676 <.L8^B1>:
    1676:	da f7       	brpl	.-10     	; 0x166e <.L10^B1>

00001678 <.L_pack>:
    1678:	88 0f       	add	r24, r24
    167a:	96 95       	lsr	r25
    167c:	87 95       	ror	r24
    167e:	97 f9       	bld	r25, 7

00001680 <.L9^B1>:
    1680:	08 95       	ret

00001682 <__fp_split3>:
    1682:	57 fd       	sbrc	r21, 7
    1684:	90 58       	subi	r25, 0x80	; 128
    1686:	44 0f       	add	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	59 f0       	breq	.+22     	; 0x16a2 <.L4^B1>
    168c:	5f 3f       	cpi	r21, 0xFF	; 255
    168e:	71 f0       	breq	.+28     	; 0x16ac <.L5^B1>

00001690 <.L1^B1>:
    1690:	47 95       	ror	r20

00001692 <__fp_splitA>:
    1692:	88 0f       	add	r24, r24
    1694:	97 fb       	bst	r25, 7
    1696:	99 1f       	adc	r25, r25
    1698:	61 f0       	breq	.+24     	; 0x16b2 <.L6^B1>
    169a:	9f 3f       	cpi	r25, 0xFF	; 255
    169c:	79 f0       	breq	.+30     	; 0x16bc <.L7^B1>

0000169e <.L3^B1>:
    169e:	87 95       	ror	r24
    16a0:	08 95       	ret

000016a2 <.L4^B1>:
    16a2:	12 16       	cp	r1, r18
    16a4:	13 06       	cpc	r1, r19
    16a6:	14 06       	cpc	r1, r20
    16a8:	55 1f       	adc	r21, r21
    16aa:	f2 cf       	rjmp	.-28     	; 0x1690 <.L1^B1>

000016ac <.L5^B1>:
    16ac:	46 95       	lsr	r20
    16ae:	f1 df       	rcall	.-30     	; 0x1692 <__fp_splitA>
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <.L8^B1>

000016b2 <.L6^B1>:
    16b2:	16 16       	cp	r1, r22
    16b4:	17 06       	cpc	r1, r23
    16b6:	18 06       	cpc	r1, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	f1 cf       	rjmp	.-30     	; 0x169e <.L3^B1>

000016bc <.L7^B1>:
    16bc:	86 95       	lsr	r24
    16be:	71 05       	cpc	r23, r1
    16c0:	61 05       	cpc	r22, r1

000016c2 <.L8^B1>:
    16c2:	08 94       	sec
    16c4:	08 95       	ret

000016c6 <__fp_zero>:
    16c6:	e8 94       	clt

000016c8 <__fp_szero>:
    16c8:	bb 27       	eor	r27, r27
    16ca:	66 27       	eor	r22, r22
    16cc:	77 27       	eor	r23, r23
    16ce:	cb 01       	movw	r24, r22
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret

000016d4 <__mulsf3>:
    16d4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__mulsf3x>
    16d8:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__fp_round>

000016dc <.L^B1>:
    16dc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_pscA>
    16e0:	38 f0       	brcs	.+14     	; 0x16f0 <.L1^B1>
    16e2:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_pscB>
    16e6:	20 f0       	brcs	.+8      	; 0x16f0 <.L1^B1>
    16e8:	95 23       	and	r25, r21
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <.L1^B1>
    16ec:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>

000016f0 <.L1^B1>:
    16f0:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_nan>

000016f4 <.L2^B1>:
    16f4:	11 24       	eor	r1, r1
    16f6:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>

000016fa <__mulsf3x>:
    16fa:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fp_split3>
    16fe:	70 f3       	brcs	.-36     	; 0x16dc <.L^B1>

00001700 <__mulsf3_pse>:
    1700:	95 9f       	mul	r25, r21
    1702:	c1 f3       	breq	.-16     	; 0x16f4 <.L2^B1>
    1704:	95 0f       	add	r25, r21
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	55 1f       	adc	r21, r21
    170a:	62 9f       	mul	r22, r18
    170c:	f0 01       	movw	r30, r0
    170e:	72 9f       	mul	r23, r18
    1710:	bb 27       	eor	r27, r27
    1712:	f0 0d       	add	r31, r0
    1714:	b1 1d       	adc	r27, r1
    1716:	63 9f       	mul	r22, r19
    1718:	aa 27       	eor	r26, r26
    171a:	f0 0d       	add	r31, r0
    171c:	b1 1d       	adc	r27, r1
    171e:	aa 1f       	adc	r26, r26
    1720:	64 9f       	mul	r22, r20
    1722:	66 27       	eor	r22, r22
    1724:	b0 0d       	add	r27, r0
    1726:	a1 1d       	adc	r26, r1
    1728:	66 1f       	adc	r22, r22
    172a:	82 9f       	mul	r24, r18
    172c:	22 27       	eor	r18, r18
    172e:	b0 0d       	add	r27, r0
    1730:	a1 1d       	adc	r26, r1
    1732:	62 1f       	adc	r22, r18
    1734:	73 9f       	mul	r23, r19
    1736:	b0 0d       	add	r27, r0
    1738:	a1 1d       	adc	r26, r1
    173a:	62 1f       	adc	r22, r18
    173c:	83 9f       	mul	r24, r19
    173e:	a0 0d       	add	r26, r0
    1740:	61 1d       	adc	r22, r1
    1742:	22 1f       	adc	r18, r18
    1744:	74 9f       	mul	r23, r20
    1746:	33 27       	eor	r19, r19
    1748:	a0 0d       	add	r26, r0
    174a:	61 1d       	adc	r22, r1
    174c:	23 1f       	adc	r18, r19
    174e:	84 9f       	mul	r24, r20
    1750:	60 0d       	add	r22, r0
    1752:	21 1d       	adc	r18, r1
    1754:	82 2f       	mov	r24, r18
    1756:	76 2f       	mov	r23, r22
    1758:	6a 2f       	mov	r22, r26
    175a:	11 24       	eor	r1, r1
    175c:	9f 57       	subi	r25, 0x7F	; 127
    175e:	50 40       	sbci	r21, 0x00	; 0
    1760:	9a f0       	brmi	.+38     	; 0x1788 <.L13^B1>
    1762:	f1 f0       	breq	.+60     	; 0x17a0 <.L15^B1>

00001764 <.L10^B1>:
    1764:	88 23       	and	r24, r24
    1766:	4a f0       	brmi	.+18     	; 0x177a <.L11^B1>
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	bb 1f       	adc	r27, r27
    176e:	66 1f       	adc	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	91 50       	subi	r25, 0x01	; 1
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	a9 f7       	brne	.-22     	; 0x1764 <.L10^B1>

0000177a <.L11^B1>:
    177a:	9e 3f       	cpi	r25, 0xFE	; 254
    177c:	51 05       	cpc	r21, r1
    177e:	80 f0       	brcs	.+32     	; 0x17a0 <.L15^B1>
    1780:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>

00001784 <.L12^B1>:
    1784:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>

00001788 <.L13^B1>:
    1788:	5f 3f       	cpi	r21, 0xFF	; 255
    178a:	e4 f3       	brlt	.-8      	; 0x1784 <.L12^B1>
    178c:	98 3e       	cpi	r25, 0xE8	; 232
    178e:	d4 f3       	brlt	.-12     	; 0x1784 <.L12^B1>

00001790 <.L14^B1>:
    1790:	86 95       	lsr	r24
    1792:	77 95       	ror	r23
    1794:	67 95       	ror	r22
    1796:	b7 95       	ror	r27
    1798:	f7 95       	ror	r31
    179a:	e7 95       	ror	r30
    179c:	9f 5f       	subi	r25, 0xFF	; 255
    179e:	c1 f7       	brne	.-16     	; 0x1790 <.L14^B1>

000017a0 <.L15^B1>:
    17a0:	fe 2b       	or	r31, r30
    17a2:	88 0f       	add	r24, r24
    17a4:	91 1d       	adc	r25, r1
    17a6:	96 95       	lsr	r25
    17a8:	87 95       	ror	r24
    17aa:	97 f9       	bld	r25, 7
    17ac:	08 95       	ret

000017ae <__fp_inf>:
    17ae:	97 f9       	bld	r25, 7
    17b0:	9f 67       	ori	r25, 0x7F	; 127
    17b2:	80 e8       	ldi	r24, 0x80	; 128
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	08 95       	ret

000017ba <__fp_nan>:
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	80 ec       	ldi	r24, 0xC0	; 192
    17be:	08 95       	ret

000017c0 <__fp_pscA>:
    17c0:	00 24       	eor	r0, r0
    17c2:	0a 94       	dec	r0
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	18 06       	cpc	r1, r24
    17ca:	09 06       	cpc	r0, r25
    17cc:	08 95       	ret

000017ce <__fp_pscB>:
    17ce:	00 24       	eor	r0, r0
    17d0:	0a 94       	dec	r0
    17d2:	12 16       	cp	r1, r18
    17d4:	13 06       	cpc	r1, r19
    17d6:	14 06       	cpc	r1, r20
    17d8:	05 06       	cpc	r0, r21
    17da:	08 95       	ret

000017dc <__fp_round>:
    17dc:	09 2e       	mov	r0, r25
    17de:	03 94       	inc	r0
    17e0:	00 0c       	add	r0, r0
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <.L1^B1>
    17e4:	88 23       	and	r24, r24
    17e6:	52 f0       	brmi	.+20     	; 0x17fc <.L3^B1>

000017e8 <.L1^B1>:
    17e8:	bb 0f       	add	r27, r27
    17ea:	40 f4       	brcc	.+16     	; 0x17fc <.L3^B1>
    17ec:	bf 2b       	or	r27, r31
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <.L2^B1>
    17f0:	60 ff       	sbrs	r22, 0
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <.L3^B1>

000017f4 <.L2^B1>:
    17f4:	6f 5f       	subi	r22, 0xFF	; 255
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255

000017fc <.L3^B1>:
    17fc:	08 95       	ret

000017fe <_exit>:
    17fe:	f8 94       	cli

00001800 <__stop_program>:
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <__stop_program>
